# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id: Portfile 137267 2015-06-07 23:05:53Z ryandesign@macports.org $

PortSystem          1.0
PortGroup           compiler_blacklist_versions 1.0
PortGroup           muniversal 1.0
PortGroup           preserve_runtime_libraries 1.0

# Since libvpx installs a static library only, increase the revision of
# dependents when updating libvpx to a new version so they'll be rebuilt.
name                libvpx
version             1.6.0
categories          multimedia
maintainers         devans openmaintainer
platforms           darwin
license             Permissive

description         WebM VP8/VP9 Codec SDK
long_description    The WebM VP8/VP9 codecs are being developed \
                    specifically to meet the demand for the consumption \
                    of video over the Internet, including professionally \
                    and amateur produced video-on-demand and conversational \
                    video content. VP9 is an evolution of the VP8 video \
                    codec and includes a number of enhancements and new \
                    coding tools that have been added to improve coding efficiency. \
                    The VP9 encoder in this release is not, as yet, feature complete.

homepage            http://webmproject.org
master_sites        http://storage.googleapis.com/downloads.webmproject.org/releases/webm/
use_bzip2           yes

checksums           rmd160  84bcd655859fddbe170e9ffb08c3a37dd2dad62c \
                    sha256  d0afbb5eb1ecae68f8d578abace160a97e2e8a230e3028cf4db115d59a695aad

platform darwin {
    if {[string match "*86*" [get_canonical_archs]]} {
        depends_build-append port:yasm
    }
}

platform darwin {
    patchfiles      patch-build-make-configure.sh.diff \
                    patch-configure.diff
}
patchfiles-append   patch-Makefile.diff

# clang 425.0.28 with libvpx-1.4.0:
# vp9/common/x86/vp9_subpixel_8t_intrin_avx2.c:77:16: error: assigning to '__m256i' from incompatible type 'int'
#  filtersReg32 = MM256_BROADCASTSI128_SI256(filtersReg);
#               ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compiler.blacklist  {clang < 500}

configure.args      --enable-vp8 \
                    --enable-vp9 \
                    --enable-internal-stats \
                    --enable-pic \
                    --enable-postproc \
                    --enable-multithread \
                    --enable-runtime-cpu-detect \
                    --enable-shared \
                    --disable-debug-libs \
                    --disable-examples \
                    --disable-unit-tests

configure.env       LD="${configure.cc}"

# add in when docs are installed correctly
#variant docs description {Build documentation} {
#    depends_build-append path:bin/php:php5 port:doxygen
#    configure.args-delete --disable-install-docs
#    configure.args-append --enable-install-docs
#}

platform darwin 8 {
    # Tiger's make 3.80 experiences "virtual memory exhausted" during destroot
    depends_build-append    port:gmake
    build.cmd               ${prefix}/bin/gmake
}

build.target
build.args          verbose=1

destroot.args       verbose=1

# Build fix for MacPorts clang-3.5 and later:
#
# This is an intentional change to Clang. It now parses the assembly output by default even when emitting assembly so that the diagnostics are consistent between "clang -c" and "clang -S".
# The solution is either to pass -fno-integrated-as to the compiler, or change the assembly produced (& probably the script that processes it) so that it's valid. Note that commenting out the line won't work: comments get stripped by the same process.
# Current Xcode versions of clang > 602 corresponding to Xcode 6.3 or greater also need this fix

if {[string match "macports-clang-3.\[5-9\]" ${configure.compiler}] ||
    (${configure.compiler} eq "clang" && [compiler_blacklist_versions._get_compiler_version ${configure.compiler}] > 602)} {
        build.args-append CFLAGS_S=-fno-integrated-as
}

configure.universal_args-delete --disable-dependency-tracking

set my_targets(ppc)     ppc32
set my_targets(ppc64)   ppc64
set my_targets(i386)    x86
set my_targets(x86_64)  x86_64

# We must specify the target, otherwise the configure script will guess,
# and that may not match what the user requested in macports.conf.
foreach my_arch {ppc ppc64 i386 x86_64} {
    set merger_host(${my_arch}) ""
    if {[info exists my_targets(${my_arch})]} {
        set merger_configure_args(${my_arch}) --target=$my_targets(${my_arch})-${os.platform}-gcc
    }
}
if {![variant_isset universal]} {
    if {[info exists merger_configure_args(${build_arch})]} {
        configure.args-append $merger_configure_args(${build_arch})
    } else {
        configure.args-append --target=${os.arch}-${os.platform}-gcc
    }
}

####################
# it shouldn't be necessary to record variants in the archive name
set archname ${subport}@${version}-dev.tar.bz2
# this could go into the software images directory
set archdir ${destroot}${prefix}/var/devcontent

proc create_devport_content {first {args 0}} {
    global destroot prefix archname archdir
    # join ${first} and (the optional) ${args}
    set rawargs [linsert $args[set list {}] 0 ${first}]
    set args ""
    # convert the arguments to local-relative:
    foreach a ${rawargs} {
        set args "${args} ./${a}"
    }
    xinstall -m 755 -d ${archdir}
    if {[catch {system -W ${destroot} "bsdtar -cjvf ${archdir}/${archname} ${args}"} err]} {
        ui_error "Failure creating ${archdir}/${archname} for ${args}: ${err}"
        file delete -force ${archdir}/${archname}
    } else {
        foreach a ${args} {
            ui_info "cleaning out ${destroot}${a}"
            file delete -force ${destroot}${a}
        }
    }
}

proc unpack_devport_content {} {
    global destroot prefix archname archdir
    if {[file exists ${archdir}/${archname}]} {
        if {[catch {system -W ${destroot} "bsdtar -xvf ${archdir}/${archname}"} err]} {
            ui_error "Failure unpacking ${archdir}/${archname}: ${err}"
        }
    } else {
        ui_error "The port's content doesn't exists (${archdir}/${archname})!"
        return -code error "Missing content"
    }
}

proc create_devport {dependency} {
    global name long_description
    subport ${name}-dev {
        description     "Development headers and libraries for ${name}"
        depends_lib-append \
                        ${dependency}
        long_description ${long_description}\nThis installs the development headers and libraries.
        installs_libs   yes
        supported_archs noarch
        distfiles
        fetch {}
        checksum {}
        extract {}
        use_configure   no
        build {}
        destroot {
            unpack_devport_content
        }
    }
}

####################

create_devport port:${name}

post-destroot {
    preserve_libraries  ${prefix}/lib libvpx.so.*
    if {${subport} eq "${name}"} {
        create_devport_content ${prefix}/include/vpx ${prefix}/lib/libvpx.a ${prefix}/lib/libvpx.so
    }
}

livecheck.type  regex
livecheck.url   http://downloads.webmproject.org/releases/webm/index.html
livecheck.regex "${name}-(\\d+(?:\\.\\d+)*)${extract.suffix}"
