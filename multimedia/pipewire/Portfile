# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
# PortGroup           active_variants 1.1
PortGroup           locale_select 1.0
PortGroup           LTO 1.0
PortGroup           meson 1.0
PortGroup           gitlab 1.0
PortGroup           openssl 1.0

gitlab.setup        pipewire pipewire 1.2.7 ; revision 1

license             MIT
categories          audio
maintainers         openmaintainer
platforms           linux
description         Multimedia processing graphs: greatly improved handling of audio and video under Linux

long_description    PipeWire is a project that aims to improve the handling of audio and video under Linux greatly. \
                    It provides a low-latency, graph-based processing engine on top of audio and video devices that \
                    can be used to support the use cases currently handled by both PulseAudio and JACK. \
\
    Capture and playback of audio and video with minimal latency.\n\
    Real-time multimedia processing on audio and video.\n\
    Multiprocess architecture to let applications share multimedia content.\n\
    Seamless support for PulseAudio, JACK, ALSA, and GStreamer applications.\n\
    Sandboxed applications support. 

homepage            https://www.pipewire.org

use_bzip2           yes

checksums           rmd160  59e1f3bc3dedb3de315feeb79ca54ff1301547d9 \
                    sha256  3c00292f9a419610c9eeb6e45b958d460afb601ecc6894012574a3b9f118616a
#                     size    1823442


set perl_branch     5

# dependency on python3 goes through meson

depends_build-append \
                    port:gettext \
                    path:bin/pkg-config:pkgconfig \
                    port:doxygen \
                    port:gobject-introspection \
                    port:openal-soft
depends_test-append port:openal-soft

depends_lib-append  port:alsa-lib \
                    port:pulseaudio \
                    port:avahi \
                    port:dbus \
                    port:ffmpeg \
                    port:gettext-runtime \
                    path:lib/pkgconfig/glib-2.0.pc:glib2 \
                    port:gstreamer1-gst-plugins-base \
                    port:libcanberra \
                    port:libiconv \
                    port:libopus \
                    port:libsndfile \
                    port:libtool \
                    port:libusb \
                    port:readline \
                    port:systemd \
                    port:lua

if {${os.platform} ne "darwin"} {
#     depends_lib-append \
#                     port:bluez
    depends_build-append \
                    port:gettext-dev
    configure.ldflags-append \
                    "-L${prefix}/lib"
}

patchfiles-append   patch-memfd_create.diff

set meson_config    ${workpath}/meson_config.ini

configure.args-append \
                    --native-file ${meson_config}

post-patch {
    set fp [open ${meson_config} w]
    puts ${fp} {[binaries]}
    puts ${fp} "perl='${prefix}/bin/perl5'"
    # use the python interpreter also used by meson.
    puts ${fp} "python='[string range [exec head -1 ${configure.cmd}] 2 end]'"
    close ${fp}
}

compiler.c_standard 2011

# check for the presence of the C11 concurrency support library
if {![file exists /usr/include/threads.h]} {
    depends_build-append \
                    port:C11emu
    # C11 TLS functions are used in a single file only so we
    # can make do with the headerfile-only compatibility library.
    configure.cflags-append \
                    -I${prefix}/include/c11emu/header_only
    configure.cxxflags-append \
                    -I${prefix}/include/c11emu/header_only
}

configure.args-append \
                    -Dman=enabled \
                    -Dtests=disabled \
                    -Ddbus=enabled \
                    -Dudev=enabled \
                    -Dgstreamer=enabled \
                    -Dsystemd=enabled \
                    -Dselinux=disabled \
                    -Dpipewire-alsa=enabled \
                    -Dalsa=enabled \
                    -Dpipewire-jack=disabled \
                    -Djack=disabled \
                    -Dffmpeg=enabled \
                    -Dpw-cat-ffmpeg=enabled \
                    -Dsdl2=disabled \
                    -Davahi=enabled \
                    -Dlibpulse=enabled \
                    -Dgsettings-pulse-schema=disabled \
                    -Dlibusb=enabled \
                    -Dx11=disabled \
                    -Dlibcanberra=enabled \
                    -Dreadline=enabled \
                    -Dgsettings=disabled \
                    -Dopus=enabled \
                    -Dvulkan=disabled \
                    -Dbluez5=disabled \
                    -Dlv2=disabled \
                    -Dwireplumber:system-lua=true
# don't expect CLOCK_TAI
configure.args-append \
                    -Davb=disabled

configure.ldflags-append \
                    -lintl

configure.cflags-append \
                    -fdiagnostics-color=never
configure.cxxflags-append \
                    -fdiagnostics-color=never

meson.save_configure_cmd "install log"

# for g-ir-scanner which would otherwise use the compiler it's built with itself:
build.env-append    CC=${configure.cc} \
                    CXX=${configure.cxx}

test.run            no
test.target         test


variant lv2 conflicts minimal {
    configure.args-replace  -Dlv2=disabled \
                            -Dlv2=enabled
    depends_lib-append      port:lilv
}

variant x11 conflicts minimal {
    configure.args-replace  -Dx11=disabled \
                            -Dx11=enabled
    depends_lib-append      port:xorg-libX11 \
                            port:xorg-libxcb
}

variant jack conflicts minimal description {Enable Jack support.} {
    configure.args-replace  -Djack=disabled \
                            -Djack=enabled
    configure.args-replace  -Dpipewire-jack=disabled \
                            -Dpipewire-jack=enabled
    # depend on the distro-version on Linux for now
    depends_lib-append  bin:jack_test:jack
    if {[file exists /usr/lib/x86_64-linux-gnu/jack]} {
        configure.args-append \
                            -Dlibjack-path=/usr/lib/x86_64-linux-gnu/jack
    }
}

variant gsettings conflicts minimal description {Enable GSettings support } {
    configure.args-replace  -Dgsettings=disabled \
                            -Dgsettings=enabled
    depends_lib-append      port:gconf
}

variant tests description {Enable testing.} {
    configure.args-replace  -Dtests=disabled \
                            -Dtests=enabled
    test.run                yes
}

variant minimal description {minimal install; see `port info pipewire +minimal`} {
    long_description-append \nThe minimal variant disables the PulseAudio compatibility, WirePlumber \
                            and systemd integration.
    configure.args-replace  -Dlibpulse=enabled \
                            -Dlibpulse=disabled
    configure.args-replace  -Dsystemd=enabled \
                            -Dsystemd=disabled
    # let the build figure this one out:
    configure.args-delete   -Dgsettings-pulse-schema=disabled
    depends_lib-delete      port:lua \
                            port:pulseaudio
}

if {![variant_isset minimal]} {
    default_variants        +x11
}

build.pre_args-append       -k 0

destroot.violate_mtree      yes

post-destroot {
    foreach d {pipewire wireplumber} {
        foreach f [glob ${destroot}${prefix}/share/${d}/*.conf] {
            file rename ${f} ${f}.sample
        }
    }
    xinstall -m 755 -d ${destroot}${prefix}/lib/udev/rules.d
    file rename ${destroot}/usr/lib/udev/rules.d/90-pipewire-alsa.rules  ${destroot}${prefix}/lib/udev/rules.d/
    xinstall -m 755 -d ${destroot}/lib/udev/rules.d
    ln -s ${prefix}/lib/udev/rules.d/90-pipewire-alsa.rules ${destroot}/lib/udev/rules.d/
    if {![variant_isset minimal] && [file exists /usr/lib/systemd/user]} {
        xinstall -m 755 -d ${destroot}/usr/lib/systemd/user
        foreach s [glob ${destroot}${prefix}/lib/systemd/user/*] {
            ln -s [string map [list ${destroot}/ "../../../../"] ${s}] ${destroot}/usr/lib/systemd/user
        }
    }
}

post-activate {
    foreach d {pipewire wireplumber} {
        foreach f [glob -nocomplain ${prefix}/share/${d}/*.conf.sample] {
            set g [string map {".conf.sample" ".conf"} [file tail ${f}]]
            if {![file exists ${prefix}/etc/${d}/${g}]} {
                xinstall -m 755 -d ${prefix}/etc/${d}
                file copy ${f} ${prefix}/etc/${d}/${g}
                ui_msg "Copied ${f} to ${prefix}/etc/${d}/${g}"
            }
        }
        foreach f [glob -nocomplain ${prefix}/share/${d}/*.conf.avail] {
            set g [string map {".conf.avail" ".conf.d"} [file tail ${f}]]
            if {![file exists ${prefix}/etc/${d}/${g}]} {
                xinstall -m 755 -d ${prefix}/etc/${d}/${g}
                ui_msg "You can copy relevant files from ${f} to ${prefix}/etc/${d}/${g}"
            }
        }
    }
}

