diff --git src/builderFiles2.cpp src/builderFiles2.cpp
index 5ed5fa3..b0e045f 100644
--- src/builderFiles2.cpp
+++ src/builderFiles2.cpp
@@ -254,8 +254,8 @@ std::unique_ptr<XxDiffs> XxBuilderFiles2::process(
       XxLine::Type type;
       if ( parseDiffLine( type, line, f1n1, f1n2, f2n1, f2n2 ) == true ) {
          XX_LOCAL_TRACE( "ERROR" );
-         errors << "Diff error:" << Qt::endl;
-         errors << line << Qt::endl;
+         errors << "Diff error:" << endl;
+         errors << line << endl;
          continue;
       }
 
@@ -367,7 +367,7 @@ std::unique_ptr<XxDiffs> XxBuilderFiles2::process(
    // Collect stderr.
    QString errstr = diffProc.readAllStandardError();
    if ( ! errstr.isEmpty() ) {
-      errors << errstr << Qt::endl;
+      errors << errstr << endl;
    }
    _status = ( diffProc.exitStatus() == QProcess::NormalExit ) ? diffProc.exitCode() : 2;
 #else
@@ -375,7 +375,7 @@ std::unique_ptr<XxDiffs> XxBuilderFiles2::process(
 #endif
 
    // Saved error text.
-   errors << Qt::flush;
+   errors << flush;
    XX_LOCAL_TRACE( "Errors: " << _errors );
 
    // If we've read no lines and there are diff errors then blow off
diff --git src/builderFiles3.cpp src/builderFiles3.cpp
index 5a2558c..ed454d6 100644
--- src/builderFiles3.cpp
+++ src/builderFiles3.cpp
@@ -101,7 +101,7 @@ XxParseDiffError::XxParseDiffError(
    oss << "Error parsing diff3 output:"
        << " (" << f1n1 << "," << f1n2 << ")  file2: "
        << " (" << f2n1 << "," << f2n2 << ")  file3: "
-       << " (" << f3n1 << "," << f3n2 << ")" << Qt::endl;
+       << " (" << f3n1 << "," << f3n2 << ")" << endl;
 }
 
 /*==============================================================================
@@ -478,8 +478,8 @@ std::unique_ptr<XxDiffs> XxBuilderFiles3::process(
       if ( parseDiffLine( type, line,
                           sno, f1n1, f1n2, f2n1, f2n2, f3n1, f3n2 ) == true ) {
          XX_LOCAL_TRACE( "ERROR" );
-         errors << "Diff error:" << Qt::endl;
-         errors << line << Qt::endl;
+         errors << "Diff error:" << endl;
+         errors << line << endl;
          continue;
       }
 
@@ -553,12 +553,12 @@ std::unique_ptr<XxDiffs> XxBuilderFiles3::process(
    // Collect stderr.
    QString errstr = diffProc.readAllStandardError();
    if ( ! errstr.isEmpty() ) {
-      errors << errstr << Qt::endl;
+      errors << errstr << endl;
    }
    _status = ( diffProc.exitStatus() == QProcess::NormalExit ) ? diffProc.exitCode() : 2;
 
    // Saved error text.
-   errors << Qt::flush;
+   errors << flush;
    XX_LOCAL_TRACE( "Errors: " << _errors );
 
    // If we've read no lines and there are diff errors then blow off
diff --git src/builderDirs2.cpp src/builderDirs2.cpp
index 73a7af3..063fa93 100644
--- src/builderDirs2.cpp
+++ src/builderDirs2.cpp
@@ -117,8 +117,8 @@ XxParseDiffError::XxParseDiffError(
    std::runtime_error( "Parse diff output error." )
 {
    QTextStream oss( &_msg, QIODevice::WriteOnly | QIODevice::Append );
-   oss << "Error parsing diff output: " << Qt::endl
-       << buf << Qt::endl;
+   oss << "Error parsing diff output: " << endl
+       << buf << endl;
 }
 
 /*==============================================================================
@@ -339,8 +339,8 @@ void buildSolelyFromOutput(
          line, path1, path2, type, filename, onlyDir
       ) == true ) {
          XX_LOCAL_TRACE( "ERROR" );
-         errors << "Diff error:" << Qt::endl;
-         errors << line << Qt::endl;
+         errors << "Diff error:" << endl;
+         errors << line << endl;
          continue;
       }
 
@@ -435,8 +435,8 @@ void buildAgainstReadDirectory(
          line, path1, path2, type, filename, onlyDir
       ) == true ) {
          XX_LOCAL_TRACE( "ERROR" );
-         errors << "Diff error:" << Qt::endl;
-         errors << line << Qt::endl;
+         errors << "Diff error:" << endl;
+         errors << line << endl;
          continue;
       }
 
@@ -479,8 +479,8 @@ void buildAgainstReadDirectory(
       std::vector<DirDiffType>::const_iterator it2 = 
          std::find( types2.begin(), types2.end(), UNKNOWN );
       if ( it1 != types1.end() || it2 != types2.end() ) {
-         errors << "Forgotten files in directory diffs." << Qt::endl
-                << "Check your subordinate directory diff program." << Qt::endl;
+         errors << "Forgotten files in directory diffs." << endl
+                << "Check your subordinate directory diff program." << endl;
          
          // Patch it up, fallback somehow: for each file that is UNKNOWN in the
          // first array, if the file is available and UNKNOWN in the second,
@@ -681,12 +681,12 @@ std::unique_ptr<XxDiffs> XxBuilderDirs2::process(
    // Collect stderr.
    QString errstr = diffProc.readAllStandardError();
    if ( ! errstr.isEmpty() ) {
-      errors << errstr << Qt::endl;
+      errors << errstr << endl;
    }
    _status = ( diffProc.exitStatus() == QProcess::NormalExit ) ? diffProc.exitCode() : 2;
 
    // Saved error text.
-   errors << Qt::flush;
+   errors << flush;
    XX_LOCAL_TRACE( "Errors: " << _errors );
 
    // If we've read no lines and there are diff errors then blow off
diff --git src/builderUnmerge.cpp src/builderUnmerge.cpp
index 8f0db96..25deacf 100644
--- src/builderUnmerge.cpp
+++ src/builderUnmerge.cpp
@@ -94,7 +94,7 @@ XxConflictFormatError::XxConflictFormatError(
    oss << "Error parsing conflicts file:"
        << " (" << f1n1 << "," << f1n2 << ")  file2: "
        << " (" << f2n1 << "," << f2n2 << ")  file3: "
-       << " (" << f3n1 << "," << f3n2 << ")" << Qt::endl;
+       << " (" << f3n1 << "," << f3n2 << ")" << endl;
 }
 
 XX_NAMESPACE_BEGIN
@@ -203,19 +203,19 @@ std::unique_ptr<XxDiffs> XxBuilderUnmerge::process(
    if ( !reStart.isValid() ) {
       QString str;
       QTextStream oss( &str );
-      oss << "TAG_UNMERGE_START is invalid: " << reStart.pattern() << Qt::endl;
+      oss << "TAG_UNMERGE_START is invalid: " << reStart.pattern() << endl;
       throw XxError( XX_EXC_PARAMS, str );
    }
    if ( !reSep.isValid() ) {
       QString str;
       QTextStream oss( &str );
-      oss << "TAG_UNMERGE_SEP is invalid: " << reSep.pattern() << Qt::endl;
+      oss << "TAG_UNMERGE_SEP is invalid: " << reSep.pattern() << endl;
       throw XxError( XX_EXC_PARAMS, str );
    }
    if ( !reEnd.isValid() ) {
       QString str;
       QTextStream oss( &str );
-      oss << "TAG_UNMERGE_END is invalid: " << reEnd.pattern() << Qt::endl;
+      oss << "TAG_UNMERGE_END is invalid: " << reEnd.pattern() << endl;
       throw XxError( XX_EXC_PARAMS, str );
    }
 
@@ -274,7 +274,7 @@ std::unique_ptr<XxDiffs> XxBuilderUnmerge::process(
                             << fsize1 << " " << fsize2 );
             if ( fsize1 == 0 && fsize2 == 0 ) {
                errors << "Warning: empty change at line " << (f1n1 - 1)
-                      << " in file with conflicts." << Qt::endl;
+                      << " in file with conflicts." << endl;
             }
             if ( fsize1 == 0 ) {
                createInsertRightBlock( f2n1, fsize2 );
@@ -312,7 +312,7 @@ std::unique_ptr<XxDiffs> XxBuilderUnmerge::process(
       /*--_curHunk; // Extend current hunk.*/ // (it works anyway)
       createInsertLeftBlock( f1n1, nbLines + 1 - f1n1 );
       errors << "Warning: file ends inside change at line " << (f1n1 - 1)
-             << Qt::endl;
+             << endl;
    }
    else if ( inConflict == IN2 ) {
       int fsize1 = f1n2 - f1n1;
@@ -330,13 +330,13 @@ std::unique_ptr<XxDiffs> XxBuilderUnmerge::process(
          createChangeBlock( f1n1, f2n1, fsize1, fsize2 );
       }
       errors << "Warning: file ends inside change at line " << (f1n1 - 1)
-             << Qt::endl;
+             << endl;
    }
 
    XX_LOCAL_TRACE( "DONE" );
 
    // Saved error text.
-   errors << Qt::flush;
+   errors << flush;
    XX_LOCAL_TRACE( "Errors: " << _errors );
 
    XX_LOCAL_TRACE( "Left: " << outFileLeft );
@@ -382,25 +382,25 @@ std::unique_ptr<XxDiffs> XxBuilderUnmerge::process(
    if ( !reStart.isValid() ) {
       QString str;
       QTextStream oss( &str );
-      oss << "TAG_UNMERGE_START is invalid: " << reStart.pattern() << Qt::endl;
+      oss << "TAG_UNMERGE_START is invalid: " << reStart.pattern() << endl;
       throw XxError( XX_EXC_PARAMS, str );
    }
    if ( !reSep1.isValid() ) {
       QString str;
       QTextStream oss( &str );
-      oss << "TAG_UNMERGE_SEP_EXTRA is invalid: " << reSep1.pattern() << Qt::endl;
+      oss << "TAG_UNMERGE_SEP_EXTRA is invalid: " << reSep1.pattern() << endl;
       throw XxError( XX_EXC_PARAMS, str );
    }
    if ( !reSep2.isValid() ) {
       QString str;
       QTextStream oss( &str );
-      oss << "TAG_UNMERGE_SEP is invalid: " << reSep2.pattern() << Qt::endl;
+      oss << "TAG_UNMERGE_SEP is invalid: " << reSep2.pattern() << endl;
       throw XxError( XX_EXC_PARAMS, str );
    }
    if ( !reEnd.isValid() ) {
       QString str;
       QTextStream oss( &str );
-      oss << "TAG_UNMERGE_END is invalid: " << reEnd.pattern() << Qt::endl;
+      oss << "TAG_UNMERGE_END is invalid: " << reEnd.pattern() << endl;
       throw XxError( XX_EXC_PARAMS, str );
    }
 
@@ -489,7 +489,7 @@ std::unique_ptr<XxDiffs> XxBuilderUnmerge::process(
                             << f3n1 << " " << f3n2 );
             if ( fsize1 == 0 && fsize2 == 0 && fsize3 == 0 ) {
                errors << "Warning: empty change at line " << (f1n1 - 1)
-                      << " in file with conflicts." << Qt::endl;
+                      << " in file with conflicts." << endl;
             }
             else if ( f2n1 == -1 ) {
                //
@@ -595,7 +595,7 @@ std::unique_ptr<XxDiffs> XxBuilderUnmerge::process(
       createIgnoreBlock( f1n1 - 1, f1n1 - 1, f1n1 - 1, nbLines + 1 - (f1n1-1) );
 
       errors << "Warning: file ends inside change at line " << (f1n1 - 1)
-             << Qt::endl;
+             << endl;
    }
    else if ( f1n1 <= nbLines ) {
       // Add final ignore region if present.
@@ -605,7 +605,7 @@ std::unique_ptr<XxDiffs> XxBuilderUnmerge::process(
    XX_LOCAL_TRACE( "DONE" );
 
    // Saved error text.
-   errors << Qt::flush;
+   errors << flush;
    XX_LOCAL_TRACE( "Errors: " << _errors );
 
    XX_LOCAL_TRACE( "Left: " << outFileLeft );
