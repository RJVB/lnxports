# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id: Portfile 128101 2014-11-13 09:19:56Z ryandesign@macports.org $

PortSystem          1.0

name                qca

# Qt version handling logic
global Qt_Major
subport ${name}-qt5 {}
if {[string match "${name}-qt5*" ${subport}]} {
    version         2.1.0.3
    PortGroup       qt5 1.0
    set Qt_Major    5
    master_sites    http://download.kde.org/stable/qca-qt5/${version}/src
    checksums       rmd160  cc4040d013170ca5f21fbcefd0607daa8191d333 \
                    sha256  ab0170696a8ff87588d38a72d36d0b4b42db9080c991d1a40ceb3f8311d289f9
    use_xz          yes
    distname        "qca-qt5-${version}"
    livecheck.regex "qca-qt5-(\\d+(?:\\.\\d+)*)"
} else {
    version         2.1.0
    set branch      [join [lrange [split ${version} .] 0 0] .]
    PortGroup       qt4 1.0
    set Qt_Major    4
    master_sites    http://delta.affinix.com/download/qca/${branch}.0/
    checksums       md5     c2b00c732036244701bae4853a2101cf \
                    sha1    2b582b3ccc7e6098cd14d6f52a829ae1539e9cc8 \
                    rmd160  30358bbd182cfeb9eaa696b5b39fa9e6d1f99b4c
    livecheck.regex "${name}-(\\d+(?:\\.\\d+)*)"
}
PortGroup           cmake 1.0
cmake.out_of_source yes

categories          devel crypto security
maintainers         michaelld gmail.com:rjvbertin openmaintainer
license             LGPL-2.1
description         Qt Cryptographic Architecture
long_description \
    Qt Cryptographic Architecture provides an easy API for the following \
    features: SSL/TLS, X509, SASL, RSA, Hashing (SHA1, MD5), Ciphers \
    (BlowFish, 3DES, AES).  Functionality is supplied via plugins.

platforms            darwin

homepage             http://delta.affinix.com/qca/
#use_bzip2            yes

platform darwin {
	depends_lib-append \
                     port:libgcrypt \
                     port:nss

    # remove unnecessary Carbon #include, which fails on 10.8
    patchfiles-append    patch-src_qac_systemstore_mac.cpp.diff
}
depends_lib-append  port:botan

patchfiles-append   patch-qca-ossl.diff

# 1) it seems that configure.pre_args --prefix=${qt_dir} has the desired effect, but
# I don't know to what extent that uses an undocumented cmake feature, so use
# the exhaustive list of install variables.
# 2) the QCA plugins have been rolled into the main source tarball and are built by default
# when their dependencies are available. Allow this for all plugins that were not already
# available through an individual port.
configure.args          -DCMAKE_INSTALL_PREFIX:PATH=${qt_dir} \
                        -DQCA_PLUGINS_INSTALL_DIR:PATH=${qt_plugins_dir} \
                        -DQCA_LIBRARY_INSTALL_DIR:PATH=${qt_libs_dir} \
                        -DQCA_BINARY_INSTALL_DIR:PATH=${qt_bins_dir} \
                        -DQCA_FEATURE_INSTALL_DIR:PATH=${qt_mkspecs_dir}/features \
                        -DQCA_INCLUDE_INSTALL_DIR:PATH=${qt_includes_dir} \
                        -DQCA_PRIVATE_INCLUDE_INSTALL_DIR:PATH=${qt_includes_dir} \
                        -DQCA_DOC_INSTALL_DIR:PATH=${qt_docs_dir} \
                        -DQCA_MAN_INSTALL_DIR:PATH=${prefix}/share/man \
                        -DPKGCONFIG_INSTALL_PREFIX:PATH=${qt_pkg_config_dir} \
                        -DOSX_FRAMEWORK:BOOL=OFF \
                        -DBUILD_PLUGINS:STRING="botan\;gcrypt\;logger\;nss\;softstore"

if {${Qt_Major} eq "4"} {
    configure.args-append \
                        -DQT4_BUILD:BOOL=ON
    if {${qt_dir} ne ${prefix}} {
       # temporary transitional variant to accompany qt4-mac's transitional subport:
       variant transitional description \
            {temporary variant that allows to install Qt4 and QCA "concurrently" without having to rebuild all dependents} {}
       if {[file exists ${prefix}/lib/libQtCore.4.dylib]} {
            default_variants  +transitional
       }
    }
} elseif {${Qt_Major} eq "5"} {
    patchfiles-append   patch-qca210-qt550.diff
    configure.args-append \
                        -DQCA_SUFFIX:STRING="qt5"
}

# allow ccache, if specified by the user
pre-build {
    if {[tbool configure.ccache]} {
        build.post_args "CCACHE=ccache"
    }
}

post-destroot {
    if {${subport} eq ${name} || ${subport} eq "${subport}-qt5"} {
        # install docs
        xinstall -d -m 755 ${destroot}${prefix}/share/doc/${subport}
        xinstall -m 644 -W ${worksrcpath} COPYING README TODO \
            ${destroot}${prefix}/share/doc/${subport}
    }

    if {${subport} eq "${name}"} {
        # install cmake file (taken from port 'kdelibs4'). To use this
        # file, include '-DCMAKE_MODULE_PATH=...' in configure.args during
        # the initial 'configure' stage (which uses CMake), to the full
        # path of where the CMake files are installed.
        # note that QCA 2.1+ also installs .cmake files in ${qt_libs_dir}/cmake/Qca; I don't
        # currently know what to do with those so I'm leaving them there.
        xinstall -d -m 755 ${destroot}${qt_cmake_module_dir}
        xinstall -m 644 -W ${filespath} FindQCA2.cmake \
            ${destroot}${qt_cmake_module_dir}

        # check if Qt4 was installed in concurrent mode; should become unconditional
        # once Qt4 can only install that way.
        if {${qt_dir} ne ${prefix}} {
            # temporary
            if {[variant_exists transitional] && [variant_isset transitional]} {
                ln -s ${qt_libs_dir}/libqca.2.dylib ${destroot}${prefix}/lib
            }
            # move the pkgconfig file to its designated location
            #move ${destroot}${qt_libs_dir}/pkgconfig/qca2.pc ${destroot}/${qt_pkg_config_dir}
        }
    }
}

# NB: it doesn't seem possible to build this way with the new cmake-based approach
variant debug description \
{Build both release and debug library} {
    ui_msg "this variant is obsolete"
    PortGroup   obsolete 1.0
}

# avoid installing the examples into Qt's binary tree
variant examples description \
{Include examples in install} {
    post-destroot {
        xinstall -d -m 755 ${destroot}${prefix}/share/${subport}/examples/
        eval file copy [glob ${worksrcpath}/examples/*] \
            ${destroot}${prefix}/share/${subport}/examples/
    }
}

# NB: I haven't yet tested universal variants; those may require the muniversal portgroup
# variant universal {
#     # Add the universal flag understood by qmake
#     configure.universal_args-append --universal
# }

### The ossl, cyrus-sasl and gnupg plugins that used to be standalone ports.
### It makes more sense IMHO to implement them as subports. The other plugins
### are built together with the main port. I'd have done the same thing for the
### plugins below, but that would have meant changing all dependents and could
### have licensing implications.
# Qt4 receives no suffix:
set qt.versions     {"" "-qt5"}
foreach qv ${qt.versions} {
    subport ${name}${qv}-ossl {
        license                 LGPL-2.1+
        depends_lib-append      port:${name}${qv} port:openssl
        configure.args-delete   -DBUILD_PLUGINS:STRING="botan\;gcrypt\;logger\;nss\;softstore"
        configure.args-append   -DBUILD_PLUGINS:STRING="ossl"
        build.dir               ${workpath}/build/plugins/qca-ossl
    }
    subport ${name}${qv}-cyrus-sasl {
        license                 LGPL-2.1+
        depends_lib-append      port:${name}${qv} port:cyrus-sasl2
        configure.args-delete   -DBUILD_PLUGINS:STRING="botan\;gcrypt\;logger\;nss\;softstore"
        configure.args-append   -DBUILD_PLUGINS:STRING="cyrus-sasl"
        build.dir               ${workpath}/build/plugins/qca-cyrus-sasl
    }
    subport ${name}${qv}-gnupg {
        license                 LGPL-2.1+
        depends_lib-append      port:${name}${qv}
        configure.args-delete   -DBUILD_PLUGINS:STRING="botan\;gcrypt\;logger\;nss\;softstore"
        configure.args-append   -DBUILD_PLUGINS:STRING="gnupg"
        build.dir               ${workpath}/build/plugins/qca-gnupg
    }
}

livecheck.type  regex
livecheck.url   ${master_sites}
