diff --git dbus/dbus-server-unix.c dbus/dbus-server-unix.c
index 92664a8..ef6e0b4 100644
--- dbus/dbus-server-unix.c
+++ dbus/dbus-server-unix.c
@@ -262,8 +262,12 @@ _dbus_server_listen_platform_specific (DBusAddressEntry *entry,
       const char *launchd_env_var = dbus_address_entry_get_value (entry, "env");
       if (launchd_env_var == NULL)
         {
+#if !(defined(DBUS_BUILD_X11))
           _dbus_set_bad_address (error, "launchd", "env", NULL);
           return DBUS_SERVER_LISTEN_DID_NOT_CONNECT;
+#else
+          goto fallback;
+#endif
         }
       *server_p = _dbus_server_new_for_launchd (launchd_env_var, error);
 
@@ -272,11 +276,32 @@ _dbus_server_listen_platform_specific (DBusAddressEntry *entry,
           _DBUS_ASSERT_ERROR_IS_CLEAR(error);
           return DBUS_SERVER_LISTEN_OK;
         }
+#if !(defined(DBUS_BUILD_X11))
       else
         {
           _DBUS_ASSERT_ERROR_IS_SET(error);
           return DBUS_SERVER_LISTEN_DID_NOT_CONNECT;
         }
+#else
+fallback:;
+      // try a hardcoded traditional address
+      {
+        DBusAddressEntry **altEntry;
+        int altLen;
+        DBusError altError;
+        DBusServerListenResult retval;
+        if (dbus_parse_address ("unix:tmpdir=/tmp", &altEntry, &altLen, &altError) && altLen > 0)
+          {
+            retval = _dbus_server_listen_platform_specific (altEntry[0], server_p, error);
+            dbus_address_entries_free (altEntry);
+          }
+        else
+          {
+            retval = DBUS_SERVER_LISTEN_DID_NOT_CONNECT;
+          }
+        return retval;
+      }
+#endif
     }
 #endif
   else
diff --git dbus/dbus-sysdeps-unix.c dbus/dbus-sysdeps-unix.c
index 5691c5a..31f2060 100644
--- dbus/dbus-sysdeps-unix.c
+++ dbus/dbus-sysdeps-unix.c
@@ -4128,15 +4128,28 @@ _dbus_lookup_session_address (dbus_bool_t *supported,
                               DBusString  *address,
                               DBusError   *error)
 {
+  dbus_bool_t retval = FALSE;
 #ifdef DBUS_ENABLE_LAUNCHD
   *supported = TRUE;
-  return _dbus_lookup_session_address_launchd (address, error);
-#else
+  retval = _dbus_lookup_session_address_launchd (address, error);
+  if (retval)
+    {
+      // success, no need to attempt anything else
+      return TRUE;
+    }
+#endif
+// dbus can function with an X11 server like it does on other Unix versions, even when
+// it will use launchd by default (on Mac)
+#if !defined(DBUS_ENABLE_LAUNCHD) || (defined(DBUS_BUILD_X11))
   *supported = FALSE;
 
   if (!_dbus_lookup_user_bus (supported, address, error))
     return FALSE;
-  else if (*supported)
+#ifdef DBUS_ENABLE_LAUNCHD
+  _dbus_verbose ("traditional session bus lookup yielded address \"%s\"",
+              _dbus_string_get_const_data (address));
+#endif
+  if (*supported)
     return TRUE;
 
   /* On non-Mac Unix platforms, if the session address isn't already
@@ -4145,6 +4158,8 @@ _dbus_lookup_session_address (dbus_bool_t *supported,
    * autolaunch: global default; see init_session_address in
    * dbus/dbus-bus.c. */
   return TRUE;
+#else
+  return retval;
 #endif
 }
 
diff --git dbus/dbus-transport-unix.c dbus/dbus-transport-unix.c
index f2b1f09..d898c13 100644
--- dbus/dbus-transport-unix.c
+++ dbus/dbus-transport-unix.c
@@ -392,11 +392,13 @@ _dbus_transport_open_platform_specific (DBusAddressEntry  *entry,
           _DBUS_ASSERT_ERROR_IS_SET (error);
           return DBUS_TRANSPORT_OPEN_DID_NOT_CONNECT;
         }
+#if !(defined(DBUS_BUILD_X11))
       else
         {
           _DBUS_ASSERT_ERROR_IS_CLEAR (error);
           return DBUS_TRANSPORT_OPEN_OK;
         }
+#endif
     }
 #endif
   else
