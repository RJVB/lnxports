From 714d9bc4078898bfb9513e5e17c2bb3c935eef5f Mon Sep 17 00:00:00 2001
From: Bastien Nocera <hadess@hadess.net>
Date: Tue, 18 Jan 2011 16:13:00 +0000
Subject: GtkImage: Add "use-fallback" property

So that icon-name and GIcon type of GtkImages can use automatic
fallback names.
---
Index: gtk+2.0-2.24.4/gtk/gtkimage.c
===================================================================
--- gtk+2.0-2.24.4.orig/gtk/gtkimage.c	2011-04-13 12:26:48.104712854 -0500
+++ gtk+2.0-2.24.4/gtk/gtkimage.c	2011-04-13 12:28:19.576702233 -0500
@@ -138,6 +138,7 @@
 
   gint pixel_size;
   guint need_calc_size : 1;
+  guint                 use_fallback : 1;
 };
 
 #define GTK_IMAGE_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), GTK_TYPE_IMAGE, GtkImagePrivate))
@@ -188,7 +189,8 @@
   PROP_PIXBUF_ANIMATION,
   PROP_ICON_NAME,
   PROP_STORAGE_TYPE,
-  PROP_GICON
+  PROP_GICON,
+  PROP_USE_FALLBACK
 };
 
 G_DEFINE_TYPE (GtkImage, gtk_image, GTK_TYPE_MISC)
@@ -351,6 +353,24 @@
                                                       GTK_IMAGE_EMPTY,
                                                       GTK_PARAM_READABLE));
 
+  /**
+   * GtkImage:use-fallback:
+   *
+   * Whether the icon displayed in the GtkImage will use
+   * standard icon names fallback. The value of this property
+   * is only relevant for images of type %GTK_IMAGE_ICON_NAME
+   * and %GTK_IMAGE_GICON.
+   *
+   * Since: 3.0
+   */
+  g_object_class_install_property (gobject_class,
+                                   PROP_USE_FALLBACK,
+                                   g_param_spec_boolean ("use-fallback",
+                                                         P_("Use Fallback"),
+                                                         P_("Whether to use icon names fallback"),
+                                                         FALSE,
+                                                         GTK_PARAM_READWRITE));
+
   g_type_class_add_private (object_class, sizeof (GtkImagePrivate));
 }
 
@@ -387,8 +407,10 @@
 			GParamSpec   *pspec)
 {
   GtkImage *image;
+  GtkImagePrivate *priv;
 
   image = GTK_IMAGE (object);
+  priv = GTK_IMAGE_GET_PRIVATE (image);
   
   switch (prop_id)
     {
@@ -477,6 +499,18 @@
 				image->icon_size);
       break;
 
+    case PROP_USE_FALLBACK:
+      priv->use_fallback = g_value_get_boolean(value);
+      if (image->storage_type == GTK_IMAGE_ICON_NAME)
+        gtk_image_set_from_icon_name (image,
+				      image->data.name.icon_name,
+				      image->icon_size);
+      else if (image->storage_type == GTK_IMAGE_GICON)
+        gtk_image_set_from_gicon (image,
+                                  image->data.gicon.icon,
+                                  image->icon_size);
+      break;
+
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -574,6 +608,10 @@
     case PROP_STORAGE_TYPE:
       g_value_set_enum (value, image->storage_type);
       break;
+
+    case PROP_USE_FALLBACK:
+      g_value_set_boolean (value, priv->use_fallback);
+      break;
       
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
@@ -1667,6 +1705,8 @@
   icon_theme = gtk_icon_theme_get_for_screen (screen);
   settings = gtk_settings_get_for_screen (screen);
   flags = GTK_ICON_LOOKUP_USE_BUILTIN;
+  if (priv->use_fallback)
+    flags |= GTK_ICON_LOOKUP_GENERIC_FALLBACK;
   if (image->data.name.pixbuf == NULL)
     {
       if (priv->pixel_size != -1)
@@ -1750,6 +1790,8 @@
   icon_theme = gtk_icon_theme_get_for_screen (screen);
   settings = gtk_settings_get_for_screen (screen);
   flags = GTK_ICON_LOOKUP_USE_BUILTIN;
+  if (priv->use_fallback)
+    flags |= GTK_ICON_LOOKUP_GENERIC_FALLBACK;
   if (image->data.gicon.pixbuf == NULL)
     {
       if (priv->pixel_size != -1)
