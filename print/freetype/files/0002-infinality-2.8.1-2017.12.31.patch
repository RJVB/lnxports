From 48c2930e9b83c47457ca03f5f8e6f1b61540a8e6 Mon Sep 17 00:00:00 2001
From: "Devin J. Pohly" <djpohly@gmail.com>
Date: Wed, 24 May 2017 15:08:52 -0500
Subject: [PATCH] infinality 2.8 2017.05.24

===
 builds/freetype.mk                 |    1 +
 configure                          |    2 +
 devel/ftoption.h                   |   10 +
 include/freetype/config/ftoption.h |   17 +-
 src/autofit/aflatin.c              |  170 ++-
 src/autofit/aflatin.h              |    3 +
 src/autofit/afmodule.c             |    7 +
 src/base/Jamfile                   |    1 +
 src/base/ftbase.c                  |    3 +
 src/base/ftinf.c                   |  363 +++++
 src/base/ftinf.h                   |   66 +
 src/base/ftinf_rh.c                |  626 ++++++++
 src/base/ftinf_rh.gperf            |  283 ++++
 src/base/ftinf_sh.c                |  463 ++++++
 src/base/ftinf_sh.gperf            |  264 ++++
 src/base/ftinit.c                  |   14 +-
 src/base/ftlcdfil.c                |   35 +-
 src/base/ftobjs.c                  |   67 +-
 src/base/ftoutln.c                 |   10 +-
 src/base/ftsynth.c                 |   22 +-
 src/base/rules.mk                  |    1 +
 src/cff/cffobjs.c                  |    6 +
 src/truetype/ttinterp.c            |    1 +
 24 files changed, 5122 insertions(+), 121 deletions(-)
 create mode 100644 src/base/ftinf.c
 create mode 100644 src/base/ftinf.h
 create mode 100644 src/base/ftinf_rh.c
 create mode 100644 src/base/ftinf_rh.gperf
 create mode 100644 src/base/ftinf_sh.c
 create mode 100644 src/base/ftinf_sh.gperf

diff --git builds/freetype.mk builds/freetype.mk
index f8cfd41..7e7ac5b 100644
--- builds/freetype.mk
+++ builds/freetype.mk
@@ -161,6 +161,7 @@ FT_CFLAGS  = $(CPPFLAGS) \
              $(CFLAGS) \
              $DFT2_BUILD_LIBRARY \
              $DFT_CONFIG_MODULES_H="<ftmodule.h>" \
+			 $D_GNU_SOURCE \
              $(FTOPTION_FLAG)
 
 
diff --git configure configure
index 68dbd99..165703c 100755
--- configure
+++ configure
@@ -13,6 +13,8 @@
 # Call the `configure' script located in `builds/unix'.
 #
 
+export LDFLAGS="$LDFLAGS -lm"
+
 rm -f config.mk builds/unix/unix-def.mk builds/unix/unix-cc.mk
 
 # respect GNUMAKE environment variable for backward compatibility
diff --git devel/ftoption.h devel/ftoption.h
index db661e7..911f411 100644
--- devel/ftoption.h
+++ devel/ftoption.h
@@ -626,6 +626,16 @@ FT_BEGIN_HEADER
   /*                                                                       */
 #define TT_CONFIG_OPTION_BYTECODE_INTERPRETER
 
+  /*************************************************************************/
+  /*                                                                       */
+  /* Define FT_CONFIG_OPTION_INFINALITY_PATCHSET if you want to enable     */
+  /* all additional infinality patches, which are configured via env       */
+  /* variables.                                                            */
+  /*                                                                       */
+  /*   This option requires TT_CONFIG_OPTION_SUBPIXEL_HINTING to           */
+  /*   defined.                                                            */
+  /*                                                                       */
+#define FT_CONFIG_OPTION_INFINALITY_PATCHSET
 
   /*************************************************************************/
   /*                                                                       */
diff --git include/freetype/config/ftoption.h include/freetype/config/ftoption.h
index 1bf6e8f..c565b36 100644
--- include/freetype/config/ftoption.h
+++ include/freetype/config/ftoption.h
@@ -122,7 +122,7 @@ FT_BEGIN_HEADER
   /* This is done to allow FreeType clients to run unmodified, forcing     */
   /* them to display normal gray-level anti-aliased glyphs.                */
   /*                                                                       */
-/* #define FT_CONFIG_OPTION_SUBPIXEL_RENDERING */
+#define FT_CONFIG_OPTION_SUBPIXEL_RENDERING
 
 
   /*************************************************************************/
@@ -626,6 +626,17 @@ FT_BEGIN_HEADER
   /*                                                                       */
 #define TT_CONFIG_OPTION_BYTECODE_INTERPRETER
 
+  /*************************************************************************/
+  /*                                                                       */
+  /* Define FT_CONFIG_OPTION_INFINALITY_PATCHSET if you want to enable     */
+  /* all additional infinality patches, which are configured via env       */
+  /* variables.                                                            */
+  /*                                                                       */
+  /*   This option requires TT_CONFIG_OPTION_SUBPIXEL_HINTING to           */
+  /*   defined.                                                            */
+  /*                                                                       */
+#define FT_CONFIG_OPTION_INFINALITY_PATCHSET
+
 
   /*************************************************************************/
   /*                                                                       */
@@ -684,8 +695,8 @@ FT_BEGIN_HEADER
   /* [1] http://www.microsoft.com/typography/cleartype/truetypecleartype.aspx */
   /*                                                                       */
 /* #define TT_CONFIG_OPTION_SUBPIXEL_HINTING  1         */
-#define TT_CONFIG_OPTION_SUBPIXEL_HINTING  2
-/* #define TT_CONFIG_OPTION_SUBPIXEL_HINTING  ( 1 | 2 ) */
+/* #define TT_CONFIG_OPTION_SUBPIXEL_HINTING  1 */
+#define TT_CONFIG_OPTION_SUBPIXEL_HINTING  ( 1 | 2 )
 
 
   /*************************************************************************/
diff --git src/autofit/aflatin.c src/autofit/aflatin.c
index 11fa523..9036fc4 100644
--- src/autofit/aflatin.c
+++ src/autofit/aflatin.c
@@ -24,7 +24,10 @@
 #include "afpic.h"
 #include "aflatin.h"
 #include "aferrors.h"
-
+#include "strings.h"
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+#include "../base/ftinf.h"
+#endif
 
 #ifdef AF_CONFIG_OPTION_USE_WARPER
 #include "afwarp.h"
@@ -40,6 +43,10 @@
 #undef  FT_COMPONENT
 #define FT_COMPONENT  trace_aflatin
 
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+FT_Pos infinality_cur_width = 0;
+#endif
+
 
   /* needed for computation of round vs. flat segments */
 #define FLAT_THRESHOLD( x )  ( x / 14 )
@@ -1121,7 +1128,10 @@
     FT_Pos        delta;
     AF_LatinAxis  axis;
     FT_UInt       nn;
-
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+    FT_Bool adjust_heights         = FALSE;
+    if(ftinf) adjust_heights=ftinf->autohint_increase_glyph_heights;
+#endif /* FT_CONFIG_OPTION_INFINALITY_PATCHSET */
 
     if ( dim == AF_DIMENSION_HORZ )
     {
@@ -1149,7 +1159,7 @@
     {
       AF_LatinAxis  Axis = &metrics->axis[AF_DIMENSION_VERT];
       AF_LatinBlue  blue = NULL;
-
+      int threshold = 40;
 
       for ( nn = 0; nn < Axis->blue_count; nn++ )
       {
@@ -1159,7 +1169,12 @@
           break;
         }
       }
-
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+      if ( adjust_heights                                       &&
+           metrics->root.scaler.face->size->metrics.x_ppem < 15 &&
+           metrics->root.scaler.face->size->metrics.x_ppem > 5  )
+        threshold = 52;
+#endif /* FT_CONFIG_OPTION_INFINALITY_PATCHSET */
       if ( blue )
       {
         FT_Pos   scaled;
@@ -1315,7 +1330,13 @@
 
         /* a blue zone is only active if it is less than 3/4 pixels tall */
         dist = FT_MulFix( blue->ref.org - blue->shoot.org, scale );
+
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+        /* Do at low ppems ( ~< 200 ), in order to prevent fringes */
+        if ( dist <= 256 && dist >= -256 )
+#else
         if ( dist <= 48 && dist >= -48 )
+#endif /* FT_CONFIG_OPTION_INFINALITY_PATCHSET */
         {
 #if 0
           FT_Pos  delta1;
@@ -1366,7 +1387,12 @@
             delta2 = -delta2;
 
           blue->ref.fit   = FT_PIX_ROUND( blue->ref.cur );
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+          /* Round to prevent fringes */
+          blue->shoot.fit = FT_PIX_ROUND( blue->ref.fit - delta2 );
+#else
           blue->shoot.fit = blue->ref.fit - delta2;
+#endif /* FT_CONFIG_OPTION_INFINALITY_PATCHSET */
 
 #endif
 
@@ -2504,7 +2530,10 @@
               dist = edge->fpos - blue->shoot.org;
               if ( dist < 0 )
                 dist = -dist;
-
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+              /* round down to pixels */
+              /*dist = FT_MulFix( dist, scale ) & ~63;*/
+#endif
               dist = FT_MulFix( dist, scale );
               if ( dist < best_dist )
               {
@@ -2680,8 +2709,17 @@
     FT_Pos           dist     = width;
     FT_Int           sign     = 0;
     FT_Int           vertical = ( dim == AF_DIMENSION_VERT );
-
-
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+    FT_Int           infinality_dist = 0;
+    FT_UInt          autohint_snap_stem_height = 0;
+    if( ftinf ) autohint_snap_stem_height=ftinf->autohint_snap_stem_height;
+    if ( autohint_snap_stem_height > 100 )
+        autohint_snap_stem_height = 100;
+    else if ( autohint_snap_stem_height < 0 )
+        autohint_snap_stem_height = 0;
+
+    if ( autohint_snap_stem_height == 0 )
+#endif /* FT_CONFIG_OPTION_INFINALITY_PATCHSET */
     if ( !AF_LATIN_HINTS_DO_STEM_ADJUST( hints ) ||
          axis->extra_light                       )
       return width;
@@ -2691,9 +2729,76 @@
       dist = -width;
       sign = 1;
     }
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+    /* Calculate snap value differently than standard freetype */
+    if ( autohint_snap_stem_height > 0                              &&
+         ( ( vertical && !AF_LATIN_HINTS_DO_VERT_SNAP( hints ) )  ||
+           ( !vertical && !AF_LATIN_HINTS_DO_HORZ_SNAP( hints ) ) ) )
+    {
+      infinality_dist = af_latin_snap_width( axis->widths,
+                                             axis->width_count, dist );
+
+      if ( metrics->root.scaler.face->size->metrics.x_ppem > 9 &&
+           axis->width_count > 0                               &&
+           abs( axis->widths[0].cur - infinality_dist ) < 32   &&
+           axis->widths[0].cur > 52                            )
+      {
+          const char *style_name=metrics->root.scaler.face->style_name;
+          if ( style_name!=NULL &&
+               ( strstr( style_name, "Regular" )      ||
+                 strstr( style_name, "Book" )         ||
+                 strstr( style_name, "Medium" )       ||
+                 strcmp( style_name, "Italic" ) == 0  ||
+                 strcmp( style_name, "Oblique" ) == 0 )
+              )
+         {
+          /* regular weight */
+          if ( axis->widths[0].cur < 64 )
+            infinality_dist = 64;
+          else if ( axis->widths[0].cur  < 88 )
+            infinality_dist = 64;
+          else if ( axis->widths[0].cur  < 160 )
+            infinality_dist = 128;
+          else if ( axis->widths[0].cur  < 240 )
+            infinality_dist = 190;
+          else infinality_dist = ( infinality_dist ) & ~63;
+        }
+        else
+        {
+          /* bold gets a different threshold */
+          if ( axis->widths[0].cur < 64 )
+            infinality_dist = 64 ;
+          else if ( axis->widths[0].cur  < 108 )
+            infinality_dist = 64;
+          else if ( axis->widths[0].cur  < 160 )
+            infinality_dist = 128;
+          else if ( axis->widths[0].cur  < 222 )
+            infinality_dist = 190;
+          else if ( axis->widths[0].cur  < 288 )
+            infinality_dist = 254;
+          else infinality_dist = ( infinality_dist + 16 ) & ~63;
+        }
 
-    if ( (  vertical && !AF_LATIN_HINTS_DO_VERT_SNAP( hints ) ) ||
+      }
+      if ( infinality_dist < 52 )
+      {
+        if ( metrics->root.scaler.face->size->metrics.x_ppem < 9 )
+        {
+          if ( infinality_dist < 32 )
+            infinality_dist = 32;
+        }
+        else
+          infinality_dist = 64;
+      }
+    }
+    else if ( autohint_snap_stem_height < 100                            &&
+              ( ( vertical && !AF_LATIN_HINTS_DO_VERT_SNAP( hints ) )  ||
+                ( !vertical && !AF_LATIN_HINTS_DO_HORZ_SNAP( hints ) ) ) )
+#else
+
+    if ( ( vertical && !AF_LATIN_HINTS_DO_VERT_SNAP( hints ) ) ||
          ( !vertical && !AF_LATIN_HINTS_DO_HORZ_SNAP( hints ) ) )
+#endif /* FT_CONFIG_OPTION_INFINALITY_PATCHSET */
     {
       /* smooth hinting process: very lightly quantize the stem width */
 
@@ -2785,6 +2890,9 @@
       }
     }
     else
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+      if ( autohint_snap_stem_height < 100 )
+#endif /* FT_CONFIG_OPTION_INFINALITY_PATCHSET */
     {
       /* strong hinting process: snap the stem width to integer pixels */
 
@@ -2792,7 +2900,10 @@
 
 
       dist = af_latin_snap_width( axis->widths, axis->width_count, dist );
-
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+      if ( autohint_snap_stem_height > 0 )
+        goto Done_Width;
+#endif /* FT_CONFIG_OPTION_INFINALITY_PATCHSET */
       if ( vertical )
       {
         /* in the case of vertical hinting, always round */
@@ -2855,6 +2966,32 @@
     }
 
   Done_Width:
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+    if ( axis->widths[0].cur > 42 )
+      /* weighted average */
+      dist = (dist * ( 100 - autohint_snap_stem_height )
+                + infinality_dist * autohint_snap_stem_height ) / 100;
+
+      {
+        int factor = 100;
+        if ( axis->standard_width < 100 )
+          factor = axis->standard_width;
+
+        if ( metrics->root.scaler.face->size->metrics.x_ppem >= 9  && dist < 52 )
+          dist += ( (52 - dist) * factor ) / 100;
+        if ( metrics->root.scaler.face->size->metrics.x_ppem < 9  && dist < 32 )
+          dist += ( (32 - dist) * factor ) / 100;
+
+        if ( axis->standard_width > 100                             &&
+             metrics->root.scaler.face->size->metrics.x_ppem >= 11  &&
+             dist < 64                                              )
+          dist = 64;
+        if ( axis->standard_width > 100                           &&
+             metrics->root.scaler.face->size->metrics.x_ppem >= 9 &&
+             dist < 52                                            )
+          dist = 52;
+      }
+#endif /* FT_CONFIG_OPTION_INFINALITY_PATCHSET */
     if ( sign )
       dist = -dist;
 
@@ -2873,6 +3010,8 @@
     FT_Pos  dist, base_delta;
     FT_Pos  fitted_width;
 
+/* if fitted_width causes stem_edge->pos to land basically on top of an existing
+ * stem_edge->pos, then add or remove 64.  Need to figure out a way to do this */
 
     dist       = stem_edge->opos - base_edge->opos;
     base_delta = base_edge->pos - base_edge->opos;
@@ -3485,8 +3624,11 @@
     int       dim;
 
     AF_LatinAxis  axis;
-
-
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+    FT_Int    emboldening_strength = 0;
+    FT_Bool   use_various_tweaks = FALSE;
+    if( ftinf ) use_various_tweaks=ftinf->use_various_tweaks;
+#endif /* FT_CONFIG_OPTION_INFINALITY_PATCHSET */
     error = af_glyph_hints_reload( hints, outline );
     if ( error )
       goto Exit;
@@ -3556,7 +3698,11 @@
     }
 
     af_glyph_hints_save( hints, outline );
-
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+    {
+      infinality_cur_width = metrics->axis->widths[0].cur;
+    }
+#endif /* FT_CONFIG_OPTION_INFINALITY_PATCHSET */
   Exit:
     return error;
   }
diff --git src/autofit/aflatin.h src/autofit/aflatin.h
index d80e125..3ca779b 100644
--- src/autofit/aflatin.h
+++ src/autofit/aflatin.h
@@ -64,6 +64,9 @@ FT_BEGIN_HEADER
 
 #define AF_LATIN_MAX_WIDTHS  16
 
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+    extern FT_Pos infinality_cur_width;
+#endif
 
 #define AF_LATIN_BLUE_ACTIVE      ( 1U << 0 ) /* zone height is <= 3/4px   */
 #define AF_LATIN_BLUE_TOP         ( 1U << 1 ) /* we have a top blue zone   */
diff --git src/autofit/afmodule.c src/autofit/afmodule.c
index 9d7ba22..abe2367 100644
--- src/autofit/afmodule.c
+++ src/autofit/afmodule.c
@@ -22,6 +22,10 @@
 #include "aferrors.h"
 #include "afpic.h"
 
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+#include "../base/ftinf.h"
+#endif
+
 #ifdef FT_DEBUG_AUTOFIT
 
 #ifndef FT_MAKE_OPTION_SINGLE_OBJECT
@@ -477,6 +481,9 @@
     module->warping           = 0;
 #endif
     module->no_stem_darkening = TRUE;
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+    if(ftinf) module->no_stem_darkening = !ftinf->stem_darkening_autofit;
+#endif /* FT_CONFIG_OPTION_INFINALITY_PATCHSET */
 
     module->darken_params[0]  = CFF_CONFIG_OPTION_DARKENING_PARAMETER_X1;
     module->darken_params[1]  = CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y1;
diff --git src/base/Jamfile src/base/Jamfile
index 9e9a91b..5217651 100644
--- src/base/Jamfile
+++ src/base/Jamfile
@@ -56,6 +56,7 @@ SubDir  FT2_TOP $(FT2_SRC_DIR) base ;
                     ftglyph
                     ftgxval
                     ftinit
+                    ftinf
                     ftlcdfil
                     ftmm
                     ftotval
diff --git src/base/ftbase.c src/base/ftbase.c
index 55f7359..4d50dca 100644
--- src/base/ftbase.c
+++ src/base/ftbase.c
@@ -34,6 +34,9 @@
 #include "ftstream.c"
 #include "fttrigon.c"
 #include "ftutil.c"
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+#include "ftinf.c"
+#endif
 
 
 /* END */
diff --git src/base/ftinf.c src/base/ftinf.c
new file mode 100644
index 0000000..5d6b7f6
--- /dev/null
+++ src/base/ftinf.c
@@ -0,0 +1,363 @@
+#include <stdlib.h>
+#include "ftinf.h"
+#define true  1
+#define false 0
+
+#define on  1
+#define off 0
+#define end (-128)
+
+#define sw2pv 18  /* STEM_WIDTH_2_PPEM */
+#define maxp 100  /* MAX_PPEM */
+
+typedef signed char pv;         /* ppm and values type */
+/* the arrays start with existence flag + values */
+typedef struct sa_rules_s {
+    const char *name;
+    pv always_use_100[1+4+1];
+    pv brightness[1+2+1];
+    pv contrast[1+2+1];
+    pv edge_detection[1+4+1];
+    pv m[1+4+1];
+    pv bearing_correction[1+2+1];
+    pv spacing[1+5+1];
+    pv start[1+5+1];
+    pv stem_scaling[1+6+1];
+    pv stem_translating[1+2+1];
+    pv stem_translating_only[1+10+1];
+    pv stem_widths[1+4];        /* these end with maxp */
+    pv synthesize_stems[1+2+1];
+} sa_rules_t;
+
+#pragma GCC diagnostic ignored "-Wpedantic" /* C99 struct initializer tags are needed */
+#pragma GCC diagnostic ignored "-Wunused-function"
+
+const ftinf_t *ftinf;
+/* final settings, updated from environment */
+ftinf_t _env;
+
+/* rules and hashing function */
+#include "ftinf_rh.c"
+
+/* rules selection */
+void ftinf_fill_stem_values( Stem_Data *stem_values,
+                             const char *family, int ppem, int use_known ){
+    /* set the defaults */
+    stem_values->bearing_correction = TRUE;
+    stem_values->brightness = 0.0;
+    stem_values->contrast = 0.0;
+    stem_values->edge_detection = FALSE;
+    stem_values->m = -1;
+    stem_values->stem_scaling = -1;
+    stem_values->stem_spacing = -1;
+    stem_values->stem_start = -1;
+    stem_values->stem_translating = 0;
+    stem_values->stem_translating_only = -1024;
+    stem_values->stem_width = -1;
+    stem_values->synth_stems = FALSE;
+    stem_values->use_100 = FALSE;
+    /* pick from known rules if requested and they exist for current family */
+    if( !use_known )
+        return;
+    else {
+        const sa_rules_t *r=ftinf_rules( family );
+        int i;
+        if( r==NULL ) return;
+        if( r->stem_widths[0]==on )
+            for( i=1; r->stem_widths[i]!=maxp; ++i )
+                if( ppem < r->stem_widths[i] ){
+                    stem_values->stem_width = i-1;
+                    break;
+                }
+
+        if( r->stem_scaling[0]==on )
+            for( i=1; r->stem_scaling[i]!=end; i+=2 )
+                if( ppem==r->stem_scaling[i] ){
+                    stem_values->stem_scaling = r->stem_scaling[i+1];
+                    break;
+                }
+
+        if( r->m[0]==on )
+            for( i=1; r->m[i]!=end; i+=2 )
+                if( ppem==r->m[i] ){
+                    stem_values->m = r->m[i+1];
+                    break;
+                }
+
+        if( r->stem_translating_only[0]==on )
+            for( i=1; r->stem_translating_only[i]!=end; i+=2 )
+                if( ppem==r->stem_translating_only[i] || r->stem_translating_only[i]==0 ){
+                    stem_values->stem_translating_only = r->stem_translating_only[i+1];
+                    break;
+                }
+
+        if( r->stem_translating[0]==on )
+            for( i=1; r->stem_translating[i]!=end; i+=2 )
+                if( ppem==r->stem_translating[i] || r->stem_translating[i]==0 ){
+                    stem_values->stem_translating = r->stem_translating[i+1];
+                    break;
+                }
+
+        if( r->always_use_100[0]==on )
+            for( i=1; r->always_use_100[i]!=end; i+=2 )
+                if( ppem>=r->always_use_100[i] && ppem<=r->always_use_100[i+1] ){
+                    stem_values->use_100 = TRUE;
+                    break;
+                }
+
+        if( r->synthesize_stems[0]==on )
+            for( i=1; r->synthesize_stems[i]!=end; i+=2 )
+                if( ppem>=r->synthesize_stems[i] && ppem<=r->synthesize_stems[i+1] ){
+                    stem_values->synth_stems = TRUE;
+                    break;
+                }
+
+        if( r->edge_detection[0]==on )
+            for( i=1; r->edge_detection[i]!=end; i+=2 )
+                if( ppem>=r->edge_detection[i] && ppem<=r->edge_detection[i+1] ){
+                    stem_values->edge_detection = TRUE;
+                    break;
+                }
+
+        if( r->bearing_correction[0]==on )
+            for( i=1; r->bearing_correction[i]!=end; i+=2 )
+                if( ppem>=r->bearing_correction[i] && ppem<=r->bearing_correction[i+1] ){
+                    stem_values->bearing_correction = FALSE;
+                    break;
+                }
+
+#if(0)
+        if( r->brightness[0]==on )
+            for( i=1; r->brightness[i]!=end; i+=2 )
+                if( ppem==r->brightness[i]||r->brightness[i]==0 ){
+                    stem_values->brightness=r->brightness[i+1]*(1.0f/300.0f);
+                    break;
+                }
+
+        if( r->contrast[0]==on )
+            for( i=1; r->contrast[i]!=end; i+=2 )
+                if( ppem==r->contrast[i]||r->contrast[i]==0 ){
+                    stem_values->contrast=r->contrast[i+1]*(1.0f/300.0f);
+                    break;
+                }
+        if( r->spacing[0]==on ){
+            /* not used by original code */
+        }
+        if( r->start[0]==on ){
+            /* not used by original code */
+        }
+#endif
+    }
+    return;
+}
+
+void ftinf_get_bc( const char *family, int ppem, float *brightness, float *contrast ){
+    const sa_rules_t *r=ftinf_rules( family );
+    *brightness=0;
+    *contrast=0;
+    if( r ){
+        int i;
+        if( r->brightness[0]==on )
+            for( i=1; r->brightness[i]!=end; i+=2 )
+                if( ppem==r->brightness[i]||r->brightness[i]==0 ){
+                    *brightness=r->brightness[i+1]*(1.0f/300.0f);
+                    break;
+                }
+
+        if( r->contrast[0]==on )
+            for( i=1; r->contrast[i]!=end; i+=2 )
+                if( ppem==r->contrast[i]||r->contrast[i]==0 ){
+                    *contrast=r->contrast[i+1]*(1.0f/300.0f);
+                    break;
+                }
+    }
+    return;
+}
+
+static int
+bool_val( const char *s ){
+    if ( s != NULL )
+        return strcasecmp(s, "true") == 0
+            || strcasecmp(s, "1") == 0
+            || strcasecmp(s, "on") == 0
+            || strcasecmp(s, "yes") ==0;
+    else
+        return 0;
+}
+
+static int
+int_val( const char *s, int min, int max ){
+    int val;
+    sscanf ( s, "%d", &val );
+    if ( val > max )
+        val = max;
+    else if ( val < min )
+        val = min;
+    return val;
+}
+
+/* settings and hashing function */
+#include "ftinf_sh.c"
+
+/*
+  Get active Infinality settings
+ */
+void ftinf_env(){
+    const char *s;
+    ftinf=ftinf_settings( getenv( "INFINALITY_FT" ) );
+
+    if( ftinf==NULL ){
+        ftinf=ftinf_settings( "ultimate3" );
+        /* this should always succeed */
+#if(0)
+        if( ftinf==NULL ){
+            /* put an error here */
+            exit(-1);
+        }
+#endif
+    }
+    _env=ftinf[0];      /* copy as defaults */
+
+    /* check if custom environment values are set and update with them */
+    s=getenv( "INFINALITY_FT_AUTOHINT_INCREASE_GLYPH_HEIGHTS" );
+    if( s ) _env.autohint_increase_glyph_heights=bool_val( s );
+    s=getenv( "INFINALITY_FT_AUTOHINT_SNAP_STEM_HEIGHT" );
+    if( s ) _env.autohint_snap_stem_height=int_val( s, 0, 100 );
+    s=getenv( "INFINALITY_FT_USE_VARIOUS_TWEAKS" );
+    if( s ) _env.use_various_tweaks=bool_val( s );
+    s=getenv( "INFINALITY_FT_USE_KNOWN_SETTINGS_ON_SELECTED_FONTS" );
+    if( s ) _env.use_known_settings_on_selected_fonts=bool_val(s);
+#if(0)                          /* not used (naming error also) */
+    s=getenv( "INFINALITY_FT_AUTOHINT_MINIMUM_STEM_WIDTH" );
+    if( s ) _env.autohint_minimum_stem_height=int_val( s, 0, 100 );
+#endif
+    s=getenv( "INFINALITY_FT_STEM_SNAPPING_SLIDING_SCALE" );
+    if( s ) sscanf( s, "%d", &_env.stem_snapping_sliding_scale );
+    s=getenv( "INFINALITY_FT_STEM_ALIGNMENT_STRENGTH" );
+    if( s ) sscanf( s, "%d", &_env.stem_alignment_strength );
+    s=getenv( "INFINALITY_FT_STEM_DARKENING_AUTOFIT" );
+    if( s ) _env.stem_darkening_autofit=bool_val( s );
+    s=getenv( "INFINALITY_FT_STEM_DARKENING_CFF" );
+    if( s ) _env.stem_darkening_cff=bool_val( s );
+    s=getenv( "INFINALITY_FT_STEM_FITTING_STRENGTH" );
+    if( s ) sscanf( s, "%d", &_env.stem_fitting_strength );
+    s=getenv( "INFINALITY_FT_CHROMEOS_STYLE_SHARPENING_STRENGTH" );
+    if( s ) _env.chromeos_style_sharpening_strength=int_val( s, 0, 100 );
+    s=getenv( "INFINALITY_FT_BRIGHTNESS" );
+    if( s ) sscanf( s, "%d", &_env.brightness );
+    s=getenv( "INFINALITY_FT_CONTRAST" );
+    if( s ) sscanf( s, "%d", &_env.contrast );
+    s=getenv( "INFINALITY_FT_WINDOWS_STYLE_SHARPENING_STRENGTH" );
+    if( s ) _env.windows_style_sharpening_strength=int_val( s, 0, 100 );
+    s=getenv( "INFINALITY_FT_GAMMA_CORRECTION" );
+    if( s ){
+        float *f=_env.gamma_correction;
+        sscanf ( s, "%f %f", &f[0], &f[1] );
+        if( f[1] < 1.0f ) f[1]=1.0f;
+    }
+    s=getenv( "INFINALITY_FT_FRINGE_FILTER_STRENGTH" );
+    if( s ) sscanf( s, "%d", &_env.fringe_filter_strength );
+    s=getenv( "INFINALITY_FT_GRAYSCALE_FILTER_STRENGTH" );
+    if( s ) sscanf( s, "%d", &_env.grayscale_filter_strength );
+    s=getenv( "INFINALITY_FT_AUTOHINT_HORIZONTAL_STEM_DARKEN_STRENGTH" );
+    if( s ) sscanf( s, "%d", &_env.autohint_horizontal_stem_darken_strength );
+    s=getenv( "INFINALITY_FT_AUTOHINT_VERTICAL_STEM_DARKEN_STRENGTH" );
+    if( s ) sscanf( s, "%d", &_env.autohint_vertical_stem_darken_strength );
+    s=getenv( "INFINALITY_FT_GLOBAL_EMBOLDEN_X_VALUE" );
+    if( s ) sscanf( s, "%d", &_env.global_embolden_x_value );
+    s=getenv( "INFINALITY_FT_GLOBAL_EMBOLDEN_Y_VALUE" );
+    if( s ) sscanf( s, "%d", &_env.global_embolden_y_value );
+    s=getenv( "INFINALITY_FT_BOLD_EMBOLDEN_X_VALUE" );
+    if( s ) sscanf( s, "%d", &_env.bold_embolden_x_value );
+    s=getenv( "INFINALITY_FT_BOLD_EMBOLDEN_Y_VALUE" );
+    if( s ) sscanf( s, "%d", &_env.bold_embolden_y_value );
+    s=getenv( "INFINALITY_FT_FILTER_PARAMS" );
+    if( s ) {
+        int *f=_env.filter_params;
+        if( sscanf( s, "%d %d %d %d %d", f+1, f+2, f+3, f+4, f+5 )==5 )
+            f[0]=on;
+        else
+            f[0]=off;           /* FIXME: put a warning? */
+    }
+    /* do the range verifications as in original code */
+    if ( _env.stem_snapping_sliding_scale > maxp )
+        _env.stem_snapping_sliding_scale = 0;
+    else if ( _env.stem_snapping_sliding_scale < 0 )
+        _env.stem_snapping_sliding_scale = 0;
+    if (_env.stem_snapping_sliding_scale < 11 &&
+        _env.stem_snapping_sliding_scale > 0  )
+        _env.stem_snapping_sliding_scale = 11;
+
+    if ( _env.stem_alignment_strength > 100 )
+        _env.stem_alignment_strength = 100;
+    else if ( _env.stem_alignment_strength < 0 )
+        _env.stem_alignment_strength = 0;
+
+    if ( _env.stem_fitting_strength > 100 )
+        _env.stem_fitting_strength = 100;
+    else if ( _env.stem_fitting_strength < 0 )
+        _env.stem_fitting_strength = 0;
+
+    if ( _env.chromeos_style_sharpening_strength > 100 )
+        _env.chromeos_style_sharpening_strength = 100;
+    else if ( _env.chromeos_style_sharpening_strength < 0 )
+        _env.chromeos_style_sharpening_strength = 0;
+
+    if ( _env.brightness > 100 )
+        _env.brightness = 100;
+    else if ( _env.brightness < -100 )
+        _env.brightness = 0;
+
+    if ( _env.contrast > 100 )
+        _env.contrast = 100;
+    else if ( _env.contrast < -100 )
+        _env.contrast = 0;
+
+    if ( _env.windows_style_sharpening_strength > 100 )
+        _env.windows_style_sharpening_strength = 100;
+    else if ( _env.windows_style_sharpening_strength < 0 )
+        _env.windows_style_sharpening_strength = 0;
+
+    if ( _env.fringe_filter_strength > 100 )
+        _env.fringe_filter_strength = 100;
+    else if ( _env.fringe_filter_strength < 0 )
+        _env.fringe_filter_strength = 0;
+
+    if ( _env.grayscale_filter_strength > 100 )
+        _env.grayscale_filter_strength = 100;
+    else if ( _env.grayscale_filter_strength < 0 )
+        _env.grayscale_filter_strength = 0;
+
+    if ( _env.autohint_horizontal_stem_darken_strength > 100 )
+        _env.autohint_horizontal_stem_darken_strength = 100;
+    else if ( _env.autohint_horizontal_stem_darken_strength < 0 )
+        _env.autohint_horizontal_stem_darken_strength = 0;
+
+    if ( _env.autohint_vertical_stem_darken_strength > 100 )
+        _env.autohint_vertical_stem_darken_strength = 100;
+    else if ( _env.autohint_horizontal_stem_darken_strength < 0 )
+        _env.autohint_vertical_stem_darken_strength = 0;
+
+    if ( _env.global_embolden_x_value > 128 )
+        _env.global_embolden_x_value = 128;
+    else if ( _env.global_embolden_x_value < -128 )
+        _env.global_embolden_x_value = -128;
+
+    if ( _env.global_embolden_y_value > 128 )
+        _env.global_embolden_y_value = 128;
+    else if ( _env.global_embolden_y_value < -128 )
+          _env.global_embolden_y_value = -128;
+
+    if ( _env.bold_embolden_x_value > 128 )
+        _env.bold_embolden_x_value = 128;
+    else if (_env.bold_embolden_x_value < -128 )
+        _env.bold_embolden_x_value = -128;
+
+    if ( _env.bold_embolden_y_value > 128 )
+        _env.bold_embolden_y_value = 128;
+    else if ( _env.bold_embolden_y_value < -128 )
+        _env.bold_embolden_y_value = -128;
+
+    /* point to the combined and checked settings */
+    ftinf=&_env;
+}
diff --git src/base/ftinf.h src/base/ftinf.h
new file mode 100644
index 0000000..fbe1bd1
--- /dev/null
+++ src/base/ftinf.h
@@ -0,0 +1,66 @@
+#ifndef _FTINF_H_
+#define _FTINF_H_
+/*
+    Stem snapping rules
+    (base freetype typedefs assumed already included)
+ */
+typedef struct
+{
+    FT_Int       stem_width;
+    FT_Int       stem_spacing;
+    FT_Int       stem_start;
+    FT_Int       stem_scaling;
+    FT_Int       stem_translating_only;
+    FT_Int       stem_translating;
+    float        brightness;
+    float        contrast;
+    FT_Bool      use_100;
+    FT_Bool      synth_stems;
+    FT_Bool      edge_detection;
+    FT_Bool      bearing_correction;
+    FT_Int       m;
+} Stem_Data;
+
+/*
+  Infinality settings
+ */
+typedef struct ftinf_s {
+    const char *name;
+    int autohint_horizontal_stem_darken_strength;
+    int autohint_snap_stem_height;
+    int autohint_increase_glyph_heights;
+    int autohint_vertical_stem_darken_strength;
+    int bold_embolden_x_value;
+    int bold_embolden_y_value;
+    int brightness;
+    int chromeos_style_sharpening_strength;
+    int contrast;
+    int filter_params[6];       /* 1st one used as existence flag */
+    int fringe_filter_strength;
+    float gamma_correction[2];
+    int global_embolden_x_value;
+    int global_embolden_y_value;
+    int grayscale_filter_strength;
+    int stem_alignment_strength;
+    int stem_darkening_autofit;
+    int stem_darkening_cff;
+    int stem_fitting_strength;
+    int stem_snapping_sliding_scale;
+    int use_known_settings_on_selected_fonts;
+    int use_various_tweaks;
+    int windows_style_sharpening_strength;
+} ftinf_t;
+
+extern FT_Pos infinality_cur_width; /* defined in aflatin.c */
+
+extern const ftinf_t *ftinf;    /* active settings */
+
+extern void ftinf_fill_stem_values( Stem_Data *stem_values,
+                                    const char *family, int ppem, int use_known );
+extern void ftinf_get_bc( const char *family, int ppem,
+                          float *brightness, float *contrast );
+
+/* get values from environment (FIXME: maybe update with using user files) */
+extern void ftinf_env();
+
+#endif
diff --git src/base/ftinf_rh.c src/base/ftinf_rh.c
new file mode 100644
index 0000000..606b567
--- /dev/null
+++ src/base/ftinf_rh.c
@@ -0,0 +1,626 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: gperf --output-file=ftinf_rh.c ftinf_rh.gperf  */
+/* Computed positions: -k'1,$' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
+#endif
+
+#line 9 "ftinf_rh.gperf"
+
+#include <ctype.h>
+static const struct sa_rules_s* _rules_get( const char*str, unsigned len );
+/* maximum key range = 82, duplicates = 0 */
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+_rules_hash (register const char *str, register unsigned int len)
+{
+  static const unsigned char asso_values[] =
+    {
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85,  0, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85,  5, 45,  5,
+      35, 25, 35, 35, 50, 45, 85, 85,  0, 25,
+      40,  5,  0, 85, 50, 20, 20,  0, 10, 10,
+      85, 10, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85
+    };
+  return len + asso_values[(unsigned char)str[len - 1]] + asso_values[(unsigned char)str[0]];
+}
+
+#ifdef __GNUC__
+__inline
+#if defined __GNUC_STDC_INLINE__ || defined __GNUC_GNU_INLINE__
+__attribute__ ((__gnu_inline__))
+#endif
+#endif
+const struct sa_rules_s *
+_rules_get (register const char *str, register unsigned int len)
+{
+  enum
+    {
+      TOTAL_KEYWORDS = 58,
+      MIN_WORD_LENGTH = 3,
+      MAX_WORD_LENGTH = 24,
+      MIN_HASH_VALUE = 3,
+      MAX_HASH_VALUE = 84
+    };
+
+  static const struct sa_rules_s wordlist[] =
+    {
+#line 15 "ftinf_rh.gperf"
+{   .name="---",
+    .synthesize_stems={on, 13, 13, end}
+},
+#line 253 "ftinf_rh.gperf"
+{   .name="ubuntu",
+    .always_use_100={on, 12, 13, 15, 15, end}
+},
+#line 31 "ftinf_rh.gperf"
+{   .name="arial",
+    .always_use_100={on, 0, maxp, end},
+    .edge_detection={on, 11, 11, 13, 13, end},
+    .spacing={on, 10, 11, 23, 25, 30, end},
+    .start={on, 11, 18, 23, 30, 30, end},
+    .stem_translating={on, 11, 32, end},
+    .stem_translating_only={on, 10, 16, 8, 32, 9, 32, 16, -24, end}
+},
+#line 87 "ftinf_rh.gperf"
+{   .name="corbel",
+    .stem_translating_only={on, 10, 16, end},
+    .stem_widths={on, 10, 21, maxp}
+},
+#line 71 "ftinf_rh.gperf"
+{   .name="canwell",
+    .stem_scaling={on, 13, 0, end}
+},
+#line 216 "ftinf_rh.gperf"
+{   .name="pragmata",
+    .always_use_100={on, 0, maxp, end}
+},
+#line 67 "ftinf_rh.gperf"
+{   .name="cantarell",
+    .stem_translating_only={on, 11, 0, 12, 0, end},
+    .stem_widths={on, 10, 22, maxp,}
+},
+#line 39 "ftinf_rh.gperf"
+{   .name="arimo",
+    .always_use_100={on, 0, maxp, end},
+    .stem_translating={on, 11, 32, end},
+    .stem_translating_only={on, 10, 8, 8, 32, 9, 32, end}
+},
+#line 207 "ftinf_rh.gperf"
+{   .name="optima",
+    .brightness={on, 0, -20, end},
+    .contrast={on, 0, 25, end},
+    .stem_scaling={on, 17, 1, end},
+    .stem_translating_only={on, 10, 0, 11, 0, 12, 0, end}
+},
+#line 63 "ftinf_rh.gperf"
+{   .name="candara",
+    .stem_scaling={on, 14, 1, 17, 1, end},
+    .stem_translating_only={on, 10, 16, end}
+},
+#line 77 "ftinf_rh.gperf"
+{   .name="comfortaa",
+    .stem_widths={on, 10, 19, 22, maxp},
+    .stem_scaling={on, 11, 0, end}
+},
+#line 161 "ftinf_rh.gperf"
+{   .name="liberation mono",
+    .always_use_100={on, 0, maxp, end}
+},
+#line 18 "ftinf_rh.gperf"
+{   .name="andale mono",
+    .always_use_100={on, 0, maxp, end},
+    .stem_scaling={on, 11, 1, end},
+    .stem_widths={on, 10, 21, maxp,}
+},
+#line 256 "ftinf_rh.gperf"
+{   .name="verdana",
+    .always_use_100={on, 0, 14, 16, maxp, end},
+    .stem_scaling={on, 12, 1, 15, 1, end},
+    .stem_translating_only={on, 8, 16, 15, 16, 14, 32, 18, 32, 19, 24, end}
+},
+#line 74 "ftinf_rh.gperf"
+{   .name="century gothic",
+    .stem_widths={on, 10, 22, maxp,}
+},
+#line 91 "ftinf_rh.gperf"
+{   .name="courier new",
+    .always_use_100={on, 12, 12, end},
+    .edge_detection={on, 10, 12, end},
+    .m={on, 13, 1, 14, 1, end}
+},
+#line 23 "ftinf_rh.gperf"
+{   .name="arial narrow",
+    .stem_widths={on, 10, 21, maxp,}
+},
+#line 185 "ftinf_rh.gperf"
+{   .name="luxi sans",
+    .always_use_100={on, 13, 13, end},
+    .stem_widths={on, 10, 17, sw2pv, maxp,}
+},
+#line 225 "ftinf_rh.gperf"
+{   .name="samba",
+    .stem_scaling={on, 11, 0, end}
+},
+#line 233 "ftinf_rh.gperf"
+{   .name="tahoma",
+    .always_use_100={on, 11, 11, 14, maxp, end},
+    .edge_detection={on, 11, 11, end},
+    .spacing={on, 10, 12, 18, 18, 30, end},
+    .start={on, 14, 17, 30, 100, 100, end},
+    .stem_translating={on, 11, 32, end},
+    .stem_translating_only={on, 7, 32, 8, 32, 9, 32, end},
+},
+#line 164 "ftinf_rh.gperf"
+{   .name="liberation sans narrow",
+    .stem_widths={on,10, 22, maxp,}
+},
+#line 81 "ftinf_rh.gperf"
+{   .name="consolas",
+    .always_use_100={on, 0, maxp, end},
+    .stem_translating_only={on, 8, 32, 9, 32, end},
+    .stem_widths={on, 10, 20, maxp,},
+    .stem_scaling={on, 11, 1, end}
+},
+#line 203 "ftinf_rh.gperf"
+{   .name="open sans",
+    .stem_translating_only={on, 10, 16, 9, 16, end},
+    .stem_widths={on, 10, 20, maxp,}
+},
+#line 167 "ftinf_rh.gperf"
+{   .name="liberation sans",
+    .edge_detection={on, 11, 11, end},
+    .stem_translating={on, 11, 32, end},
+    .stem_translating_only={on, 10, 8, 8, 32, 9, 32, end},
+    .stem_widths={on,10, 19, maxp,}
+},
+#line 193 "ftinf_rh.gperf"
+{   .name="monaco",
+    .always_use_100={on, 0, maxp, end}
+},
+#line 101 "ftinf_rh.gperf"
+{   .name="cousine",
+    .always_use_100={on, 0, maxp, end}
+},
+#line 176 "ftinf_rh.gperf"
+{   .name="lucida grande",
+    .stem_scaling={on, 13, 1, end},
+    .stem_translating_only={on, 13, 24, 14, 24, 8, 16, 9, 16, end},
+    .stem_widths={on, 10, 16, sw2pv, maxp},
+},
+#line 173 "ftinf_rh.gperf"
+{   .name="lucida console",
+    .always_use_100={on, 0, maxp, end}
+},
+#line 196 "ftinf_rh.gperf"
+{   .name="myriad pro",
+    .stem_scaling={on, 14, 1, 17, 1, end},
+    .stem_translating_only={on, 10, 16, 11, 0, 9, 16, end}
+},
+#line 26 "ftinf_rh.gperf"
+{   .name="arial unicode ms",
+    .always_use_100={on, 0, maxp, end},
+    .stem_translating={on, 11, 32, end},
+    .stem_translating_only={on, 10, 16, 8, 32, 9, 32, end}
+},
+#line 213 "ftinf_rh.gperf"
+{   .name="palatino linotype",
+    .edge_detection={on, 0, 100, end}
+},
+#line 181 "ftinf_rh.gperf"
+{   .name="lucida sans unicode",
+    .stem_translating_only={on, 13, 24, 14, 24, 8, 16, 9, 16, end},
+    .stem_widths={on,10, 16, sw2pv, maxp,}
+},
+#line 140 "ftinf_rh.gperf"
+{   .name="futura",
+    .stem_widths={on, 10, 14, sw2pv, maxp,}
+},
+#line 147 "ftinf_rh.gperf"
+{   .name="georgia",
+    .stem_translating_only={on, 13, 16, 14, 16, 15, 0, end}
+},
+#line 125 "ftinf_rh.gperf"
+{   .name="freemono",
+    .always_use_100={on, 0, maxp, end}
+},
+#line 200 "ftinf_rh.gperf"
+{   .name="nina",
+    .stem_scaling={on, 11, 0, 12, 0, 13, 0, end}
+},
+#line 121 "ftinf_rh.gperf"
+{   .name="essential pragmatapro",
+    .always_use_100={on, 0, maxp, end},
+    .m={on, 13, 0, 14, 0, end}
+},
+#line 247 "ftinf_rh.gperf"
+{   .name="trebuchet ms",
+    .always_use_100={on, 13, 13, end},
+    .stem_scaling={on, 13, 0, 17, 0, 20, 1, end},
+    .stem_translating_only={on, 10, 16, 11, 0, 8, 32, 9, 32, end},
+    .stem_widths={on, 10, 17, sw2pv, maxp,}
+},
+#line 114 "ftinf_rh.gperf"
+{   .name="droid sans mono",
+    .m={on, 12, 0, end}
+},
+#line 104 "ftinf_rh.gperf"
+{   .name="dejavu sans mono",
+    .always_use_100={on, 0, maxp, end},
+    .stem_translating_only={on, 7, 16, 8, 32, 9, 16, end}
+},
+#line 57 "ftinf_rh.gperf"
+{   .name="calibri",
+    .always_use_100={on, 23, maxp, end},
+    .stem_scaling={on, 15, 1, 17, 1, 18, 1, end},
+    .stem_translating_only={on, 10, 16, 15, 0, end},
+    .stem_widths={on, 1, 10, 19, maxp,}
+},
+#line 156 "ftinf_rh.gperf"
+{   .name="inconsolata",
+    .stem_scaling={on, 12, 1, 15, 1, end},
+    .stem_translating_only={on, 10, 24, 9, 32, end},
+    .stem_widths={on, 10, 23, maxp,},
+},
+#line 96 "ftinf_rh.gperf"
+{   .name="courier",
+    .always_use_100={on, 0, maxp, end},
+    .m={on, 13, 1, 14, 1, end},
+    .stem_translating_only={on, 13, 16, 15, 0, end}
+},
+#line 128 "ftinf_rh.gperf"
+{   .name="freesans",
+    .always_use_100={on, 0, maxp, end},
+    .edge_detection={on, 11, 11, 13, 13, end},
+    .spacing={on, 10, 12, 18, 18, 30, end},
+    .start={on, 10, 18, 18, 25, 30, end},
+    .stem_scaling={on, 16, 0, end},
+    .stem_translating={on, 11, 32, end},
+    .stem_translating_only={on, 10, 16, 9, 8, end}
+},
+#line 150 "ftinf_rh.gperf"
+{   .name="gill sans",
+    .stem_widths={on, 10, 17, sw2pv, maxp,}
+},
+#line 117 "ftinf_rh.gperf"
+{   .name="droid sans",
+    .always_use_100={on, 12, 12, 15, 15, end},
+    .stem_translating_only={on, 8, 16, 9, 16, end}
+},
+#line 108 "ftinf_rh.gperf"
+{   .name="dejavu sans",
+    .always_use_100={on, 10, 14, 16, 17, end},
+    .m={on, 12, 0, end},
+    .stem_scaling={on, 12, 1, end},
+    .stem_translating_only={on, 8, 16, 15, -20, end}
+},
+#line 219 "ftinf_rh.gperf"
+{   .name="raleway",
+    .stem_scaling={on, 15, 0, end}
+},
+#line 153 "ftinf_rh.gperf"
+{   .name="helvetica cy",
+    .stem_widths={on, 10, 23, maxp,}
+},
+#line 228 "ftinf_rh.gperf"
+{   .name="segoe ui",
+    .always_use_100={on, 11, 12, 14, 14, end},
+    .stem_translating_only={on, 10, 0, 7, 32, 8, 16, 9, 24, end},
+    .stem_widths={on, 10, 23, maxp,}
+},
+#line 48 "ftinf_rh.gperf"
+{   .name="bitstream vera sans mono",
+    .always_use_100={on, 0, maxp, end}
+},
+#line 241 "ftinf_rh.gperf"
+{   .name="times new roman",
+    .always_use_100={on, 14, 14, 16, 16, end},
+    .bearing_correction={0, 100, end},
+    .stem_scaling={on, 17, 1, end},
+    .stem_translating_only={on, 17, 8, end}
+},
+#line 222 "ftinf_rh.gperf"
+{   .name="rokkitt",
+    .stem_widths={on, 10, 21, maxp,}
+},
+#line 143 "ftinf_rh.gperf"
+{   .name="garamond",
+    .brightness={on, 0, -20, end},
+    .contrast={on, 0, 25, end}
+},
+#line 137 "ftinf_rh.gperf"
+{   .name="freeserif",
+    .stem_scaling={on, 13, 1, 17, 1, end}
+},
+#line 189 "ftinf_rh.gperf"
+{   .name="microsoft sans serif",
+    .always_use_100={on, 0, maxp, end},
+    .stem_translating_only={on, 10, 16, 8, 32, 9, 32, end}
+},
+#line 44 "ftinf_rh.gperf"
+{   .name="baskerville",
+    .brightness={on, 0, -20, end},
+    .contrast={on, 0, 25, end}
+},
+#line 51 "ftinf_rh.gperf"
+{   .name="bitstream vera sans",
+    .always_use_100={on, 10, 14, 16, 17, end},
+    .m={on, 12, 0, end},
+    .stem_scaling={on ,12, 1, end},
+    .stem_translating_only={on, 8, 16, end}
+}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register int key = _rules_hash (str, len);
+
+      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
+        {
+          register const struct sa_rules_s *resword;
+
+          switch (key - 3)
+            {
+              case 0:
+                resword = &wordlist[0];
+                goto compare;
+              case 3:
+                resword = &wordlist[1];
+                goto compare;
+              case 7:
+                resword = &wordlist[2];
+                goto compare;
+              case 8:
+                resword = &wordlist[3];
+                goto compare;
+              case 9:
+                resword = &wordlist[4];
+                goto compare;
+              case 10:
+                resword = &wordlist[5];
+                goto compare;
+              case 11:
+                resword = &wordlist[6];
+                goto compare;
+              case 12:
+                resword = &wordlist[7];
+                goto compare;
+              case 13:
+                resword = &wordlist[8];
+                goto compare;
+              case 14:
+                resword = &wordlist[9];
+                goto compare;
+              case 16:
+                resword = &wordlist[10];
+                goto compare;
+              case 17:
+                resword = &wordlist[11];
+                goto compare;
+              case 18:
+                resword = &wordlist[12];
+                goto compare;
+              case 19:
+                resword = &wordlist[13];
+                goto compare;
+              case 21:
+                resword = &wordlist[14];
+                goto compare;
+              case 23:
+                resword = &wordlist[15];
+                goto compare;
+              case 24:
+                resword = &wordlist[16];
+                goto compare;
+              case 26:
+                resword = &wordlist[17];
+                goto compare;
+              case 27:
+                resword = &wordlist[18];
+                goto compare;
+              case 28:
+                resword = &wordlist[19];
+                goto compare;
+              case 29:
+                resword = &wordlist[20];
+                goto compare;
+              case 30:
+                resword = &wordlist[21];
+                goto compare;
+              case 31:
+                resword = &wordlist[22];
+                goto compare;
+              case 32:
+                resword = &wordlist[23];
+                goto compare;
+              case 33:
+                resword = &wordlist[24];
+                goto compare;
+              case 34:
+                resword = &wordlist[25];
+                goto compare;
+              case 35:
+                resword = &wordlist[26];
+                goto compare;
+              case 36:
+                resword = &wordlist[27];
+                goto compare;
+              case 37:
+                resword = &wordlist[28];
+                goto compare;
+              case 38:
+                resword = &wordlist[29];
+                goto compare;
+              case 39:
+                resword = &wordlist[30];
+                goto compare;
+              case 41:
+                resword = &wordlist[31];
+                goto compare;
+              case 43:
+                resword = &wordlist[32];
+                goto compare;
+              case 44:
+                resword = &wordlist[33];
+                goto compare;
+              case 45:
+                resword = &wordlist[34];
+                goto compare;
+              case 46:
+                resword = &wordlist[35];
+                goto compare;
+              case 48:
+                resword = &wordlist[36];
+                goto compare;
+              case 49:
+                resword = &wordlist[37];
+                goto compare;
+              case 52:
+                resword = &wordlist[38];
+                goto compare;
+              case 53:
+                resword = &wordlist[39];
+                goto compare;
+              case 54:
+                resword = &wordlist[40];
+                goto compare;
+              case 58:
+                resword = &wordlist[41];
+                goto compare;
+              case 59:
+                resword = &wordlist[42];
+                goto compare;
+              case 60:
+                resword = &wordlist[43];
+                goto compare;
+              case 61:
+                resword = &wordlist[44];
+                goto compare;
+              case 62:
+                resword = &wordlist[45];
+                goto compare;
+              case 63:
+                resword = &wordlist[46];
+                goto compare;
+              case 64:
+                resword = &wordlist[47];
+                goto compare;
+              case 69:
+                resword = &wordlist[48];
+                goto compare;
+              case 70:
+                resword = &wordlist[49];
+                goto compare;
+              case 71:
+                resword = &wordlist[50];
+                goto compare;
+              case 72:
+                resword = &wordlist[51];
+                goto compare;
+              case 74:
+                resword = &wordlist[52];
+                goto compare;
+              case 75:
+                resword = &wordlist[53];
+                goto compare;
+              case 76:
+                resword = &wordlist[54];
+                goto compare;
+              case 77:
+                resword = &wordlist[55];
+                goto compare;
+              case 78:
+                resword = &wordlist[56];
+                goto compare;
+              case 81:
+                resword = &wordlist[57];
+                goto compare;
+            }
+          return 0;
+        compare:
+          {
+            register const char *s = resword->name;
+
+            if (*str == *s && !strcmp (str + 1, s + 1))
+              return resword;
+          }
+        }
+    }
+  return 0;
+}
+#line 261 "ftinf_rh.gperf"
+
+
+static const sa_rules_t*
+ftinf_rules( const char *name ){
+    if( name ){
+        enum {
+            max_wlen=31
+        };
+        char buf[max_wlen+1];
+        int len=strlen( name );
+        if( len <= max_wlen ){
+            int i;
+            for( i=0; i<len; ++i )
+                buf[i]=tolower( name[i] );
+            buf[len]='\0';
+            return _rules_get( buf, len );
+        }
+    }
+    return NULL;
+}
+/*
+   gperf --output-file=ftinf_rh.c ftinf_rh.gperf
+*/
diff --git src/base/ftinf_rh.gperf src/base/ftinf_rh.gperf
new file mode 100644
index 0000000..9fd8aab
--- /dev/null
+++ src/base/ftinf_rh.gperf
@@ -0,0 +1,283 @@
+%struct-type
+%define slot-name name
+%enum
+%switch=1
+%readonly-tables
+%omit-struct-type
+%define lookup-function-name  _rules_get
+%define hash-function-name _rules_hash
+%{
+#include <ctype.h>
+static const struct sa_rules_s* _rules_get( const char*str, unsigned len );
+%}
+struct sa_rules_s;
+%%
+{   .name="---",
+    .synthesize_stems={on, 13, 13, end}
+},
+{   .name="andale mono",
+    .always_use_100={on, 0, maxp, end},
+    .stem_scaling={on, 11, 1, end},
+    .stem_widths={on, 10, 21, maxp,}
+},
+{   .name="arial narrow",
+    .stem_widths={on, 10, 21, maxp,}
+},
+{   .name="arial unicode ms",
+    .always_use_100={on, 0, maxp, end},
+    .stem_translating={on, 11, 32, end},
+    .stem_translating_only={on, 10, 16, 8, 32, 9, 32, end}
+},
+{   .name="arial",
+    .always_use_100={on, 0, maxp, end},
+    .edge_detection={on, 11, 11, 13, 13, end},
+    .spacing={on, 10, 11, 23, 25, 30, end},
+    .start={on, 11, 18, 23, 30, 30, end},
+    .stem_translating={on, 11, 32, end},
+    .stem_translating_only={on, 10, 16, 8, 32, 9, 32, 16, -24, end}
+},
+{   .name="arimo",
+    .always_use_100={on, 0, maxp, end},
+    .stem_translating={on, 11, 32, end},
+    .stem_translating_only={on, 10, 8, 8, 32, 9, 32, end}
+},
+{   .name="baskerville",
+    .brightness={on, 0, -20, end},
+    .contrast={on, 0, 25, end}
+},
+{   .name="bitstream vera sans mono",
+    .always_use_100={on, 0, maxp, end}
+},
+{   .name="bitstream vera sans",
+    .always_use_100={on, 10, 14, 16, 17, end},
+    .m={on, 12, 0, end},
+    .stem_scaling={on ,12, 1, end},
+    .stem_translating_only={on, 8, 16, end}
+},
+{   .name="calibri",
+    .always_use_100={on, 23, maxp, end},
+    .stem_scaling={on, 15, 1, 17, 1, 18, 1, end},
+    .stem_translating_only={on, 10, 16, 15, 0, end},
+    .stem_widths={on, 1, 10, 19, maxp,}
+},
+{   .name="candara",
+    .stem_scaling={on, 14, 1, 17, 1, end},
+    .stem_translating_only={on, 10, 16, end}
+},
+{   .name="cantarell",
+    .stem_translating_only={on, 11, 0, 12, 0, end},
+    .stem_widths={on, 10, 22, maxp,}
+},
+{   .name="canwell",
+    .stem_scaling={on, 13, 0, end}
+},
+{   .name="century gothic",
+    .stem_widths={on, 10, 22, maxp,}
+},
+{   .name="comfortaa",
+    .stem_widths={on, 10, 19, 22, maxp},
+    .stem_scaling={on, 11, 0, end}
+},
+{   .name="consolas",
+    .always_use_100={on, 0, maxp, end},
+    .stem_translating_only={on, 8, 32, 9, 32, end},
+    .stem_widths={on, 10, 20, maxp,},
+    .stem_scaling={on, 11, 1, end}
+},
+{   .name="corbel",
+    .stem_translating_only={on, 10, 16, end},
+    .stem_widths={on, 10, 21, maxp}
+},
+{   .name="courier new",
+    .always_use_100={on, 12, 12, end},
+    .edge_detection={on, 10, 12, end},
+    .m={on, 13, 1, 14, 1, end}
+},
+{   .name="courier",
+    .always_use_100={on, 0, maxp, end},
+    .m={on, 13, 1, 14, 1, end},
+    .stem_translating_only={on, 13, 16, 15, 0, end}
+},
+{   .name="cousine",
+    .always_use_100={on, 0, maxp, end}
+},
+{   .name="dejavu sans mono",
+    .always_use_100={on, 0, maxp, end},
+    .stem_translating_only={on, 7, 16, 8, 32, 9, 16, end}
+},
+{   .name="dejavu sans",
+    .always_use_100={on, 10, 14, 16, 17, end},
+    .m={on, 12, 0, end},
+    .stem_scaling={on, 12, 1, end},
+    .stem_translating_only={on, 8, 16, 15, -20, end}
+},
+{   .name="droid sans mono",
+    .m={on, 12, 0, end}
+},
+{   .name="droid sans",
+    .always_use_100={on, 12, 12, 15, 15, end},
+    .stem_translating_only={on, 8, 16, 9, 16, end}
+},
+{   .name="essential pragmatapro",
+    .always_use_100={on, 0, maxp, end},
+    .m={on, 13, 0, 14, 0, end}
+},
+{   .name="freemono",
+    .always_use_100={on, 0, maxp, end}
+},
+{   .name="freesans",
+    .always_use_100={on, 0, maxp, end},
+    .edge_detection={on, 11, 11, 13, 13, end},
+    .spacing={on, 10, 12, 18, 18, 30, end},
+    .start={on, 10, 18, 18, 25, 30, end},
+    .stem_scaling={on, 16, 0, end},
+    .stem_translating={on, 11, 32, end},
+    .stem_translating_only={on, 10, 16, 9, 8, end}
+},
+{   .name="freeserif",
+    .stem_scaling={on, 13, 1, 17, 1, end}
+},
+{   .name="futura",
+    .stem_widths={on, 10, 14, sw2pv, maxp,}
+},
+{   .name="garamond",
+    .brightness={on, 0, -20, end},
+    .contrast={on, 0, 25, end}
+},
+{   .name="georgia",
+    .stem_translating_only={on, 13, 16, 14, 16, 15, 0, end}
+},
+{   .name="gill sans",
+    .stem_widths={on, 10, 17, sw2pv, maxp,}
+},
+{   .name="helvetica cy",
+    .stem_widths={on, 10, 23, maxp,}
+},
+{   .name="inconsolata",
+    .stem_scaling={on, 12, 1, 15, 1, end},
+    .stem_translating_only={on, 10, 24, 9, 32, end},
+    .stem_widths={on, 10, 23, maxp,},
+},
+{   .name="liberation mono",
+    .always_use_100={on, 0, maxp, end}
+},
+{   .name="liberation sans narrow",
+    .stem_widths={on,10, 22, maxp,}
+},
+{   .name="liberation sans",
+    .edge_detection={on, 11, 11, end},
+    .stem_translating={on, 11, 32, end},
+    .stem_translating_only={on, 10, 8, 8, 32, 9, 32, end},
+    .stem_widths={on,10, 19, maxp,}
+},
+{   .name="lucida console",
+    .always_use_100={on, 0, maxp, end}
+},
+{   .name="lucida grande",
+    .stem_scaling={on, 13, 1, end},
+    .stem_translating_only={on, 13, 24, 14, 24, 8, 16, 9, 16, end},
+    .stem_widths={on, 10, 16, sw2pv, maxp},
+},
+{   .name="lucida sans unicode",
+    .stem_translating_only={on, 13, 24, 14, 24, 8, 16, 9, 16, end},
+    .stem_widths={on,10, 16, sw2pv, maxp,}
+},
+{   .name="luxi sans",
+    .always_use_100={on, 13, 13, end},
+    .stem_widths={on, 10, 17, sw2pv, maxp,}
+},
+{   .name="microsoft sans serif",
+    .always_use_100={on, 0, maxp, end},
+    .stem_translating_only={on, 10, 16, 8, 32, 9, 32, end}
+},
+{   .name="monaco",
+    .always_use_100={on, 0, maxp, end}
+},
+{   .name="myriad pro",
+    .stem_scaling={on, 14, 1, 17, 1, end},
+    .stem_translating_only={on, 10, 16, 11, 0, 9, 16, end}
+},
+{   .name="nina",
+    .stem_scaling={on, 11, 0, 12, 0, 13, 0, end}
+},
+{   .name="open sans",
+    .stem_translating_only={on, 10, 16, 9, 16, end},
+    .stem_widths={on, 10, 20, maxp,}
+},
+{   .name="optima",
+    .brightness={on, 0, -20, end},
+    .contrast={on, 0, 25, end},
+    .stem_scaling={on, 17, 1, end},
+    .stem_translating_only={on, 10, 0, 11, 0, 12, 0, end}
+},
+{   .name="palatino linotype",
+    .edge_detection={on, 0, 100, end}
+},
+{   .name="pragmata",
+    .always_use_100={on, 0, maxp, end}
+},
+{   .name="raleway",
+    .stem_scaling={on, 15, 0, end}
+},
+{   .name="rokkitt",
+    .stem_widths={on, 10, 21, maxp,}
+},
+{   .name="samba",
+    .stem_scaling={on, 11, 0, end}
+},
+{   .name="segoe ui",
+    .always_use_100={on, 11, 12, 14, 14, end},
+    .stem_translating_only={on, 10, 0, 7, 32, 8, 16, 9, 24, end},
+    .stem_widths={on, 10, 23, maxp,}
+},
+{   .name="tahoma",
+    .always_use_100={on, 11, 11, 14, maxp, end},
+    .edge_detection={on, 11, 11, end},
+    .spacing={on, 10, 12, 18, 18, 30, end},
+    .start={on, 14, 17, 30, 100, 100, end},
+    .stem_translating={on, 11, 32, end},
+    .stem_translating_only={on, 7, 32, 8, 32, 9, 32, end},
+},
+{   .name="times new roman",
+    .always_use_100={on, 14, 14, 16, 16, end},
+    .bearing_correction={0, 100, end},
+    .stem_scaling={on, 17, 1, end},
+    .stem_translating_only={on, 17, 8, end}
+},
+{   .name="trebuchet ms",
+    .always_use_100={on, 13, 13, end},
+    .stem_scaling={on, 13, 0, 17, 0, 20, 1, end},
+    .stem_translating_only={on, 10, 16, 11, 0, 8, 32, 9, 32, end},
+    .stem_widths={on, 10, 17, sw2pv, maxp,}
+},
+{   .name="ubuntu",
+    .always_use_100={on, 12, 13, 15, 15, end}
+},
+{   .name="verdana",
+    .always_use_100={on, 0, 14, 16, maxp, end},
+    .stem_scaling={on, 12, 1, 15, 1, end},
+    .stem_translating_only={on, 8, 16, 15, 16, 14, 32, 18, 32, 19, 24, end}
+},
+%%
+
+static const sa_rules_t*
+ftinf_rules( const char *name ){
+    if( name ){
+        enum {
+            max_wlen=31
+        };
+        char buf[max_wlen+1];
+        int len=strlen( name );
+        if( len <= max_wlen ){
+            int i;
+            for( i=0; i<len; ++i )
+                buf[i]=tolower( name[i] );
+            buf[len]='\0';
+            return _rules_get( buf, len );
+        }
+    }
+    return NULL;
+}
+/*
+   gperf --output-file=ftinf_rh.c ftinf_rh.gperf
+*/
diff --git src/base/ftinf_sh.c src/base/ftinf_sh.c
new file mode 100644
index 0000000..87d2ff8
--- /dev/null
+++ src/base/ftinf_sh.c
@@ -0,0 +1,463 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: gperf --output-file=ftinf_sh.c ftinf_sh.gperf  */
+/* Computed positions: -k'1,$' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
+#endif
+
+#line 9 "ftinf_sh.gperf"
+
+#include <ctype.h>
+static const struct ftinf_s* _settings_get( const char*str, unsigned len);
+/* maximum key range = 37, duplicates = 0 */
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+_settings_hash (register const char *str, register unsigned int len)
+{
+  static const unsigned char asso_values[] =
+    {
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 13,
+       8, 30, 25, 20, 40, 10, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40,  5, 40,  0,
+       0,  0, 40, 40, 10,  0, 40, 40, 15,  5,
+      10,  0, 10, 40, 40,  0,  0,  0,  0,  0,
+       0,  0, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
+      40, 40, 40, 40, 40, 40
+    };
+  return len + asso_values[(unsigned char)str[len - 1]] + asso_values[(unsigned char)str[0]];
+}
+
+#ifdef __GNUC__
+__inline
+#if defined __GNUC_STDC_INLINE__ || defined __GNUC_GNU_INLINE__
+__attribute__ ((__gnu_inline__))
+#endif
+#endif
+const struct ftinf_s *
+_settings_get (register const char *str, register unsigned int len)
+{
+  enum
+    {
+      TOTAL_KEYWORDS = 22,
+      MIN_WORD_LENGTH = 3,
+      MAX_WORD_LENGTH = 14,
+      MIN_HASH_VALUE = 3,
+      MAX_HASH_VALUE = 39
+    };
+
+  static const struct ftinf_s wordlist[] =
+    {
+#line 76 "ftinf_sh.gperf"
+{   .name="osx",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_vertical_stem_darken_strength=25,
+    .bold_embolden_x_value=16,
+    .brightness=10,
+    .contrast=20,
+    .filter_params={on, 3, 32, 38, 32, 3},
+    .gamma_correction={1000, 80},
+    .global_embolden_y_value=8,
+    .grayscale_filter_strength=25,
+},
+#line 37 "ftinf_sh.gperf"
+{   .name="ipad",
+    .filter_params={on, 0, 0, 100, 0, 0},
+    .gamma_correction={1000, 80},
+    .grayscale_filter_strength=100
+},
+#line 114 "ftinf_sh.gperf"
+{   .name="shove",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_increase_glyph_heights=true,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .filter_params={on, 11, 22, 38, 22, 11},
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=100,
+    .stem_fitting_strength=100,
+    .use_known_settings_on_selected_fonts=true,
+    .use_various_tweaks=true
+},
+#line 126 "ftinf_sh.gperf"
+{   .name="ubuntu",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_vertical_stem_darken_strength=25,
+    .brightness=-10,
+    .contrast=15,
+    .filter_params={on, 11, 22, 38, 22, 11},
+    .gamma_correction={1000, 80},
+    .use_various_tweaks=true
+},
+#line 27 "ftinf_sh.gperf"
+{   .name="classic",
+    .autohint_increase_glyph_heights=true,
+    .autohint_snap_stem_height=100,
+    .filter_params={on, 6, 25, 38, 25, 6},
+    .gamma_correction={0, 100},
+    .use_various_tweaks=true
+},
+#line 34 "ftinf_sh.gperf"
+{   .name="disabled",
+    .gamma_correction={0, 100},
+},
+#line 100 "ftinf_sh.gperf"
+{   .name="sharpened",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_increase_glyph_heights=true,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .filter_params={on, 11, 22, 38, 22, 11},
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=25,
+    .stem_fitting_strength=25,
+    .stem_snapping_sliding_scale=40,
+    .use_known_settings_on_selected_fonts=true,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=65
+},
+#line 42 "ftinf_sh.gperf"
+{   .name="infinality",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_increase_glyph_heights=true,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .filter_params={on, 11, 22, 38, 22, 11},
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=25,
+    .stem_fitting_strength=25,
+    .stem_snapping_sliding_scale=40,
+    .use_known_settings_on_selected_fonts=true,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=5
+},
+#line 15 "ftinf_sh.gperf"
+{   .name="custom",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .filter_params={on, 8, 24, 48, 24, 8},
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=75,
+    .stem_fitting_strength=50,
+    .stem_snapping_sliding_scale=30,
+    .use_known_settings_on_selected_fonts=true,
+    .use_various_tweaks=true
+},
+#line 180 "ftinf_sh.gperf"
+{   .name="vanilla",
+    .filter_params={on, 6, 25, 38, 25, 6},
+    .gamma_correction={0, 100},
+},
+#line 184 "ftinf_sh.gperf"
+{   .name="windows7light",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .contrast=20,
+    .filter_params={on, 20, 25, 38, 25, 05},
+    .fringe_filter_strength=100,
+    .gamma_correction={1000, 160},
+    .stem_snapping_sliding_scale=30,
+    .use_known_settings_on_selected_fonts=true,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=100
+},
+#line 226 "ftinf_sh.gperf"
+{   .name="windowsxplight",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .brightness=20,
+    .contrast=30,
+    .filter_params={on, 6, 25, 44, 25, 6},
+    .fringe_filter_strength=100,
+    .gamma_correction={1000, 120},
+    .stem_alignment_strength=15,
+    .stem_fitting_strength=15,
+    .stem_snapping_sliding_scale=30,
+    .use_known_settings_on_selected_fonts=true,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=65
+},
+#line 64 "ftinf_sh.gperf"
+{   .name="nudge",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_increase_glyph_heights=true,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .filter_params={on, 11, 22, 38, 22, 11},
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=25,
+    .stem_fitting_strength=15,
+    .stem_snapping_sliding_scale=30,
+    .use_various_tweaks=true,
+},
+#line 144 "ftinf_sh.gperf"
+{   .name="ultimate2",
+    .filter_params={on, 6, 22, 36, 22, 6},
+    .fringe_filter_strength=25,
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=15,
+    .stem_fitting_strength=15,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=25
+},
+#line 197 "ftinf_sh.gperf"
+{   .name="windows7",
+    .filter_params={on, 20, 25, 42, 25, 06},
+    .fringe_filter_strength=100,
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_vertical_stem_darken_strength=25,
+    .windows_style_sharpening_strength=65,
+    .gamma_correction={1000, 120},
+    .brightness=10,
+    .contrast=20,
+    .use_various_tweaks=true,
+    .autohint_snap_stem_height=100,
+    .use_known_settings_on_selected_fonts=true,
+},
+#line 210 "ftinf_sh.gperf"
+{   .name="windowsxp",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .brightness=10,
+    .contrast=20,
+    .filter_params={on, 6, 25, 44, 25, 6},
+    .fringe_filter_strength=100,
+    .gamma_correction={1000, 120},
+    .stem_alignment_strength=15,
+    .stem_fitting_strength=15,
+    .stem_snapping_sliding_scale=30,
+    .use_known_settings_on_selected_fonts=true,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=65
+},
+#line 56 "ftinf_sh.gperf"
+{   .name="linux",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .filter_params={on, 6, 25, 44, 25, 6},
+    .gamma_correction={0, 100},
+    .use_various_tweaks=true
+},
+#line 135 "ftinf_sh.gperf"
+{   .name="ultimate1",
+    .filter_params={on, 4, 22, 38, 22, 4},
+    .fringe_filter_strength=25,
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=15,
+    .stem_fitting_strength=15,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=25
+},
+#line 87 "ftinf_sh.gperf"
+{   .name="push",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_increase_glyph_heights=true,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .filter_params={on, 11, 22, 38, 22, 11},
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=75,
+    .stem_fitting_strength=50,
+    .stem_snapping_sliding_scale=30,
+    .use_known_settings_on_selected_fonts=true,
+    .use_various_tweaks=true
+},
+#line 171 "ftinf_sh.gperf"
+{   .name="ultimate5",
+    .filter_params={on, 12, 28, 42, 28, 12},
+    .fringe_filter_strength=25,
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=15,
+    .stem_fitting_strength=15,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=25
+},
+#line 162 "ftinf_sh.gperf"
+{   .name="ultimate4",
+    .filter_params={on, 10, 25, 37, 25, 10},
+    .fringe_filter_strength=25,
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=15,
+    .stem_fitting_strength=15,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=25
+},
+#line 153 "ftinf_sh.gperf"
+{   .name="ultimate3",
+    .filter_params={on, 8, 24, 36, 24, 8},
+    .fringe_filter_strength=25,
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=15,
+    .stem_fitting_strength=15,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=25
+}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register int key = _settings_hash (str, len);
+
+      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
+        {
+          register const struct ftinf_s *resword;
+
+          switch (key - 3)
+            {
+              case 0:
+                resword = &wordlist[0];
+                goto compare;
+              case 1:
+                resword = &wordlist[1];
+                goto compare;
+              case 2:
+                resword = &wordlist[2];
+                goto compare;
+              case 3:
+                resword = &wordlist[3];
+                goto compare;
+              case 4:
+                resword = &wordlist[4];
+                goto compare;
+              case 5:
+                resword = &wordlist[5];
+                goto compare;
+              case 6:
+                resword = &wordlist[6];
+                goto compare;
+              case 7:
+                resword = &wordlist[7];
+                goto compare;
+              case 8:
+                resword = &wordlist[8];
+                goto compare;
+              case 9:
+                resword = &wordlist[9];
+                goto compare;
+              case 10:
+                resword = &wordlist[10];
+                goto compare;
+              case 11:
+                resword = &wordlist[11];
+                goto compare;
+              case 12:
+                resword = &wordlist[12];
+                goto compare;
+              case 14:
+                resword = &wordlist[13];
+                goto compare;
+              case 15:
+                resword = &wordlist[14];
+                goto compare;
+              case 16:
+                resword = &wordlist[15];
+                goto compare;
+              case 17:
+                resword = &wordlist[16];
+                goto compare;
+              case 19:
+                resword = &wordlist[17];
+                goto compare;
+              case 21:
+                resword = &wordlist[18];
+                goto compare;
+              case 26:
+                resword = &wordlist[19];
+                goto compare;
+              case 31:
+                resword = &wordlist[20];
+                goto compare;
+              case 36:
+                resword = &wordlist[21];
+                goto compare;
+            }
+          return 0;
+        compare:
+          {
+            register const char *s = resword->name;
+
+            if (*str == *s && !strcmp (str + 1, s + 1))
+              return resword;
+          }
+        }
+    }
+  return 0;
+}
+#line 242 "ftinf_sh.gperf"
+
+
+static const ftinf_t*
+ftinf_settings( const char *name ){
+    if( name ){
+        enum {
+            max_wlen=31
+        };
+        char buf[max_wlen+1];
+        int len=strlen( name );
+        if( len <= max_wlen ){
+            int i;
+            for( i=0; i<len; ++i )
+                buf[i]=tolower( name[i] );
+            buf[len]='\0';
+            return _settings_get( buf, len );
+        }
+    }
+    return NULL;
+}
+/*
+   gperf --output-file=ftinf_sh.c ftinf_sh.gperf
+*/
diff --git src/base/ftinf_sh.gperf src/base/ftinf_sh.gperf
new file mode 100644
index 0000000..5f6e0ae
--- /dev/null
+++ src/base/ftinf_sh.gperf
@@ -0,0 +1,264 @@
+%struct-type
+%define slot-name name
+%enum
+%switch=1
+%readonly-tables
+%omit-struct-type
+%define lookup-function-name   _settings_get
+%define hash-function-name _settings_hash
+%{
+#include <ctype.h>
+static const struct ftinf_s* _settings_get( const char*str, unsigned len);
+%}
+struct ftinf_s;
+%%
+{   .name="custom",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .filter_params={on, 8, 24, 48, 24, 8},
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=75,
+    .stem_fitting_strength=50,
+    .stem_snapping_sliding_scale=30,
+    .use_known_settings_on_selected_fonts=true,
+    .use_various_tweaks=true
+},
+{   .name="classic",
+    .autohint_increase_glyph_heights=true,
+    .autohint_snap_stem_height=100,
+    .filter_params={on, 6, 25, 38, 25, 6},
+    .gamma_correction={0, 100},
+    .use_various_tweaks=true
+},
+{   .name="disabled",
+    .gamma_correction={0, 100},
+},
+{   .name="ipad",
+    .filter_params={on, 0, 0, 100, 0, 0},
+    .gamma_correction={1000, 80},
+    .grayscale_filter_strength=100
+},
+{   .name="infinality",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_increase_glyph_heights=true,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .filter_params={on, 11, 22, 38, 22, 11},
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=25,
+    .stem_fitting_strength=25,
+    .stem_snapping_sliding_scale=40,
+    .use_known_settings_on_selected_fonts=true,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=5
+},
+{   .name="linux",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .filter_params={on, 6, 25, 44, 25, 6},
+    .gamma_correction={0, 100},
+    .use_various_tweaks=true
+},
+{   .name="nudge",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_increase_glyph_heights=true,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .filter_params={on, 11, 22, 38, 22, 11},
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=25,
+    .stem_fitting_strength=15,
+    .stem_snapping_sliding_scale=30,
+    .use_various_tweaks=true,
+},
+{   .name="osx",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_vertical_stem_darken_strength=25,
+    .bold_embolden_x_value=16,
+    .brightness=10,
+    .contrast=20,
+    .filter_params={on, 3, 32, 38, 32, 3},
+    .gamma_correction={1000, 80},
+    .global_embolden_y_value=8,
+    .grayscale_filter_strength=25,
+},
+{   .name="push",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_increase_glyph_heights=true,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .filter_params={on, 11, 22, 38, 22, 11},
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=75,
+    .stem_fitting_strength=50,
+    .stem_snapping_sliding_scale=30,
+    .use_known_settings_on_selected_fonts=true,
+    .use_various_tweaks=true
+},
+{   .name="sharpened",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_increase_glyph_heights=true,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .filter_params={on, 11, 22, 38, 22, 11},
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=25,
+    .stem_fitting_strength=25,
+    .stem_snapping_sliding_scale=40,
+    .use_known_settings_on_selected_fonts=true,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=65
+},
+{   .name="shove",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_increase_glyph_heights=true,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .filter_params={on, 11, 22, 38, 22, 11},
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=100,
+    .stem_fitting_strength=100,
+    .use_known_settings_on_selected_fonts=true,
+    .use_various_tweaks=true
+},
+{   .name="ubuntu",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_vertical_stem_darken_strength=25,
+    .brightness=-10,
+    .contrast=15,
+    .filter_params={on, 11, 22, 38, 22, 11},
+    .gamma_correction={1000, 80},
+    .use_various_tweaks=true
+},
+{   .name="ultimate1",
+    .filter_params={on, 4, 22, 38, 22, 4},
+    .fringe_filter_strength=25,
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=15,
+    .stem_fitting_strength=15,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=25
+},
+{   .name="ultimate2",
+    .filter_params={on, 6, 22, 36, 22, 6},
+    .fringe_filter_strength=25,
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=15,
+    .stem_fitting_strength=15,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=25
+},
+{   .name="ultimate3",
+    .filter_params={on, 8, 24, 36, 24, 8},
+    .fringe_filter_strength=25,
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=15,
+    .stem_fitting_strength=15,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=25
+},
+{   .name="ultimate4",
+    .filter_params={on, 10, 25, 37, 25, 10},
+    .fringe_filter_strength=25,
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=15,
+    .stem_fitting_strength=15,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=25
+},
+{   .name="ultimate5",
+    .filter_params={on, 12, 28, 42, 28, 12},
+    .fringe_filter_strength=25,
+    .gamma_correction={0, 100},
+    .stem_alignment_strength=15,
+    .stem_fitting_strength=15,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=25
+},
+{   .name="vanilla",
+    .filter_params={on, 6, 25, 38, 25, 6},
+    .gamma_correction={0, 100},
+},
+{   .name="windows7light",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .contrast=20,
+    .filter_params={on, 20, 25, 38, 25, 05},
+    .fringe_filter_strength=100,
+    .gamma_correction={1000, 160},
+    .stem_snapping_sliding_scale=30,
+    .use_known_settings_on_selected_fonts=true,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=100
+},
+{   .name="windows7",
+    .filter_params={on, 20, 25, 42, 25, 06},
+    .fringe_filter_strength=100,
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_vertical_stem_darken_strength=25,
+    .windows_style_sharpening_strength=65,
+    .gamma_correction={1000, 120},
+    .brightness=10,
+    .contrast=20,
+    .use_various_tweaks=true,
+    .autohint_snap_stem_height=100,
+    .use_known_settings_on_selected_fonts=true,
+},
+{   .name="windowsxp",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .brightness=10,
+    .contrast=20,
+    .filter_params={on, 6, 25, 44, 25, 6},
+    .fringe_filter_strength=100,
+    .gamma_correction={1000, 120},
+    .stem_alignment_strength=15,
+    .stem_fitting_strength=15,
+    .stem_snapping_sliding_scale=30,
+    .use_known_settings_on_selected_fonts=true,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=65
+},
+{   .name="windowsxplight",
+    .autohint_horizontal_stem_darken_strength=10,
+    .autohint_snap_stem_height=100,
+    .autohint_vertical_stem_darken_strength=25,
+    .brightness=20,
+    .contrast=30,
+    .filter_params={on, 6, 25, 44, 25, 6},
+    .fringe_filter_strength=100,
+    .gamma_correction={1000, 120},
+    .stem_alignment_strength=15,
+    .stem_fitting_strength=15,
+    .stem_snapping_sliding_scale=30,
+    .use_known_settings_on_selected_fonts=true,
+    .use_various_tweaks=true,
+    .windows_style_sharpening_strength=65
+},
+%%
+
+static const ftinf_t*
+ftinf_settings( const char *name ){
+    if( name ){
+        enum {
+            max_wlen=31
+        };
+        char buf[max_wlen+1];
+        int len=strlen( name );
+        if( len <= max_wlen ){
+            int i;
+            for( i=0; i<len; ++i )
+                buf[i]=tolower( name[i] );
+            buf[len]='\0';
+            return _settings_get( buf, len );
+        }
+    }
+    return NULL;
+}
+/*
+   gperf --output-file=ftinf_sh.c ftinf_sh.gperf
+*/
diff --git src/base/ftinit.c src/base/ftinit.c
index b3b08fa..c125db9 100644
--- src/base/ftinit.c
+++ src/base/ftinit.c
@@ -43,7 +43,9 @@
 #include FT_INTERNAL_DEBUG_H
 #include FT_MODULE_H
 #include "basepic.h"
-
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+#include "ftinf.h"
+#endif
 
   /*************************************************************************/
   /*                                                                       */
@@ -341,10 +343,14 @@
     error = FT_New_Library( memory, alibrary );
     if ( error )
       FT_Done_Memory( memory );
-    else
+    else {
       FT_Add_Default_Modules( *alibrary );
-
-    FT_Set_Default_Properties( *alibrary );
+      FT_Set_Default_Properties( *alibrary );
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+      /* get Infinality settings */
+      ftinf_env();
+#endif
+    }
 
     return error;
   }
diff --git src/base/ftlcdfil.c src/base/ftlcdfil.c
index 611b39f..f59793a 100644
--- src/base/ftlcdfil.c
+++ src/base/ftlcdfil.c
@@ -22,7 +22,10 @@
 #include FT_LCD_FILTER_H
 #include FT_IMAGE_H
 #include FT_INTERNAL_OBJECTS_H
-
+#include <math.h>
+#include <string.h>
+#include <strings.h>
+#include "ftinf.h"
 
 #ifdef FT_CONFIG_OPTION_SUBPIXEL_RENDERING
 
@@ -306,11 +309,37 @@
   FT_Library_SetLcdFilter( FT_Library    library,
                            FT_LcdFilter  filter )
   {
-    static const FT_LcdFiveTapFilter  default_weights =
-                   { 0x08, 0x4d, 0x56, 0x4d, 0x08 };
     static const FT_LcdFiveTapFilter  light_weights =
                    { 0x00, 0x55, 0x56, 0x55, 0x00 };
 
+#ifndef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+    static const FT_LcdFiveTapFilter  default_weights =
+                   { 0x08, 0x4d, 0x56, 0x4d, 0x08 };
+#else
+    FT_LcdFiveTapFilter default_weights;
+    if( ftinf && ftinf->filter_params[0] )
+    {
+        const int *f=ftinf->filter_params;
+        /* Assume we were given integers [0-100] get them to [0-255] */
+        int val; /* 2611=2.55*1024 */
+        val=(f[1]*2611+512)>>10; if( val > 255 ) val=255;
+        default_weights[0] = (FT_Byte) val;
+        val=(f[2]*2611+512)>>10; if( val > 255 ) val=255;
+        default_weights[1] = (FT_Byte) val;
+        val=(f[3]*2611+512)>>10; if( val > 255 ) val=255;
+        default_weights[2] = (FT_Byte) val;
+        val=(f[4]*2611+512)>>10; if( val > 255 ) val=255;
+        default_weights[3] = (FT_Byte) val;
+        val=(f[5]*2611+512)>>10; if( val > 255 ) val=255;
+        default_weights[4] = (FT_Byte) val;
+    } else {
+        default_weights[0]=0x08;
+        default_weights[1]=0x4d;
+        default_weights[2]=0x56;
+        default_weights[3]=0x4d;
+        default_weights[4]=0x08;
+    }
+#endif
 
     if ( !library )
       return FT_THROW( Invalid_Library_Handle );
diff --git src/base/ftobjs.c src/base/ftobjs.c
index 539116e..c86b348 100644
--- src/base/ftobjs.c
+++ src/base/ftobjs.c
@@ -43,7 +43,9 @@
 #ifdef FT_CONFIG_OPTION_MAC_FONTS
 #include "ftbase.h"
 #endif
-
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+#include "ftinf.h"
+#endif
 
 #ifdef FT_DEBUG_LEVEL_TRACE
 
@@ -81,6 +83,11 @@
 
 #define GRID_FIT_METRICS
 
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+#include <strings.h>
+#include <stdlib.h>
+#include "../autofit/aflatin.h"
+#endif
 
   /* forward declaration */
   static FT_Error
@@ -567,6 +574,25 @@
   ft_lookup_glyph_renderer( FT_GlyphSlot  slot );
 
 
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+  static void
+  ft_glyphslot_enlarge_metrics( FT_GlyphSlot slot,
+                                FT_Render_Mode mode )
+  {
+    FT_Glyph_Metrics*  metrics = &slot->metrics;
+    FT_Pos enlarge_cbox = 0;
+
+
+    /* enlarge for grayscale rendering */
+    if ( mode == FT_RENDER_MODE_NORMAL )
+      enlarge_cbox = 64;
+
+    metrics->horiBearingX -= enlarge_cbox;
+    metrics->width += 2 * enlarge_cbox;
+  }
+#endif /* FT_CONFIG_OPTION_INFINALITY_PATCHSET */
+
+
 #ifdef GRID_FIT_METRICS
   static void
   ft_glyphslot_grid_fit_metrics( FT_GlyphSlot  slot,
@@ -625,8 +651,18 @@
     FT_Bool       autohint = FALSE;
     FT_Module     hinter;
     TT_Face       ttface = (TT_Face)face;
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
 
+    FT_Bool use_various_tweaks = FALSE;
+    if( ftinf ) use_various_tweaks=ftinf->use_various_tweaks;
 
+    /* Force autohint if no tt instructions */
+    /* NOTE:  NEEDS TO BE RUN LATER IN CODE???? */
+    /*if ( use_various_tweaks                             &&
+         ttface->num_locations                          &&
+         ttface->max_profile.maxSizeOfInstructions == 0 )
+      load_flags |= FT_LOAD_FORCE_AUTOHINT;*/
+#endif
     if ( !face || !face->size || !face->glyph )
       return FT_THROW( Invalid_Face_Handle );
 
@@ -717,6 +753,18 @@
     {
       FT_AutoHinter_Interface  hinting;
 
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+      if ( use_various_tweaks )
+      {
+        /* Force slight hinting over full hinting always */
+        load_flags &= ~FT_LOAD_TARGET_LCD;
+        load_flags &= ~FT_LOAD_TARGET_LCD_V;
+        load_flags &= ~FT_LOAD_TARGET_MONO;
+        load_flags &= ~FT_LOAD_TARGET_NORMAL;
+        load_flags |= FT_LOAD_TARGET_LIGHT;
+        /*printf("%d ", load_flags);*/
+      }
+#endif
 
       /* try to load embedded bitmaps first if available            */
       /*                                                            */
@@ -762,6 +810,18 @@
       if ( error )
         goto Exit;
 
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+      infinality_cur_width = 0;
+
+      {
+        /* fix for sdl_ttf */
+        FT_Render_Mode  mode = FT_LOAD_TARGET_MODE( load_flags );
+
+        if ( slot->format == FT_GLYPH_FORMAT_OUTLINE )
+          ft_glyphslot_enlarge_metrics( slot, mode );
+      }
+#endif
+
       if ( slot->format == FT_GLYPH_FORMAT_OUTLINE )
       {
         /* check that the loaded outline is correct */
@@ -4986,6 +5046,11 @@
     /* That's ok now */
     *alibrary = library;
 
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+    /* get Infinality settings */
+    ftinf_env();
+#endif
+
     return FT_Err_Ok;
 
 #ifdef FT_CONFIG_OPTION_PIC
diff --git src/base/ftoutln.c src/base/ftoutln.c
index 464a066..d84a82a 100644
--- src/base/ftoutln.c
+++ src/base/ftoutln.c
@@ -29,7 +29,9 @@
 #include FT_INTERNAL_CALC_H
 #include FT_INTERNAL_DEBUG_H
 #include FT_TRIGONOMETRY_H
-
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+#include "ftinf.h"
+#endif
 
   /*************************************************************************/
   /*                                                                       */
@@ -913,7 +915,13 @@
     FT_Vector*  points;
     FT_Int      c, first, last;
     FT_Int      orientation;
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+    FT_Bool use_various_tweaks = FALSE;
+    if( ftinf ) use_various_tweaks=ftinf->use_various_tweaks;
 
+    if ( use_various_tweaks )
+      ystrength = FT_PIX_FLOOR ( ystrength );
+#endif
 
     if ( !outline )
       return FT_THROW( Invalid_Outline );
diff --git src/base/ftsynth.c src/base/ftsynth.c
index 66dae60..89124f1 100644
--- src/base/ftsynth.c
+++ src/base/ftsynth.c
@@ -22,7 +22,9 @@
 #include FT_INTERNAL_OBJECTS_H
 #include FT_OUTLINE_H
 #include FT_BITMAP_H
-
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+#include "ftinf.h"
+#endif
 
   /*************************************************************************/
   /*                                                                       */
@@ -93,7 +95,10 @@
     FT_Face     face;
     FT_Error    error;
     FT_Pos      xstr, ystr;
-
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+    FT_Bool use_various_tweaks = FALSE;
+    if( ftinf ) use_various_tweaks=ftinf->use_various_tweaks;
+#endif
 
     if ( !slot )
       return;
@@ -111,8 +116,16 @@
     ystr = xstr;
 
     if ( slot->format == FT_GLYPH_FORMAT_OUTLINE )
+    {
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+      if ( use_various_tweaks )
+        (void)FT_Outline_EmboldenXY( &slot->outline,
+                                     xstr,
+                                     FT_PIX_FLOOR( ystr ) );
+      else
+#endif
       FT_Outline_EmboldenXY( &slot->outline, xstr, ystr );
-
+    }
     else /* slot->format == FT_GLYPH_FORMAT_BITMAP */
     {
       /* round to full pixels */
@@ -150,6 +163,9 @@
 
     slot->metrics.width        += xstr;
     slot->metrics.height       += ystr;
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+    if ( !use_various_tweaks )
+#endif
     slot->metrics.horiAdvance  += xstr;
     slot->metrics.vertAdvance  += ystr;
     slot->metrics.horiBearingY += ystr;
diff --git src/base/rules.mk src/base/rules.mk
index 2a1e93c..1a38d49 100644
--- src/base/rules.mk
+++ src/base/rules.mk
@@ -42,6 +42,7 @@ BASE_SRC := $(BASE_DIR)/basepic.c  \
             $(BASE_DIR)/ftdbgmem.c \
             $(BASE_DIR)/ftgloadr.c \
             $(BASE_DIR)/fthash.c   \
+            $(BASE_DIR)/ftinf.c    \
             $(BASE_DIR)/ftobjs.c   \
             $(BASE_DIR)/ftoutln.c  \
             $(BASE_DIR)/ftpic.c    \
diff --git src/cff/cffobjs.c src/cff/cffobjs.c
index 6161393..8c00aa9 100644
--- src/cff/cffobjs.c
+++ src/cff/cffobjs.c
@@ -39,6 +39,9 @@
 
 #include "cfferrs.h"
 
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+#include "../base/ftinf.h"
+#endif
 
   /*************************************************************************/
   /*                                                                       */
@@ -1172,6 +1175,9 @@
 #endif
 
     driver->no_stem_darkening = TRUE;
+#ifdef FT_CONFIG_OPTION_INFINALITY_PATCHSET
+    if(ftinf) driver->no_stem_darkening = !ftinf->stem_darkening_cff;
+#endif /* FT_CONFIG_OPTION_INFINALITY_PATCHSET */
 
     driver->darken_params[0] = CFF_CONFIG_OPTION_DARKENING_PARAMETER_X1;
     driver->darken_params[1] = CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y1;
diff --git src/truetype/ttinterp.c src/truetype/ttinterp.c
index af31408..6380d83 100644
--- src/truetype/ttinterp.c
+++ src/truetype/ttinterp.c
@@ -5753,6 +5753,7 @@
 
       if ( exc->ignore_x_mode                                 &&
            exc->GS.freeVector.x != 0                          &&
+           exc->GS.freeVector.y == 0                          &&
            !( exc->sph_tweak_flags & SPH_TWEAK_NORMAL_ROUND ) )
         control_value_cutin = 0;
     }
-- 
2.13.0

