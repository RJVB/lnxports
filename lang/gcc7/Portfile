# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

PortSystem 1.0
PortGroup select 1.0
PortGroup compiler_blacklist_versions 1.0
PortGroup active_variants 1.1
PortGroup conflicts_build 1.0

name                gcc7
subport             libgcc {}

epoch               2
version             7.1.0
platforms           darwin
categories          lang
maintainers         nomaintainer
# an exception in the license allows dependents to not be GPL
license             {GPL-3+ Permissive}
description         The GNU compiler collection
long_description    The GNU compiler collection, including front ends for \
                    C, C++, Objective-C, Objective-C++, and Fortran.

homepage            http://gcc.gnu.org/
master_sites        ftp://ftp.funet.fi/pub/mirrors/sources.redhat.com/pub/gcc/releases/gcc-${version}/ \
                    ftp://ftp.gwdg.de/pub/linux/gcc/releases/gcc-${version}/ \
                    ftp://gcc.ftp.nluug.nl/mirror/languages/gcc/releases/gcc-${version}/ \
                    ftp://gcc.gnu.org/pub/gcc/releases/gcc-${version}/ \
                    gnu:gcc/gcc-${version}

distname            gcc-${version}
use_bzip2           yes

checksums           rmd160  a228dc45a09eda91b1a201d234f9013b3009b461 \
                    sha256  8a8136c235f64c6fef69cac0d73a46a1a09bb250776a050aec8f9fc880bebc17

depends_lib         port:gmp \
                    path:lib/pkgconfig/isl.pc:isl \
                    path:lib/libgcc/libgcc_s.1.dylib:libgcc \
                    port:libiconv \
                    port:libmpc \
                    port:mpfr

# depends_skip_archcheck-append gcc_select ld64 cctools
license_noconflict  gmp mpfr ppl libmpc

conflicts_build     gettext-dev

set major           [lindex [split ${version} .-] 0]

set to_prefix       /usr/local
destroot.violate_mtree yes
configure.pre_args-replace \
                    --prefix=${prefix} \
                    --prefix=${to_prefix}
configure.ldflags-replace \
                    -Wl,-R,${prefix}/lib \
                    -Wl,-rpath=${prefix}/lib
configure.ldflags-prepend \
                    -L${to_prefix}/lib -Wl,-rpath=${to_prefix}/lib

platform darwin {
    configure.pre_args-append --build=${build_arch}-apple-darwin${os.major}

    # see https://gcc.gnu.org/ml/gcc-patches/2012-05/msg00672.html
    patchfiles-append         patch-float128.diff
    # cause `as` to be invoked with the -q option so that it
    # invokes the clang integrated assembler (instead of the obsolete GNU as)
    # `man as` claims that this is the default but clearly that is not true everywhere.
    patchfiles-append         patch-default-clang-assembler.diff
}

configure.dir       ${workpath}/build
configure.cmd       ${worksrcpath}/configure
#                     --libdir=${prefix}/lib/${name}
configure.args      --enable-languages=c,c++,objc,obj-c++,lto,fortran \
                    --includedir=${to_prefix}/include/${name} \
                    --infodir=${to_prefix}/share/info \
                    --mandir=${to_prefix}/share/man \
                    --datarootdir=${to_prefix}/share/gcc-${major} \
                    --with-local-prefix=${to_prefix} \
                    --with-system-zlib \
                    --disable-nls \
                    --program-suffix=-mp-${major} \
                    --with-gxx-include-dir=${to_prefix}/include/${name}/c++/ \
                    --with-gmp=${prefix} \
                    --with-mpfr=${prefix} \
                    --with-mpc=${prefix} \
                    --with-isl=${prefix} \
                    --enable-stage1-checking \
                    --disable-multilib \
                    --enable-lto \
                    --enable-libstdcxx-time \
                    --with-build-config=bootstrap-debug \
                    --with-bugurl=https://trac.macports.org/newticket

# configure.env-append \
#                     AR_FOR_TARGET=${prefix}/bin/ar \
#                     AS_FOR_TARGET=${prefix}/bin/as \
#                     LD_FOR_TARGET=${prefix}/bin/ld \
#                     NM_FOR_TARGET=${prefix}/bin/nm \
#                     OBJDUMP_FOR_TARGET=${prefix}/bin/objdump \
#                     RANLIB_FOR_TARGET=${prefix}/bin/ranlib \
#                     STRIP_FOR_TARGET=${prefix}/bin/strip \
#                     OTOOL=${prefix}/bin/otool \
#                     OTOOL64=${prefix}/bin/otool

configure.env-append \
                      BOOT_LDFLAGS="${configure.ldflags}" \
                      LD_LIBRARY_PATH=${to_prefix}/lib:${prefix}/lib
build.env-append      BOOT_LDFLAGS="${configure.ldflags}" \
                      LD_LIBRARY_PATH=${to_prefix}/lib:${prefix}/lib
destroot.env-append   BOOT_LDFLAGS="${configure.ldflags}" \
                      LD_LIBRARY_PATH=${to_prefix}/lib:${prefix}/lib

configure.args-append \
                    --with-stage1-ldflags="-Wl,-rpath=${to_prefix}/lib -Wl,-rpath=${prefix}/lib -static-libstdc++ -static-libgcc" \
                    --enable-multiarch

pre-configure {
    configure.args-append --with-pkgversion="MacPorts ${name} ${version}_${revision}${portvariants}"

    if {${configure.sdkroot} ne ""} {
        # We should be using --with-build-sysroot here.  Using --with-sysroot
        # changes the behavior of the installed gcc to look in that sysroot
        # by default instead of /.  Using --with-build-sysroot is supposed
        # to be used during the build but not impact the installed product.
        # Unfortunately, the build fails because the value doesn't get
        # plumbed everywhere it is supposed to.
        #
        # https://trac.macports.org/ticket/53726
        # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=79885
        #
        # Note that macports toolchains will fail to compile gcc unless
        # the DevSDK is installed due to another gcc build system bug:
        # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80203
        configure.args-append --with-sysroot="${configure.sdkroot}"
    }

    # TODO: Remove when base automatically creates configure.dir (2.2.1?).
    file mkdir ${configure.dir}
}

# # http://trac.macports.org/ticket/29067
# compiler.blacklist-append gcc-4.0
# 
# # http://trac.macports.org/ticket/29104
# compiler.blacklist-append {llvm-gcc-4.2 < 2336.1}
# 
# # https://trac.macports.org/ticket/47996
# compiler.blacklist-append {clang < 300}

# "-stdlib" would be passed on to the bootstrap compiler if present
configure.cxx_stdlib

build.dir           ${configure.dir}
build.target        bootstrap-lean
use_parallel_build  yes

destroot.target     install install-info-host

# set standardLibs    {libgcc_ext.10.4.dylib libgcc_ext.10.5.dylib \
#     libgcc_s.1.dylib libgfortran.4.dylib libquadmath.0.dylib \
#     libstdc++.6.dylib libobjc-gnu.4.dylib libgomp.1.dylib \
#     libitm.1.dylib libssp.0.dylib libasan.0.dylib libatomic.1.dylib}
set standardLibs    {libgcc_ext.so.10.4 libgcc_ext.so.10.5 \
    libgcc_s.sp.1 libgfortran.so.4 libquadmath.so.0 \
    libstdc++.so.6 libobjc-gnu.so.4 libgomp.so.1 \
    libitm.so.1 libssp.so.0 libasan.so.0 libatomic.so.1}

if {${subport} eq "libgcc"} {
    ### MacStrop private
    PortGroup preserve_runtime_libraries 1.0
    ### MacStrop private

    conflicts       libgcc-devel
    long_description-append \
                    This port installs the standard libraries, including libstdc++. \
                    Users building from source can install port:${name}+with_libgcc \
                    and port:${subport}+stub to avoid building everything twice.

    variant stub description "Use when the standard libraries are provided by the main port:${name}+with_libgcc" {}

    # http://trac.macports.org/ticket/35770
    # http://trac.macports.org/ticket/38814
    # While there can be multiple versions of these runtimes in a single
    # process, it is not possible to pass objects between different versions,
    # so we simplify this by having the libgcc port provide the newest version
    # of these runtimes for all versions of gcc to use.
    #
    # If there is a binary incompatible change to the runtime in a future
    # version of gcc, then the latest version of gcc to provide a given ABI
    # version should continue to provide a subport for that and older gcc
    # versions.

    if {![catch {set result [active_variants ${name} with_libgcc {}]}]} {
        if {${result}} {
            default_variants-append +stub
        }
    }
    if {[variant_isset stub]} {
        # reset the depspecs to just port:${name}
        depends_lib     port:${name}
        require_active_variants ${name} with_libgcc

        use_configure   no

        fetch           {}
        extract         {}
        patch           {}
        build           {}
        destroot {
            # install symlinks to the set of standardLibs that have in this case been
            # installed by the main port. In other words, use the reverse logic to the
            # comparable foreach loop in the main port's post-destroot, minus the deleting.
            xinstall -m 755 -d ${destroot}${to_prefix}/lib/libgcc
            foreach dylib ${standardLibs} {
                # Different OS versions (eg: Leopard) or architectures (eg: PPC) don't produce all the dylibs
                # https://trac.macports.org/ticket/40098
                # https://trac.macports.org/ticket/40100
                if {[file exists ${to_prefix}/lib/${name}/${dylib}]} {
                    ln -s ${to_prefix}/lib/${name}/${dylib} ${destroot}${to_prefix}/lib/libgcc/${dylib}
                }

                if {[variant_isset universal]} {
                    foreach archdir [glob ${to_prefix}/lib/${name}/*/] {
                        if {[file exists ${archdir}/${dylib}]} {
                            ln -s ${archdir}/${dylib} ${destroot}${to_prefix}/lib/libgcc/${dylib}
                        }
                    }
                }
            }
        }
#         pre-activate {
#             if {![catch {set installed [lindex [registry_active ${subport}] 0]}]} {
#                 set _version [lindex ${installed} 1]
#                 if {[vercmp ${_version} 7.1.0] < 0} {
#                     registry_deactivate_composite ${subport} "" [list ports_nodepcheck 1]
#                 }
#             }
#         }
    } else {
        depends_lib-delete path:lib/libgcc/libgcc_s.1.dylib:libgcc
        require_active_variants ${name} "" with_libgcc

        configure.args-delete --libdir=${to_prefix}/lib/${name}
        configure.args-append --libdir=${to_prefix}/lib/libgcc

        # TODO: Possibly disable bootstrap with appropriate configure flags.
        #       the problem is that libstdc++'s configure script tests for tls support
        #       using the running compiler (not gcc for which libstdc++ is being built).
        #       Thus when we build with clang, we get a mismatch
        # http://trac.macports.org/ticket/36116
        #compiler.blacklist-append {clang < 425}
        #configure.args-append --disable-bootstrap
        #build.target        all

        post-destroot {
            file mkdir ${destroot}${to_prefix}/lib/libgcc.merged

            # Note that we really don't want to include libgcc_ext.10.[45].dylib here, but install_name_tool
            # doesn't know how to change the id of stubs, and it's easier than recreating them for each
            # gcc port.
#             set dylibs {libgcc_ext.10.4.dylib libgcc_ext.10.5.dylib libgcc_s.1.dylib libgfortran.4.dylib libquadmath.0.dylib libstdc++.6.dylib libobjc-gnu.4.dylib libgomp.1.dylib libitm.1.dylib libssp.0.dylib libasan.0.dylib libatomic.1.dylib}

            foreach dylib ${standardLibs} {
                # Different OS versions (eg: Leopard) or architectures (eg: PPC) don't produce all the dylibs
                # https://trac.macports.org/ticket/40098
                # https://trac.macports.org/ticket/40100
                if {! [file exists ${destroot}${to_prefix}/lib/libgcc/${dylib}]} {
                    continue
                }

                move ${destroot}${to_prefix}/lib/libgcc/${dylib} ${destroot}${to_prefix}/lib/libgcc.merged
                if {[variant_isset universal]} {
                    foreach archdir [glob ${destroot}${to_prefix}/lib/libgcc/*/] {
                        set archdir_nodestroot [string map "${destroot}/ /" ${archdir}]
                        if {[file exists ${archdir}/${dylib}]} {
                            system "install_name_tool -id ${to_prefix}/lib/libgcc/${dylib} ${archdir}/${dylib}"
                            foreach link ${dylibs} {
                                system "install_name_tool -change ${archdir_nodestroot}${link} ${to_prefix}/lib/libgcc/${link} ${archdir}/${dylib}"
                            }
                            system "lipo -create -output ${destroot}${to_prefix}/lib/libgcc.merged/${dylib}~ ${destroot}${to_prefix}/lib/libgcc.merged/${dylib} ${archdir}/${dylib} && mv ${destroot}${to_prefix}/lib/libgcc.merged/${dylib}~ ${destroot}${to_prefix}/lib/libgcc.merged/${dylib}"
                        }
                    }
                }

                # strip debug symbols to supress debugger warnings:
                # http://trac.macports.org/attachment/ticket/34831
                if {! [string match *libgcc_ext* ${dylib}]} {
                    system "strip -x ${destroot}${to_prefix}/lib/libgcc.merged/${dylib}"
                }
            }

            file delete -force ${destroot}${to_prefix}/bin
            file delete -force ${destroot}${to_prefix}/share
            file delete -force ${destroot}${to_prefix}/include
            file delete -force ${destroot}${to_prefix}/lib/libgcc
            file delete -force ${destroot}${to_prefix}/libexec

            move ${destroot}${to_prefix}/lib/libgcc.merged ${destroot}${to_prefix}/lib/libgcc

            # For binary compatibility with binaries that linked against the old libstdcxx port
            ln -s libgcc/libstdc++.6.dylib ${destroot}${to_prefix}/lib/libstdc++.6.dylib
        }
    }

    ### MacStrop private
    post-destroot {
        preserve_libraries ${to_prefix}/lib/libgcc lib*.*.dylib
    }
    ### MacStrop private

} else {

variant with_libgcc description "Include the standard libraries instead of getting them from port:libgcc. Speeds up building from source." {}
default_variants-append +with_libgcc

depends_run-append         port:gcc_select
if {[variant_isset with_libgcc]} {
    # we install libgcc's content ourselves
    depends_lib-delete path:lib/libgcc/libgcc_s.1.dylib:libgcc
}

post-destroot {
    file delete ${destroot}${to_prefix}/share/info/dir

    foreach file [glob ${destroot}${to_prefix}/share/{info,man/man7}/*] {
        set extension [file extension ${file}]
        set newfile [regsub "${extension}$" ${file} "-mp-${major}${extension}"]

        file rename ${file} ${newfile}
    }

    if {![variant_isset with_libgcc]} {
        foreach dylib ${standardLibs} {
            # Different OS versions (eg: Leopard) or architectures (eg: PPC) don't produce all the dylibs
            # https://trac.macports.org/ticket/40098
            # https://trac.macports.org/ticket/40100
            if {[file exists ${destroot}${to_prefix}/lib/${name}/${dylib}]} {
                delete ${destroot}${to_prefix}/lib/${name}/${dylib}
                ln -s ${to_prefix}/lib/libgcc/${dylib} ${destroot}${to_prefix}/lib/${name}/${dylib}
            }

            if {[variant_isset universal]} {
                foreach archdir [glob ${destroot}${to_prefix}/lib/${name}/*/] {
                    if {[file exists ${archdir}/${dylib}]} {
                        delete ${archdir}/${dylib}
                        ln -s ${to_prefix}/lib/libgcc/${dylib} ${archdir}/${dylib}
                    }
                }
            }
        }
    }
    proc replace_hardlink {bname} {
        global destroot prefix to_prefix major version
        if {[file exists ${destroot}${to_prefix}/bin/${bname}-mp-${major}]} {
            if {[file exists ${destroot}${to_prefix}/bin/x86_64-pc-linux-gnu-${bname}-mp-${major}]} {
                file delete ${destroot}${to_prefix}/bin/${bname}-mp-${major}
                ln -s x86_64-pc-linux-gnu-${bname}-mp-${major} ${destroot}${to_prefix}/bin/${bname}-mp-${major}
                if {${to_prefix} ne ${prefix}} {
                    ln -s ${to_prefix}/bin/x86_64-pc-linux-gnu-${bname}-mp-${major} ${destroot}${prefix}/bin/${bname}-mp-${major}
                }
            } elseif {[file exists ${destroot}${to_prefix}/bin/x86_64-pc-linux-gnu-${bname}-mp-${version}]} {
                file delete ${destroot}${to_prefix}/bin/${bname}-mp-${major}
                ln -s x86_64-pc-linux-gnu-${bname}-mp-${version} ${destroot}${to_prefix}/bin/${bname}-mp-${major}
                if {${to_prefix} ne ${prefix}} {
                    ln -s ${to_prefix}/bin/x86_64-pc-linux-gnu-${bname}-mp-${version} ${destroot}${prefix}/bin/${bname}-mp-${major}
                }
            }
        }
    }
    foreach bin {c++ cpp gcc-ar gcc gcc-nm gcc-ranlib gcov-dump gcov gcov-tool gfortran g++} {
        replace_hardlink ${bin}
    }

    # needs the patchelfmod package (ubuntu):
    foreach bin [glob -nocomplain ${destroot}${to_prefix}/bin/*] {
        system "patchelfmod -R ${to_prefix}/lib ${bin}"
        if {${to_prefix} ne ${prefix}} {
            system "patchelfmod -R ${prefix}/lib ${bin}"
        }
    }
    foreach bin [glob -nocomplain ${destroot}${to_prefix}/libexec/gcc/*/*/*] {
        catch {set result [system "patchelfmod -R ${to_prefix}/lib ${bin}"]}
        if {${to_prefix} ne ${prefix}} {
            catch {set result [system "patchelfmod -R ${prefix}/lib ${bin}"]}
        }
    }
    foreach bin [glob -nocomplain ${destroot}${to_prefix}/lib/gcc7/gcc/*/*/plugin/*] {
        catch {set result [system "patchelfmod -R ${to_prefix}/lib ${bin}"]}
        if {${to_prefix} ne ${prefix}} {
            catch {set result [system "patchelfmod -R ${prefix}/lib ${bin}"]}
        }
    }
    foreach bin [glob -nocomplain ${destroot}${to_prefix}/lib/*/*] {
        catch {set result [system "patchelfmod -R ${to_prefix}/lib ${bin}"]}
        if {${to_prefix} ne ${prefix}} {
            catch {set result [system "patchelfmod -R ${prefix}/lib ${bin}"]}
        }
    }
# #     foreach bin [glob -nocomplain ${destroot}${to_prefix}/lib/*/libstdc++.so] {
# #         catch {set result [system "patchelfmod -a ${to_prefix}/lib/libintl.so.8 ${bin}"]}
# #     }
}

select.group        gcc
select.file         ${filespath}/mp-${name}

}

platform powerpc {
    configure.universal_archs ppc ppc64
}
platform i386 {
    configure.universal_archs i386 x86_64
}
variant universal {
    configure.args-delete --disable-multilib
}
# the generated compiler doesn't accept -arch
configure.env-append \
    CPP="${configure.cc} -E" \
    CXXCPP="${configure.cxx} -E"
build.env-append \
    CPP="${configure.cc} -E" \
    CXXCPP="${configure.cxx} -E"
configure.cc-append [get_canonical_archflags]
configure.cc_archflags
configure.cxx-append ${configure.cxx_archflags}
configure.cxx_archflags
configure.objc_archflags
configure.ld_archflags
configure.universal_cflags
configure.universal_cxxflags
configure.universal_ldflags
configure.universal_args

livecheck.type      regex
livecheck.url       http://ftp.gnu.org/gnu/gcc/
livecheck.regex     gcc-(${major}\\.\[0-9.\]+)/
