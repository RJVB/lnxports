diff --git gcc/c-family/c-opts.c gcc/c-family/c-opts.c
index 7dea1657409fa1896e970270409c4551eb9bbcb9..f75f7698ce12fd9fdafe4fff2e4c4b5c862d64db 100644
--- gcc/c-family/c-opts.c
+++ gcc/c-family/c-opts.c
@@ -41,6 +41,10 @@ along with GCC; see the file COPYING3.  If not see
 #include "mkdeps.h"
 #include "dumpfile.h"
 
+#ifdef __APPLE__
+#include <AvailabilityMacros.h>
+#endif
+
 #ifndef DOLLARS_IN_IDENTIFIERS
 # define DOLLARS_IN_IDENTIFIERS true
 #endif
@@ -87,9 +91,17 @@ static const char *sysroot = TARGET_SYSTEM_ROOT;
 /* Zero disables all standard directories for headers.  */
 static bool std_inc = true;
 
-/* Zero disables the C++-specific standard directories for headers.  */
+/* Zero disables the C++-specific standard directories for headers */
 static bool std_cxx_inc = true;
 
+/* 1 enables the libstdc++ specific standard header directories;
+   2 enables the libc++ specific standard header directories. */
+#if defined(MAC_OS_X_VERSION_MIN_REQUIRED) && MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_9
+static int std_cxx_header_type = 2;
+#else
+static int std_cxx_header_type = 1;
+#endif
+
 /* If the quote chain has been split by -I-.  */
 static bool quote_chain_split;
 
@@ -597,7 +609,21 @@ c_common_handle_option (size_t scode, const char *arg, int value,
       break;
 
     case OPT_nostdinc__:
-      std_cxx_inc = false;
+      std_cxx_inc = 0;
+      break;
+
+    /* OPT_stdlib_libc__ & OPT_stdlib_libstdc__ are also handled in g++spec.c */
+    case OPT_stdlib_libc__:
+      /* use libc++ */
+      warning (OPT_stdlib_libc__,
+        "using the LLVM/libc++ standard C++ headers");
+      std_cxx_header_type = 2;
+      break;
+
+    case OPT_stdlib_libstdc__:
+      warning (OPT_stdlib_libstdc__,
+        "using the GNU/libstdc++ standard C++ headers");
+      std_cxx_header_type = 1;
       break;
 
     case OPT_o:
@@ -762,7 +788,7 @@ c_common_post_options (const char **pfilename)
   sanitize_cpp_opts ();
 
   register_include_chains (parse_in, sysroot, iprefix, imultilib,
-			   std_inc, std_cxx_inc && c_dialect_cxx (), verbose);
+			   std_inc, std_cxx_inc && c_dialect_cxx () ? std_cxx_header_type : 0, verbose);
 
 #ifdef C_COMMON_OVERRIDE_OPTIONS
   /* Some machines may reject certain combinations of C
diff --git gcc/c-family/c.opt gcc/c-family/c.opt
index 13b930d75d4feef4ed8f16fcc486d6198bef510e..ce11406355974244f0efceac2ce880b245332d2b 100644
--- gcc/c-family/c.opt
+++ gcc/c-family/c.opt
@@ -1992,6 +1992,15 @@ std=iso9899:2011
 C ObjC Alias(std=c11)
 Conform to the ISO 2011 C standard.
 
+stdlib=libc++
+C++ ObjC++
+Specify the C++ standard library to use: LLVM libc++
+(default on Mac OS X 10.9 and up)
+
+stdlib=libstdc++
+C++ ObjC++
+Specify the C++ standard library to use: GNU libstdc++
+
 traditional
 Driver
 
diff --git gcc/config.in gcc/config.in
index eca3fd810fb70c584ed454a41a2bee7c5df893ae..338121117ad7802988b9cbbad168d857e92f80a6 100644
--- gcc/config.in
+++ gcc/config.in
@@ -2416,3 +2416,8 @@
 #undef vfork
 #endif
 
+/* default location where the libc++ headers are obtained from
+   when compiling C++ with -stdlib=libc++ . */
+#ifndef USED_FOR_TARGET
+#undef LIBCXX_INCLUDE_DIR
+#endif
diff --git gcc/configure gcc/configure
index 043a62b0de9f4760e95ca7aa8721fe1c903374d7..49c3b48da9f7a4a4f6c58d618cf264164a32c97b 100755
--- gcc/configure
+++ gcc/configure
@@ -642,6 +642,7 @@ host_xm_file_list
 host_exeext
 gcc_gxx_include_dir_add_sysroot
 gcc_gxx_include_dir
+libcxx_include_dir
 gcc_config_arguments
 float_h_file
 extra_programs
@@ -886,6 +887,7 @@ with_build_sysroot
 with_sysroot
 with_gxx_include_dir
 with_cpp_install_dir
+with_libcxx_include_dir
 enable_generated_files_in_srcdir
 with_gnu_ld
 with_ld
@@ -1709,6 +1711,9 @@ Optional Packages:
   --with-cpp-install-dir=DIR
                           install the user visible C preprocessor in DIR
                           (relative to PREFIX) as well as PREFIX/bin
+  --with-libcxx-include-dir
+                          default location for the libc++ headerfiles
+                          when using -stdlib=libc++
   --with-gnu-ld           arrange to work with GNU ld
   --with-ld               arrange to use the specified ld (full pathname)
   --with-demangler-in-ld  try to use demangler in GNU ld
@@ -3603,6 +3608,22 @@ fi
 fi
 
 
+libcxx_include_dir=
+# Specify the libc++ header file directory
+
+# Check whether --with-libcxx-include-dir was given.
+if test "${with_libcxx_include_dir+set}" = set; then :
+  withval=$with_libcxx_include_dir; case "${withval}" in
+yes)	as_fn_error "bad value ${withval} given for the default libc++ include directory" "$LINENO" 5 ;;
+no)	;;
+*)	libcxx_include_dir=$with_libcxx_include_dir
+cat >>confdefs.h <<_ACEOF
+#define LIBCXX_INCLUDE_DIR "$libcxx_include_dir"
+_ACEOF
+    ;;
+esac
+fi
+
 # We would like to our source tree to be readonly.  However when releases or
 # pre-releases are generated, the flex/bison generated files as well as the
 # various formats of manuals need to be included along with the rest of the
diff --git gcc/configure.ac gcc/configure.ac
index 2b52da3bbcce0b5d578cfb763d6fd0d1223b1953..dc6164a9fff7a0dfc8b054c942bf23c40c196b06 100644
--- gcc/configure.ac
+++ gcc/configure.ac
@@ -239,6 +239,21 @@ elif test x$withval != xno; then
   cpp_install_dir=$withval
 fi])
 
+libcxx_include_dir=
+# Specify the libc++ header file directory
+AC_ARG_WITH(libcxx_include_dir,
+[AC_HELP_STRING([--with-libcxx-include-dir=DIR],
+                [default location for the libc++ headerfiles
+                 when using -stdlib=libc++])],
+[if test x$withval = xyes; then
+  AC_MSG_ERROR(bad value ${withval} given for the default libc++ include directory)
+elif test x$withval != xno; then
+  libcxx_include_dir=$withval
+  AC_DEFINE_UNQUOTED(LIBCXX_INCLUDE_DIR,"libcxx_include_dir",
+	[default location where the libc++ headers are obtained from
+when compiling C++ with -stdlib=libc++ .])
+fi])
+
 # We would like to our source tree to be readonly.  However when releases or
 # pre-releases are generated, the flex/bison generated files as well as the 
 # various formats of manuals need to be included along with the rest of the
diff --git gcc/cp/g++spec.c gcc/cp/g++spec.c
index ffcc87c79c9df760b939c7dc1ba3e6181c67e3c6..ac751cf73d91475993c668e3a843e569c54fa118 100644
--- gcc/cp/g++spec.c
+++ gcc/cp/g++spec.c
@@ -23,6 +23,10 @@ along with GCC; see the file COPYING3.  If not see
 #include "tm.h"
 #include "opts.h"
 
+#ifdef __APPLE__
+#include <AvailabilityMacros.h>
+#endif
+
 /* This bit is set if we saw a `-xfoo' language specification.  */
 #define LANGSPEC	(1<<1)
 /* This bit is set if they did `-lm' or `-lmath'.  */
@@ -48,9 +52,18 @@ along with GCC; see the file COPYING3.  If not see
 #ifndef LIBSTDCXX
 #define LIBSTDCXX "stdc++"
 #endif
+/* libc++ support: */
+#ifndef LIBCXX
+#define LIBCXX "c++"
+/* using libsupc++ is a hack, which could be dropped on systems that have a new enough libc++
+   which has `operator delete(void*, unsigned long)` (introduced in libcxx rev. 229281, on
+   Mac that is in OS X 10.12). */
+#define LIBSUPCXX "supc++"
+#endif
 #ifndef LIBSTDCXX_PROFILE
 #define LIBSTDCXX_PROFILE LIBSTDCXX
 #endif
+
 #ifndef LIBSTDCXX_STATIC
 #define LIBSTDCXX_STATIC NULL
 #endif
@@ -65,7 +78,14 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,
   /* If nonzero, the user gave us the `-p' or `-pg' flag.  */
   int saw_profile_flag = 0;
 
-  /* What do with libstdc++:
+#if defined(MAC_OS_X_VERSION_MIN_REQUIRED) && defined(MAC_OS_X_VERSION_10_9) && MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_9
+	/* TODO the configure script should determine whether the targetted host uses libc++ */
+  int use_libcxx = 1;
+#else
+  int use_libcxx = 0;
+#endif
+
+  /* What do with libstdc++ (or libc++):
      -1 means we should not link in libstdc++
      0  means we should link in libstdc++ if it is needed
      1  means libstdc++ is needed and should be linked in.
@@ -141,6 +161,14 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,
 	  library = -1;
 	  break;
 
+	case OPT_stdlib_libc__:
+	  /* use libc++ */
+	  use_libcxx = 1;
+	  break;
+	case OPT_stdlib_libstdc__:
+	  use_libcxx = 0;
+	  break;
+
 	case OPT_l:
 	  if (strcmp (arg, MATH_LIBRARY) == 0)
 	    {
@@ -331,7 +359,7 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,
       j++;
     }
 
-  /* Add `-lstdc++' if we haven't already done so.  */
+  /* Add `-lstdc++' or -lc++ if we haven't already done so.  */
   if (library > 0)
     {
 #ifdef HAVE_LD_STATIC_DYNAMIC
@@ -342,19 +370,40 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,
 	  j++;
 	}
 #endif
-      generate_option (OPT_l,
-		       saw_profile_flag ? LIBSTDCXX_PROFILE : LIBSTDCXX, 1,
-		       CL_DRIVER, &new_decoded_options[j]);
-      added_libraries++;
-      j++;
-      /* Add target-dependent static library, if necessary.  */
-      if ((static_link || library > 1) && LIBSTDCXX_STATIC != NULL)
-	{
-	  generate_option (OPT_l, LIBSTDCXX_STATIC, 1,
-			   CL_DRIVER, &new_decoded_options[j]);
-	  added_libraries++;
-	  j++;
-	}
+		if (use_libcxx)
+			{
+				generate_option (OPT_l, LIBCXX, 1,
+					  CL_DRIVER, &new_decoded_options[j]);
+				added_libraries++;
+				j++;
+// #if defined(MAC_OS_X_VERSION_MIN_REQUIRED) && (!defined(MAC_OS_X_VERSION_10_12) || MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_12)
+				/* Get the C++14 sized new/delete operators from libsup++ (see comment above).
+					This is a bit of a hack but libc++ supports it.
+					However, we cannot be certain if a given build will never be used on a system with an older
+					libc++ so for now I'm leaving this in. Pulling in libsupc++ after libc++ should be a noop
+					if the latter  leaves nothing to be desired from the former. */
+				generate_option (OPT_l, LIBSUPCXX, 1,
+					  CL_DRIVER, &new_decoded_options[j]);
+				added_libraries++;
+				j++;
+// #endif
+			}
+		else
+			{
+				generate_option (OPT_l,
+					  saw_profile_flag ? LIBSTDCXX_PROFILE : LIBSTDCXX, 1,
+					  CL_DRIVER, &new_decoded_options[j]);
+				added_libraries++;
+				j++;
+				 /* Add target-dependent static library, if necessary.  */
+				 if ((static_link || library > 1) && (LIBSTDCXX_STATIC != NULL))
+				{
+				  generate_option (OPT_l, LIBSTDCXX_STATIC, 1,
+						   CL_DRIVER, &new_decoded_options[j]);
+				  added_libraries++;
+				  j++;
+				}
+			}
 #ifdef HAVE_LD_STATIC_DYNAMIC
       if (library > 1 && !static_link)
 	{
diff --git gcc/incpath.c gcc/incpath.c
index 98fe5ec9ab364b846ff8d008aad47ae1a4c3e35c..7689e4b2037ba53c836eb11f01640587f740ab4d 100644
--- gcc/incpath.c
+++ gcc/incpath.c
@@ -129,6 +129,12 @@ add_standard_paths (const char *sysroot, const char *iprefix,
   int relocated = cpp_relocated ();
   size_t len;
 
+#ifdef LIBCXX_INCLUDE_DIR
+  if (cxx_stdinc == 2)
+    {
+      add_path (xstrdup (LIBCXX_INCLUDE_DIR), SYSTEM, true, false);
+    }
+#endif
   if (iprefix && (len = cpp_GCC_INCLUDE_DIR_len) != 0)
     {
       /* Look for directories that start with the standard prefix.
@@ -136,7 +142,7 @@ add_standard_paths (const char *sysroot, const char *iprefix,
 	 IPREFIX and search them first.  */
       for (p = cpp_include_defaults; p->fname; p++)
 	{
-	  if (!p->cplusplus || cxx_stdinc)
+	  if (!p->cplusplus || cxx_stdinc == 1)
 	    {
 	      /* Should we be translating sysrooted dirs too?  Assume
 		 that iprefix and sysroot are mutually exclusive, for
@@ -167,7 +173,7 @@ add_standard_paths (const char *sysroot, const char *iprefix,
 
   for (p = cpp_include_defaults; p->fname; p++)
     {
-      if (!p->cplusplus || cxx_stdinc)
+      if (!p->cplusplus || cxx_stdinc == 1)
 	{
 	  char *str;
 
@@ -474,6 +480,9 @@ register_include_chains (cpp_reader *pfile, const char *sysroot,
   /* CPATH and language-dependent environment variables may add to the
      include chain.  */
   add_env_var_paths ("CPATH", BRACKET);
+  /* cxx_stdinc is no longer a bool but also indicates which C++ headers to include */
+  if (stdinc && cxx_stdinc == 2)
+    add_env_var_paths ("LIBCPP_INCLUDE_PATH", SYSTEM);
   add_env_var_paths (lang_env_vars[idx], SYSTEM);
 
   target_c_incpath.extra_pre_includes (sysroot, iprefix, stdinc);
