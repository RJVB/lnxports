diff --git gcc/incpath.c
--- gcc/orig.incpath.c	2017-02-20 12:38:16.000000000 +0100
+++ gcc/incpath.c	2017-05-11 19:02:37.000000000 +0200
@@ -129,6 +129,13 @@
   int relocated = cpp_relocated ();
   size_t len;
 
+  if (cxx_stdinc)
+    {
+      if (!getenv("LIBCPP_INCLUDE_PATH") && !getenv("GCC_FORCE_LIBSTDCPP"))
+        {
+          add_path (xstrdup ("@LLVMHEADERPATH@"), SYSTEM, true, false);
+        }
+    }
   if (iprefix && (len = cpp_GCC_INCLUDE_DIR_len) != 0)
     {
       /* Look for directories that start with the standard prefix.
@@ -474,6 +481,8 @@
   /* CPATH and language-dependent environment variables may add to the
      include chain.  */
   add_env_var_paths ("CPATH", BRACKET);
+  if (stdinc && cxx_stdinc && !getenv("GCC_FORCE_LIBSTDCPP"))
+    add_env_var_paths ("LIBCPP_INCLUDE_PATH", SYSTEM);
   add_env_var_paths (lang_env_vars[idx], SYSTEM);
 
   target_c_incpath.extra_pre_includes (sysroot, iprefix, stdinc);
diff --git gcc/cp/g++spec.c
--- gcc/cp/orig.g++spec.c	2017-09-07 22:30:27.000000000 +0200
+++ gcc/cp/g++spec.c	2017-10-31 20:44:58.000000000 +0100
@@ -23,6 +23,10 @@
 #include "tm.h"
 #include "opts.h"
 
+#ifdef __APPLE__
+#include <AvailabilityMacros.h>
+#endif
+
 /* This bit is set if we saw a `-xfoo' language specification.  */
 #define LANGSPEC	(1<<1)
 /* This bit is set if they did `-lm' or `-lmath'.  */
@@ -48,9 +52,18 @@
 #ifndef LIBSTDCXX
 #define LIBSTDCXX "stdc++"
 #endif
+/* libc++ support: */
+#ifndef LIBCXX
+#define LIBCXX "c++"
+#define LIBCXXABI "c++abi"
+/* using libsupc++ is a hack, probably to be dropped on systems that have a new enough libc++
+   which has `operator delete(void*, unsigned long)` (introduced in libcxx rev. 229281) */
+#define LIBSUPCXX "supc++"
+#endif
 #ifndef LIBSTDCXX_PROFILE
 #define LIBSTDCXX_PROFILE LIBSTDCXX
 #endif
+
 #ifndef LIBSTDCXX_STATIC
 #define LIBSTDCXX_STATIC NULL
 #endif
@@ -65,7 +78,13 @@
   /* If nonzero, the user gave us the `-p' or `-pg' flag.  */
   int saw_profile_flag = 0;
 
-  /* What do with libstdc++:
+#if defined(MAC_OS_X_VERSION_MIN_REQUIRED) && MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_9
+  int use_libcxx = 1;
+#else
+  int use_libcxx = 0;
+#endif
+
+  /* What do with libstdc++ (or libc++):
      -1 means we should not link in libstdc++
      0  means we should link in libstdc++ if it is needed
      1  means libstdc++ is needed and should be linked in.
@@ -141,6 +160,14 @@
 	  library = -1;
 	  break;
 
+	case OPT_stdlib_libc__:
+	  /* use libc++ */
+	  use_libcxx = 1;
+	  break;
+	case OPT_stdlib_libstdc__:
+	  use_libcxx = 0;
+	  break;
+
 	case OPT_l:
 	  if (strcmp (arg, MATH_LIBRARY) == 0)
 	    {
@@ -342,15 +369,34 @@
 	  j++;
 	}
 #endif
-      generate_option (OPT_l,
-		       saw_profile_flag ? LIBSTDCXX_PROFILE : LIBSTDCXX, 1,
-		       CL_DRIVER, &new_decoded_options[j]);
-      added_libraries++;
-      j++;
-      /* Add target-dependent static library, if necessary.  */
-      if ((static_link || library > 1) && LIBSTDCXX_STATIC != NULL)
+   /* NOT checking for the existence of LIBCXXABI and LIBSUPCXX on purpose */
+	 if (getenv ("GCC_FORCE_LIBSTDCPP")) {
+		 fprintf(stderr, "GCC_FORCE_LIBSTDCPP - using -l%s instead of -l%s -l%s -l%s\n",
+                 (saw_profile_flag ? LIBSTDCXX_PROFILE : LIBSTDCXX), LIBCXX, LIBCXXABI, LIBSUPCXX);
+		 generate_option (OPT_l,
+				  saw_profile_flag ? LIBSTDCXX_PROFILE : LIBSTDCXX, 1,
+				  CL_DRIVER, &new_decoded_options[j]);
+		 added_libraries++;
+		 j++;
+	 } else {
+		 generate_option (OPT_l, LIBCXX, 1,
+				  CL_DRIVER, &new_decoded_options[j]);
+		 added_libraries++;
+		 j++;
+		 /* add -lc++abi and -lsupc++ */
+		 generate_option (OPT_l, LIBCXXABI, 1,
+				  CL_DRIVER, &new_decoded_options[j]);
+		 added_libraries++;
+		 j++;
+		 generate_option (OPT_l, LIBSUPCXX, 1,
+				  CL_DRIVER, &new_decoded_options[j]);
+		 added_libraries++;
+		 j++;
+	 }
+	 /* Add target-dependent static library, if necessary.  */
+	 if ((static_link || library > 1) && (LIBSTDCXX_STATIC != NULL || getenv("GCC_IS_BUILDING_ITSELF")))
 	{
-	  generate_option (OPT_l, LIBSTDCXX_STATIC, 1,
+	  generate_option (OPT_l, LIBSTDCXX_STATIC ? LIBSTDCXX_STATIC : LIBSTDCXX, 1,
 			   CL_DRIVER, &new_decoded_options[j]);
 	  added_libraries++;
 	  j++;
diff --git gcc/c-family/c.opt
--- gcc/c-family/orig.c.opt	2017-03-31 16:24:27.000000000 +0200
+++ gcc/c-family/c.opt	2017-10-31 11:31:59.000000000 +0100
@@ -1992,6 +1992,15 @@
 C ObjC Alias(std=c11)
 Conform to the ISO 2011 C standard.
 
+stdlib=libc++
+C++ ObjC++
+Specify the C++ standard library to use: LLVM libc++
+(default on Mac OS X 10.9 and up)
+
+stdlib=libstdc++
+C++ ObjC++
+Specify the C++ standard library to use: GNU libstdc++
+
 traditional
 Driver
 
diff --git gcc/c-family/c-opts.c
--- gcc/c-family/orig.c-opts.c	2017-01-05 15:17:07.000000000 +0100
+++ gcc/c-family/c-opts.c	2017-10-31 20:45:16.000000000 +0100
@@ -41,6 +41,10 @@
 #include "mkdeps.h"
 #include "dumpfile.h"
 
+#ifdef __APPLE__
+#include <AvailabilityMacros.h>
+#endif
+
 #ifndef DOLLARS_IN_IDENTIFIERS
 # define DOLLARS_IN_IDENTIFIERS true
 #endif
@@ -87,9 +91,17 @@
 /* Zero disables all standard directories for headers.  */
 static bool std_inc = true;
 
-/* Zero disables the C++-specific standard directories for headers.  */
+/* Zero disables the C++-specific standard directories for headers */
 static bool std_cxx_inc = true;
 
+/* 1 enables the libstdc++ specific standard header directories;
+   2 enables the libc++ specific standard header directories. */
+#if defined(MAC_OS_X_VERSION_MIN_REQUIRED) && MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_9
+static int std_cxx_header_type = 2;
+#else
+static int std_cxx_header_type = 1;
+#endif
+
 /* If the quote chain has been split by -I-.  */
 static bool quote_chain_split;
 
@@ -597,7 +609,21 @@
       break;
 
     case OPT_nostdinc__:
-      std_cxx_inc = false;
+      std_cxx_inc = 0;
+      break;
+
+    /* OPT_stdlib_libc__ & OPT_stdlib_libstdc__ are also handled in g++spec.c */
+    case OPT_stdlib_libc__:
+      /* use libc++ */
+      warning (OPT_stdlib_libc__,
+        "using the LLVM/libc++ standard C++ headers");
+      std_cxx_header_type = 2;
+      break;
+
+    case OPT_stdlib_libstdc__:
+      warning (OPT_stdlib_libstdc__,
+        "using the GNU/libstdc++ standard C++ headers");
+      std_cxx_header_type = 1;
       break;
 
     case OPT_o:
@@ -762,7 +788,7 @@
   sanitize_cpp_opts ();
 
   register_include_chains (parse_in, sysroot, iprefix, imultilib,
-			   std_inc, std_cxx_inc && c_dialect_cxx (), verbose);
+			   std_inc, std_cxx_inc && c_dialect_cxx () ? std_cxx_header_type : 0, verbose);
 
 #ifdef C_COMMON_OVERRIDE_OPTIONS
   /* Some machines may reject certain combinations of C
