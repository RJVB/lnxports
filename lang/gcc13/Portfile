# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

PortSystem                                       1.0
PortGroup           select                       1.0
PortGroup           compiler_blacklist_versions  1.0
PortGroup           active_variants              1.1
PortGroup           conflicts_build              1.1

epoch               0
name                gcc13

homepage            https://gcc.gnu.org/

platforms           {darwin >= 10} linux
categories          lang
maintainers         nomaintainer
# an exception in the license allows dependents to not be GPL
license             {GPL-3+ Permissive}

description         The GNU compiler collection
long_description    {*}${description}, including front ends for \
                    C, C++, Objective-C, Objective-C++ and Fortran.

# Remember to reset all revision increments below to 0 on new versions
version             13.3.0 ; revision 2

set libgccname      lib${name}
subport             ${libgccname} { revision [ expr ${revision} + 1 ] }

set libcxxname      ${name}-libcxx

checksums           rmd160  a01df0d39af53b8bef8ff42f87469212589984ec \
                    sha256  0845e9621c9543a13f484e94584a49ffc0129970e9914624235fc1d061a0c083
#                     size    87909952

# Primary releases
master_sites        https://ftpmirror.gnu.org/gcc/gcc-${version}/ \
                    https://mirror.its.dal.ca/gnu/gcc/gcc-${version}/ \
                    https://mirrors.kernel.org/gnu/gcc/gcc-${version}/ \
                    https://www.mirrorservice.org/sites/ftp.gnu.org/gnu/gcc/gcc-${version}/ \
                    https://ftp-stud.hs-esslingen.de/pub/Mirrors/ftp.gnu.org/gcc/gcc-${version}/ \
                    https://mirror.yongbok.net/gnu/gcc/gcc-${version}/ \
                    http://mirror.koddos.net/gcc/releases/gcc-${version}/ \
                    ftp://ftp.gwdg.de/pub/linux/gcc/releases/gcc-${version}/ \
                    ftp://gcc.ftp.nluug.nl/mirror/languages/gcc/releases/gcc-${version}/ \
                    ftp://gcc.gnu.org/pub/gcc/releases/gcc-${version}/ \
                    gnu:gcc/gcc-${version}

distname            gcc-${version}
use_xz              yes

depends_build-append \
                    bin:makeinfo:texinfo
platform linux {
    depends_build-append \
                    port:binutils \
                    port:patchelf
}

platform darwin {
    depends_lib-append \
                    port:cctools \
                    port:ld64
}
depends_lib-append  port:gmp \
                    path:lib/pkgconfig/isl.pc:isl \
                    port:libiconv \
                    port:libmpc \
                    port:mpfr \
                    port:zlib \
                    port:zstd
depends_run-append  port:gcc_select \
                    path:share/doc/libgcc/README:libgcc

depends_skip_archcheck-append gcc_select ld64 cctools
license_noconflict  gmp mpfr ppl libmpc zlib

set major           [lindex [split ${version} .-] 0]

platform darwin {
    configure.pre_args-append --build=${build_arch}-apple-darwin${os.major}
}

platform linux {
    set stdcxxabi.is_gcc_internal 1
    if {[catch {PortGroup libstdcxxabi 1.0} err]} {
        ui_error "You need to install the MacStrop ports tree too"
        return -code error "Missing MacStrop port repo"
    }
    if {!${stdcxxabi::_GLIBCXX_USE_CXX11_ABI}} {
        default_variants +oldabi
        if {![variant_isset oldabi]} {
            ui_warn "variant `oldabi` unset; code generated by g++-mp-${major} can fail to link with binaries generated from the system C++ runtime!"
        }
    }
}

set gcc_configure_langs {c c++ objc obj-c++ lto fortran}
if {${subport} eq ${name} && ${build_arch} ne "i386"} {
    # jit compiler is not building on i386 systems
    # https://trac.macports.org/ticket/61130
    lappend gcc_configure_langs jit
}

#if { ${subport} ne ${libcxxname} } {
#    if {${subport} eq "${name}"} {
#        variant m2 conflicts quick description {build the GNU Modula-2 compiler} {}
#    } else {
#        variant m2 description {support the GNU Modula-2 compiler} {}
#    }
#}
if {[variant_exists m2] && [variant_isset m2]} {
    lappend gcc_configure_langs m2
}

proc get_clean_sysroot {} {
    global configure.sdkroot
    # if the sdkroot is one of the current, rapidly changing SDKS, use the generic one
    return [regsub {MacOSX1[1-9]\.[0-9]+\.sdk} ${configure.sdkroot} {MacOSX.sdk}]
}

set mp_extra_rpath  ${prefix}/lib/libgcc

configure.dir       ${workpath}/build
configure.cmd       ${worksrcpath}/configure
configure.args      --enable-languages=[join ${gcc_configure_langs} ","] \
                    --libdir=${prefix}/lib/${name} \
                    --includedir=${prefix}/include/${name} \
                    --infodir=${prefix}/share/info \
                    --mandir=${prefix}/share/man \
                    --datarootdir=${prefix}/share/gcc-${major} \
                    --with-local-prefix=${prefix} \
                    --with-system-zlib \
                    --disable-nls \
                    --program-suffix=-mp-${major} \
                    --with-gxx-include-dir=${prefix}/include/${name}/c++/ \
                    --with-gmp=${prefix} \
                    --with-mpfr=${prefix} \
                    --with-mpc=${prefix} \
                    --with-isl=${prefix} \
                    --with-zstd=${prefix} \
                    --enable-checking=release \
                    --disable-multilib \
                    --enable-lto \
                    --enable-libstdcxx-time \
                    --with-build-config=bootstrap-Os \
                    --with-as=${prefix}/bin/as \
                    --with-ld=${prefix}/bin/ld \
                    --with-ar=${prefix}/bin/ar \
                    --with-bugurl=https://trac.macports.org/newticket \
                    --enable-host-shared \
                    --with-darwin-extra-rpath=${mp_extra_rpath} \
                    --with-libiconv-prefix=${prefix}
if {[variant_exists m2] && [variant_isset m2]} {
    configure.args-append \
                    --enable-gm2tools \
                    --enable-libgm2
}

# see https://lists.macports.org/pipermail/macports-dev/2017-August/036209.html
# --disable-tls does not limit functionality
# it only determines how std::call_once works
platform darwin {
    configure.args-append  --disable-tls
}

# Disable ccache
# configure.ccache    no

#if {![info exists xcodecltversion]} {
#    set xcodecltversion ${xcodeversion}
#}

if { ${subport} ne ${libcxxname} && ${os.platform} eq "darwin" } {
    # gcc has build issues on macOS 11.3 with the use of Xcode 12.5 clang via cctools for ld
    # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100340
    # https://trac.macports.org/ticket/62775
    # Update for gcc13 - Similar issues on macOS 10.6, 10.13 ...
    if { ([vercmp ${xcodeversion}, 12.5] >= 0 && [vercmp ${xcodeversion}, 13] < 0) || \
         ([vercmp ${xcodecltversion}, 12.5] >= 0 && [vercmp ${xcodecltversion}, 13] < 0) || \
             ${os.major} < 11 || ${os.major} == 17 } \
    {
        # Skip bootstrap comparison entirely
        configure.args-replace --with-build-config=bootstrap-Os --without-build-config
        post-patch {
            reinplace {s|^do-compare =|do-compare = /usr/bin/true|g} \
                ${worksrcpath}/Makefile.in \
                ${worksrcpath}/config/bootstrap-debug.mk \
                ${worksrcpath}/config/bootstrap-debug-lean.mk \
                ${worksrcpath}/config/bootstrap-debug-lib.mk
        }
    }
}

configure.env-append \
                    AR_FOR_TARGET=${prefix}/bin/ar \
                    AS_FOR_TARGET=${prefix}/bin/as \
                    LD_FOR_TARGET=${prefix}/bin/ld \
                    NM_FOR_TARGET=${prefix}/bin/nm \
                    OBJDUMP_FOR_TARGET=${prefix}/bin/objdump \
                    RANLIB_FOR_TARGET=${prefix}/bin/ranlib \
                    STRIP_FOR_TARGET=${prefix}/bin/strip
platform darwin {
    configure.env-append \
                    OTOOL=${prefix}/bin/otool \
                    OTOOL64=${prefix}/bin/otool
}

#if { ${os.platform} eq "darwin" } {
    # Patch generated from https://github.com/iains/gcc-13-branch
    # git diff --no-prefix releases/gcc-13.1.0 gcc-13.1-darwin-r0
    patchfiles-append       patch-darwin-gcc-${version}.diff
    # Do not abort if 'system' headers in /opt/local/include/gcc are missing
    patchfiles-append       darwin/patch-disable-sys-header-missing-abort.diff
    # GCC fixinc work-around for sys/ucred.h on OSX10.14.4 no longer seems to work ???
    if { ${os.platform} eq "darwin" && ${os.major} == 18 } {
        patchfiles-append   darwin/patch-OSX10.14-ucred-atomic-define.diff
    }
#} else {
    patchfiles-append   patch-linux-gcc-configure.diff \
                        patch-linux-add-macports-paths.diff
    if {${subport} eq "${name}"} {
        post-patch {
            # for now we're hard-coding our mp_extra_rpath
            reinplace "s|@MP_EXTRA_RPATH@|${mp_extra_rpath}|g" ${worksrcpath}/gcc/gcc.cc
        }
    }
#}

# Since GCC 7.4.0, during configure, it detects features supported by target-as.
# On the other hand, MacPorts cctools contain a proxy for 'as' that runs system
# 'as' or one of the supported MacPorts clang's 'as' if it is installed. Here,
# we may encounter a misconfiguration when GCC builds on a system with some
# MacPorts clang, and 'as' is using it. However, on a clean system, it uses
# system 'as' if no MacPorts clang is installed, which may behave differently.
# This can make GCC broken until MacPorts clang is installed. To avoid a stealth
# dependency on the used clang, I enforce building with system 'as'.
# See:
#  - https://trac.macports.org/ticket/68683
#  - https://github.com/gcc-mirror/gcc/commit/b410cf1dc056aab195c5408871ffca932df8a78a
platform darwin {
    patchfiles-append   darwin/patch-gcc10-disable-macports-cctools-as-changes.diff
}

configure.env-append \
                    DISABLE_MACPORTS_AS_CLANG_SEARCH=1 \
                    DISABLE_XCODE_AS_CLANG_SEARCH=1

build.env-append    DISABLE_MACPORTS_AS_CLANG_SEARCH=1 \
                    DISABLE_XCODE_AS_CLANG_SEARCH=1

if {${os.platform} eq "darwin" && ${os.major} >= 22} {
    if { [vercmp ${xcodeversion}, 15.0] >= 0 || [vercmp ${xcodecltversion}, 15.0] >= 0 } {
        # On macOS13 and newer ensure the 'legacy' linker is used as GCC currently has problems
        # with the new default linker in Xcode 15. See e.g.
        # https://developer.apple.com/documentation/xcode-release-notes/xcode-15-release-notes#Linking
        # https://discussions.apple.com/thread/255137447
        # https://developer.apple.com/forums/thread/737707
        # https://github.com/Homebrew/homebrew-core/issues/145991
        configure.args-replace --with-ld=${prefix}/bin/ld --with-ld=${prefix}/bin/ld-classic
        # Ensure ld64 is installed with the correct variant need for ld-classic
        require_active_variants ld64 ld64_xcode
    }
}

pre-configure {

    # Set package info
    configure.args-append --with-pkgversion="MacPorts ${name} ${version}_${revision}${portvariants}"

    if {${os.platform} eq "darwin" && ${configure.sdkroot} ne ""} {
        # We should be using --with-build-sysroot here.  Using --with-sysroot
        # changes the behavior of the installed gcc to look in that sysroot
        # by default instead of /.  Using --with-build-sysroot is supposed
        # to be used during the build but not impact the installed product.
        # Unfortunately, the build fails because the value doesn't get
        # plumbed everywhere it is supposed to.
        #
        # https://trac.macports.org/ticket/53726
        # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=79885
        configure.args-append --with-sysroot="[get_clean_sysroot]"
    }

}

# if {${subport} ne ${libgccname}} {
    variant libcxx conflicts stdlib_flag description {enable -stdlib=libc++ using headers from port:libcxx-dev} {}
# }

proc libcxx_incpath {} {
    global prefix name
    if {[variant_exists libcxx] && [variant_isset libcxx]} {
        # this is where port:libcxx puts its headers on Linux!
        return /usr/include/c++/v1
    } else {
        return -code error "Internal Portfile error"
    }
}

#subport ${libcxxname} {
#    PortGroup compilers     1.0
#
#    compilers.choose        cxx
#    compilers.setup         -gcc -fortran -clangdevel -clang34 -clang35 -clang36 \
#                            -clang37 -clang50 -clang60 -clang70 -clang80 -clang90
#    if { ![clang_variant_isset] } {
#        if { ${os.platform} eq "darwin" && ${os.major} < 11 } {
#            default_variants-append +clang11
#        } else {
#            default_variants-append +clang16
#        }
#    }
#    revision                [ expr ${revision} + 0 ]
#    description             libc++ header implementation to be used by ${name}+stdlib_flag
#    long_description        {*}${description}.
#    homepage                https://llvm.org/
#    license                 NCSA
#    depends_build
#    depends_extract
#    depends_run
#    depends_lib
#    distfiles
#    patchfiles
#    use_configure           no
#    supported_archs         noarch
#    platforms               any
#    
#    if {[variant_exists libcxx] && [variant_isset libcxx]} {
#        PortGroup stub 1.0
#        long_description-append "\nIn +libcxx mode this is just a stub that depends on libcxx-dev"
#        depends_run-append port:libcxx-dev
#    } else {
#        # Find clang/llvm version to use from active variant
#        proc getClangVersion {} {
#            if { [regexp {clang(.*)} [clang_variant_name] -> clang_v] } {
#                return ${clang_v}
#            }
#            return ""
#        }
#        set mp_clang_ver [getClangVersion]
#        build {
#            # Copy headers from clang-N during build
#            file mkdir ${worksrcpath}/headers
#            file copy ${prefix}/libexec/llvm-${mp_clang_ver}/include/c++/v1 ${worksrcpath}/headers/
#        }
#        destroot {
#            set base_dir [file dirname [libcxx_incpath]]
#            file mkdir ${destroot}${base_dir}
#            file copy ${worksrcpath}/headers/v1 ${destroot}${base_dir}
#        }
#    }
#}

if { ${subport} ne ${libcxxname} } {
### MacStrop private
    PortGroup save_configure_cmd    1.0
    PortGroup compress_workdir      1.0
    set LTO.disable_LTO yes
    PortGroup LTO                   1.0
    PortGroup preserve_runtime_libraries 1.0

    LTO.use_archive_helpers no
### MacStrop private

    # the quick variant simplifies gcc patch development but also decreases the build time by a factor > 4.
    variant quick description "Build ${name} without the usual 3-stage bootstrap. Much faster but not recommended" {}
    if {![variant_exists quick] || ![variant_isset quick]} {
        configure.ccache no
    } else {
        ui_debug "Allowing +quick builds with ccache"
    }

    variant no_sanit description {don't include the sanitiser libraries} {
        post-patch {
            file delete -force ${worksrcpath}/libsanitizer.moved
            file rename ${worksrcpath}/libsanitizer ${worksrcpath}/libsanitizer.moved
        }
    }

#    variant stdlib_flag conflicts libcxx description {Enable stdlib command line flag to select c++ runtime} {
#        # Enables support for specifying the c++ runtime via `-stdlib=` in a similar
#        # way to clang. For more details see the later comments in
#        #   https://www.mail-archive.com/gcc-patches@gcc.gnu.org/msg257385.html
#        # Note : This 'bakes' the libc++ include directory into gcc,
#        # which is then used as the default search location when `-stdlib=libc++`
#        # is given. Therefore to have consistency across various OS versions, and to enable
#        # modern c++ standards, use a recent macports clang port to provide this.
#        if {${subport} eq ${name}} {
#            depends_run-append port:${libcxxname}
#            require_active_variants port:${libcxxname} {} libcxx
#        }
#        configure.args-append --with-gxx-libcxx-include-dir="[libcxx_incpath]"
#    }
    if {[variant_exists libcxx] && [variant_isset libcxx]} {
        if {${subport} eq ${name}} {
            depends_build-append \
                path:share/doc/libcxx/provider:libcxx \
                path:lib/pkgconfig/libcxx.pc:libcxx-dev
            if {${os.platform} eq "darwin"} {
                depends_run-append \
                    port:${libcxxname}
                require_active_variants port:${libcxxname} libcxx
                require_active_variants libcxx-dev macports_libcxx
            } else {
                depends_run-append \
                    path:share/doc/libcxx/provider:libcxx \
                    path:lib/pkgconfig/libcxx.pc:libcxx-dev
            }
        }
        patchfiles-append \
                    patch-use-libcxx-on-linux.diff
        configure.args-append --with-gxx-libcxx-include-dir="[libcxx_incpath]"
    }

    # libcxx is unavailable on PPC
    if {${build_arch} ni [list ppc ppc64]} {
        #default_variants-append +stdlib_flag
        if {![variant_isset stdlib_flag]} {
            default_variants-append +libcxx
        }
    }

}

# https://trac.macports.org/ticket/29067
# https://trac.macports.org/ticket/29104
# https://trac.macports.org/ticket/47996
# https://trac.macports.org/ticket/58493
compiler.blacklist-append {clang < 800} gcc-4.0 *gcc-4.2 {llvm-gcc-4.2 < 2336.1} {macports-clang-3.[4-7]}

# https://build.macports.org/builders/ports-10.13_x86_64-builder/builds/105513/steps/install-port/logs/stdio
# c++/v1/functional:1408:2: error: no member named 'fancy_abort' in namespace 'std::__1'; did you mean simply 'fancy_abort'?
compiler.blacklist-append {clang < 1001}

platform darwin {
    # gcc can't be built by Xcode Clang 14.0.x
    # https://trac.macports.org/ticket/67416
    # https://github.com/iains/gcc-12-branch/issues/6
    if { ([vercmp ${xcodeversion}, 14.0] >= 0 && [vercmp ${xcodeversion}, 14.1] < 0) || \
        ([vercmp ${xcodecltversion}, 14.0] >= 0 && [vercmp ${xcodecltversion}, 14.1] < 0) } {
        pre-fetch {
            ui_error "${name} cannot be built with Xcode/CLT 14.0.x"
            ui_error "Either upgrade both Xcode and the Command Line Tools to 14.1 or later, or downgrade to 13.4."
            return -code error "incompatible Xcode/CLT version"
        }
    }
}

# "-stdlib" would be passed on to the bootstrap compiler if present
configure.cxx_stdlib

build.dir           ${configure.dir}
build.target        bootstrap-lean

destroot.target     install install-info-host

if {${os.platform} eq "darwin"} {
    # gcc cannot build if these are active
    conflicts_build-append libunwind-headers binutils gdb
} else {
    conflicts_build-append libunwind-dev binutils-dev gdb gettext-dev
}

# Find dylibs at a given location
proc dylib_list {location} {
    # Note we just handle all .so files.
    set dylibs [glob -directory ${location} -tails *.so*]
    ui_debug "Found at ${location} solibs : ${dylibs}"
    return ${dylibs}
}

if {${subport} eq ${libgccname}} {

    # Always provides primary runtime so always in conflict
    conflicts libgcc-devel

    # Activate hack for new libgcc
    # https://trac.macports.org/wiki/PortfileRecipes#deactivatehack
    pre-activate {
        if {![catch {set installed [lindex [registry_active libgcc8] 0]}]} {
            # Extract the epoch of the installed libgcc8
            set _epoch [lindex $installed 5]
            # If < 5 need to deactivate
            if {[vercmp $_epoch, 5] < 0} {
                registry_deactivate_composite libgcc8 "" [list ports_nodepcheck 1]
            }
        }
        if {![catch {set installed [lindex [registry_active libgcc10] 0]}]} {
            # Extract the epoch of the installed libgcc10
            set _epoch [lindex $installed 5]
            # If < 6 need to deactivate
            if {[vercmp $_epoch, 6] < 0} {
                registry_deactivate_composite libgcc10 "" [list ports_nodepcheck 1]
            }
        }
        if {![catch {set installed [lindex [registry_active libgcc11] 0]}]} {
            # Extract the epoch of the installed libgcc11
            set _epoch [lindex $installed 5]
            # If < 1 need to deactivate
            if {[vercmp $_epoch, 1] < 0} {
                registry_deactivate_composite libgcc11 "" [list ports_nodepcheck 1]
            }
        }
        if {![catch {set installed [lindex [registry_active libgcc12] 0]}]} {
            # Extract the epoch of the installed libgcc12
            set _epoch [lindex $installed 5]
            # If < 1 need to deactivate
            if {[vercmp $_epoch, 1] < 0} {
                registry_deactivate_composite libgcc12 "" [list ports_nodepcheck 1]
            }
        }
        if {![catch {set installed [lindex [registry_active libgcc-devel] 0]}]} {
            # Extract the epoch of the installed libgcc-devel
            set _epoch [lindex $installed 5]
            # If < 5 need to deactivate
            if {[vercmp $_epoch, 5] < 0} {
                registry_deactivate_composite libgcc-devel "" [list ports_nodepcheck 1]
            }
        }
    }

    # http://trac.macports.org/ticket/35770
    # http://trac.macports.org/ticket/38814
    # While there can be multiple versions of these runtimes in a single
    # process, it is not possible to pass objects between different versions,
    # so we simplify this by having the libgcc port provide the newest version
    # of these runtimes for all versions of gcc to use.
    #
    # If there is a binary incompatible change to the runtime in a future
    # version of gcc, then the latest version of gcc to provide a given ABI
    # version should continue to provide a subport for that and older gcc
    # versions.

    depends_run
    depends_lib-delete   port:zlib port:libiconv
    depends_build-append {*}${depends_lib}
    depends_lib          port:zlib port:libiconv

    configure.args-replace \
        --libdir=${prefix}/lib/${name} \
        --libdir=${prefix}/lib/libgcc

    # see https://trac.macports.org/ticket/54766
    configure.args-replace \
        --includedir=${prefix}/include/${name} \
        --includedir=${prefix}/include/gcc

    configure.args-replace \
        --with-gxx-include-dir=${prefix}/include/${name}/c++/ \
        --with-gxx-include-dir=${prefix}/include/gcc/c++/

    post-destroot {

        # Temporary working dir for dylibs
        file mkdir ${destroot}${prefix}/lib/libgcc.merged
        platform linux {
            # note: this assumes 64bit builds and breaks multi-arch builds (which we don't support anyway)
            catch {system "ls -l ${destroot}${prefix}/lib/lib64 "}
            foreach l [glob -nocomplain -directory ${destroot}${prefix}/lib/lib64 -tails *] {
                file rename ${destroot}${prefix}/lib/lib64/${l} ${destroot}${prefix}/lib/libgcc/
            }
            # gcc links libfoo.so and libfoo.so.X both to libfoo.so.X.Y.Z, rather than
            # linking libfoo.so to libfoo.so.X and that one to libfoo.so.X.Y.Z .
            # Probably a detail, but fix that:
            foreach l [glob -nocomplain -directory ${destroot}${prefix}/lib/libgcc -tails *.so.\[0-9\]] {
                set dylib_nover \
                    "[string range ${l} 0 [string last ".so" ${l}]]so"
                ln -s -f ${l} ${destroot}${prefix}/lib/libgcc/${dylib_nover}
            }
            system "ls -l ${destroot}${prefix}/lib/libgcc "
        }

        # loop over libs to install
        set dylibs [dylib_list ${destroot}${prefix}/lib/libgcc]
        foreach dylib ${dylibs} {

            # Move dylib to temp area
            ui_debug "${destroot}${prefix}/lib/libgcc/${dylib} -> ${destroot}${prefix}/lib/libgcc.merged/"
            file rename ${destroot}${prefix}/lib/libgcc/${dylib} ${destroot}${prefix}/lib/libgcc.merged/

#             platform darwin {
#                 # Universal support
#                 if {[variant_exists universal] && [variant_isset universal]} {
#                     foreach archdir [glob ${destroot}${prefix}/lib/libgcc/*/] {
#                         set archdir_nodestroot [string map "${destroot}/ /" ${archdir}]
#                         if {[file exists ${archdir}/${dylib}]} {
#                             system "install_name_tool -id ${prefix}/lib/libgcc/${dylib} ${archdir}/${dylib}"
#                             foreach link [glob -tails -directory ${archdir} *.dylib] {
#                                 system "install_name_tool -change ${archdir_nodestroot}${link} ${prefix}/lib/libgcc/${link} ${archdir}/${dylib}"
#                             }
#                             system "lipo -create -output ${destroot}${prefix}/lib/libgcc.merged/${dylib}~ ${destroot}${prefix}/lib/libgcc.merged/${dylib} ${archdir}/${dylib} && mv ${destroot}${prefix}/lib/libgcc.merged/${dylib}~ ${destroot}${prefix}/lib/libgcc.merged/${dylib}"
#                         }
#                     }
#                 }
# 
#                 # strip debug symbols to supress debugger warnings:
#                 # http://trac.macports.org/attachment/ticket/34831
#                 if {! [string match *libgcc_ext* ${dylib}]} {
#                     system "strip -x ${destroot}${prefix}/lib/libgcc.merged/${dylib}"
#                 }
#             }
        }
        system "ls -l ${destroot}${prefix}/lib/libgcc.merged"
        # install the LTO linker plugin for use by `nm`:
        xinstall -m 755 -d ${destroot}${prefix}/lib/bfd-plugins
        file rename ${destroot}${prefix}/libexec/gcc/x86_64-pc-linux-gnu/13.3.0/liblto_plugin.so \
                    ${destroot}${prefix}/lib/bfd-plugins/

        file delete -force ${destroot}${prefix}/bin
        file delete -force ${destroot}${prefix}/share
        file delete -force ${destroot}${prefix}/lib/libgcc
        file delete -force ${destroot}${prefix}/libexec

        move ${destroot}${prefix}/lib/libgcc.merged ${destroot}${prefix}/lib/libgcc

        # For binary compatibility with binaries that linked against the old libstdcxx port
        if {${os.platform} eq "darwin"} {
            ln -s libgcc/libstdc++.6.dylib ${destroot}${prefix}/lib/libstdc++.6.dylib
        } else {
            ln -s libgcc/libstdc++.so.6 ${destroot}${prefix}/lib/libstdc++.so.6
        }

        if {[variant_isset oldabi]} {
            system -W ${destroot}${prefix}/include/gcc "${patch.cmd} -Np0 -i ${filespath}/patch-force-oldcxxabi.diff"
        }

        ## install the ABI detector script
        xinstall -m 755 -d ${destroot}${prefix}/libexec/libgcc
        xinstall -m 755 ${filespath}/get_GLIBCXX_USE_CXX11_ABI.sh ${destroot}${prefix}/libexec/libgcc

        ### MacStrop private
        # user might want to preserve runtime libraries currently installed by previous libgccX ports:
        preserve_runtime_libraries_ports gcc7 libgcc8
        preserve_libraries ${prefix}/lib/libgcc "lib*.*.dylib lib*.so.*"
        ### MacStrop private
    }

}

if {${subport} eq ${name}} {

    # RJVB : should we add an explicit depends_run on port:${libgccname}?
    require_active_variants libgcc {} {gcc7 gcc8 gcc9 gcc10 gcc11 gcc12}

    stdcxxabi.dependencies_concerned_by_ABI port:libgcc${major}

    post-destroot {

        file delete ${destroot}${prefix}/share/info/dir

        foreach file [glob ${destroot}${prefix}/share/{info,man/man7}/*] {
            set extension [file extension ${file}]
            set newfile [regsub "${extension}$" ${file} "-mp-${major}${extension}"]
            file rename ${file} ${newfile}
        }

        # loop over libs to install
        set dylibs [dylib_list ${destroot}${prefix}/lib/${name}]
        foreach dylib ${dylibs} {
            if { [file exists ${prefix}/lib/libgcc/${dylib}] } {
                # Different OS versions (e.g. Leopard) or architectures (e.g. PPC) don't produce all the dylibs
                # https://trac.macports.org/ticket/40098
                # https://trac.macports.org/ticket/40100
                if {[file exists ${destroot}${prefix}/lib/${name}/${dylib}]} {
                    delete ${destroot}${prefix}/lib/${name}/${dylib}
                    ln -s ${prefix}/lib/libgcc/${dylib} ${destroot}${prefix}/lib/${name}/${dylib}
                }
                if {[variant_exists universal] && [variant_isset universal]} {
                    foreach archdir [glob ${destroot}${prefix}/lib/${name}/*/] {
                        if {[file exists ${archdir}/${dylib}]} {
                            delete ${archdir}/${dylib}
                            ln -s ${prefix}/lib/libgcc/${dylib} ${archdir}/${dylib}
                        }
                    }
                }
            }
        }

        # the MacPorts activation process breaks hardlinks on Linux; avoid that
        set target [exec ${worksrcpath}/config.guess]
        if {[file exists ${destroot}${prefix}/bin/${target}-c++-mp-${major}]} {
            ln -sf ${target}-g++-mp-${major} ${destroot}${prefix}/bin/${target}-c++-mp-${major}
            ln -sf ${target}-g++-mp-${major} ${destroot}${prefix}/bin/g++-mp-${major}
            ln -sf ${target}-g++-mp-${major} ${destroot}${prefix}/bin/c++-mp-${major}
            ln -sf ${target}-gcc-${major}.3.0 ${destroot}${prefix}/bin/gcc-mp-${major}
            foreach b {gcc-ar gcc-nm gcc-ranlib gfortran} {
                ln -sf ${target}-${b}-mp-${major} ${destroot}${prefix}/bin/${b}-mp-${major}
            }
        } else {
            ui_warn "Mis-guessed the target \"triplet\" as \"${target}\"."
            ui_msg "The files below (if any) will be copies of each other instead of symlinks:"
            ui_msg "[file -nocomplain ${destroot}${prefix}/bin/${target}-*-mp-${major}]"
        }

        if {[variant_isset oldabi]} {
            system -W ${destroot}${prefix}/include/gcc${major} "${patch.cmd} -Np0 -i ${filespath}/patch-force-oldcxxabi.diff"
        }
    }

    select.group        gcc
    select.file         ${filespath}/mp-${name}
}

if { ${subport} ne ${libcxxname} } {
# this block is for port:gccXY and port:libgccXY (if libgccXY is not a shim)

    post-extract {
        xinstall -m 644 ${worksrcpath}/config/bootstrap-O3.mk ${worksrcpath}/config/bootstrap-Os.mk
        reinplace "s|-O3|-Os|g" ${worksrcpath}/config/bootstrap-Os.mk
    }

    post-destroot {
        platform linux {
            # note: this assumes 64bit builds and breaks multi-arch builds (which we don't support anyway)
            catch {system "ls -l ${destroot}${prefix}/lib/lib64 "}
            foreach l [glob -nocomplain -directory ${destroot}${prefix}/lib/lib64 -tails *] {
                file rename ${destroot}${prefix}/lib/lib64/${l} ${destroot}${prefix}/lib/gcc${major}/
            }
            # gcc links libfoo.so and libfoo.so.X both to libfoo.so.X.Y.Z, rather than
            # linking libfoo.so to libfoo.so.X and that one to libfoo.so.X.Y.Z .
            # Probably a detail, but fix that:
            foreach l [glob -nocomplain -directory ${destroot}${prefix}/lib/gcc${major} -tails *.so.\[0-9\]] {
                set dylib_nover \
                    "[string range ${l} 0 [string last ".so" ${l}]]so"
                ln -s -f ${l} ${destroot}${prefix}/lib/gcc${major}/${dylib_nover}
            }
            catch {system "ls -l ${destroot}${prefix}/lib/gcc${major} "}
        }

        # Ensure all dylibs in destroot have our extra rpath added ..
        # https://trac.macports.org/ticket/65503
        set nrpath "${prefix}/lib:${mp_extra_rpath}:${prefix}/lib/${name}"
        foreach dlib [ exec find ${destroot}${prefix} -name "*.so" ] {
            ui_debug "Ensuring DYLIB '${dlib}' has RPATH '${mp_extra_rpath}'"
            catch {system "patchelf --set-rpath ${nrpath} ${dlib}"}
        }
    }

    # make sure our binaries know about the install locations!
    configure.ldflags-append \
        -Wl,-rpath,${prefix}/lib/libgcc

    platform powerpc {
        configure.universal_archs ppc ppc64
    }
    if { ${os.platform} eq "darwin" && ${os.major} >= 20 } {
        platform i386 {
            configure.universal_archs x86_64 arm64
        }
        platform arm {
            configure.universal_archs x86_64 arm64
        }
    } else {
        platform i386 {
            configure.universal_archs i386 x86_64
        }
    }
    if {${os.platform} eq "darwin"} {
        variant universal {
            configure.args-delete --disable-multilib
        }
    } else {
        # don't inject -I${prefix}/include
        compiler.cpath
    }
    # the generated compiler doesn't accept -arch
    configure.env-append \
        "CPP=${configure.cc} -E" \
        "CPP_FOR_BUILD=${configure.cc} -E" \
        "CXXCPP=${configure.cxx} -E"
    build.env-append \
        "CPP=${configure.cc} -E" \
        "CPP_FOR_BUILD=${configure.cc} -E" \
        "CXXCPP=${configure.cxx} -E"
    if {${subport} eq "${name}" && [variant_exists libcxx] && [variant_isset libcxx] && ![variant_isset quick]} {
        post-patch {
            reinplace "s|BOOT_CFLAGS= -g -O2|BOOT_CFLAGS= -Os|g" ${worksrcpath}/Makefile.in
        }
        # Skip bootstrap comparison entirely
        configure.args-replace \
            --with-build-config=bootstrap-debug \
            --without-build-config
        configure.env-append \
            "CFLAGS_FOR_TARGET=-g ${configure.cflags} ${LTO.cpuflags}" \
            "CXXFLAGS_FOR_TARGET=-g ${configure.cxxflags} ${LTO.cpuflags}"
        build.env-append \
            "VOID_STAGE_COMPARISON=1" \
            "BOOT_CFLAGS=-Os" \
            "CFLAGS_FOR_TARGET=${configure.cflags} ${LTO.cpuflags}" \
            "CXXFLAGS_FOR_TARGET=${configure.cxxflags} ${LTO.cpuflags}"
        # RJVB:
        # On Mac we tweak the bootstrap stage C(XX)FLAGS, in particular that the stage2 and stage3 compiler
        # don't try to use/build against libc++; idem for building the target libraries with the final
        # compiler (*FLAGS_FOR_TARGET).
        # NB: this assumes that the bootstrap compiler uses an appropriate default; just set it to -Os
        set preargs ${build.pre_args}
        build.pre_args \
            "BOOT_CFLAGS=-Os" \
            "STAGE1_CFLAGS=-Os" \
            "STAGE1_CXXFLAGS=-Os" \
            "STAGE2_CFLAGS=-Os" \
            "STAGE2_CXXFLAGS=-Os" \
            "STAGE3_CFLAGS=\"${configure.cflags} ${LTO.cpuflags}\"" \
            "STAGE3_CXXFLAGS=\"${configure.cxxflags} ${LTO.cpuflags}\"" \
            "CFLAGS_FOR_TARGET=\"-g ${configure.cflags} ${LTO.cpuflags}\"" \
            "CXXFLAGS_FOR_TARGET=\"-g ${configure.cxxflags} ${LTO.cpuflags}\"" \
            "do-compare=/bin/true" \
            {*}${preargs}
        depends_build-append port:gmake
        build.cmd ${prefix}/bin/gmake
    }
    configure.cc-append [get_canonical_archflags]
    if {[variant_exists quick] && [variant_isset quick]} {
        # quick (and hopefully not too dirty) build: don't bootstrap
        # and leave the configure environment mostly intact.
        configure.args-replace \
            --with-build-config=bootstrap-Os \
            --disable-bootstrap
        build.target all
    } else {
        configure.cc_archflags
        configure.cxx-append ${configure.cxx_archflags}
        configure.cxx_archflags
        configure.objc_archflags
        configure.ld_archflags
        configure.universal_cflags
        configure.universal_cxxflags
        configure.universal_ldflags
        configure.universal_args
    }
### MacStrop private
    configure.save_configure_cmd "install log"
### MacStrop private
}

livecheck.type      regex
livecheck.url       http://mirror.koddos.net/gcc/releases/
livecheck.regex     gcc-(${major}\\.\[0-9.\]+)/
