PortSystem              1.0
PortGroup               compiler_blacklist_versions 1.0
set LTO.allow_ThinLTO no
PortGroup               LTO 1.0
PortGroup               cmake 1.1
# Do not propagate c/c++ standards as set by base
cmake.set_c_standard    no
cmake.set_cxx_standard  no

platform darwin {
    PortGroup           legacysupport 1.1
    # link legacysupport statically for compilers
    legacysupport.use_static              yes
    # Sysconf wrapping causes issues so disable
    legacysupport.disable_function_wrap   yes
}

name                    libcxx
epoch                   1
set llvm_version        13
version                 13.0.1 ; revision 1
categories              lang
platforms               darwin
license                 MIT NCSA
maintainers             gmail.com:rjvbertin
description             libc++ is a new implementation of the C++ standard library with support for C++11 and portions of C++14.
long_description        ${description}

homepage                http://libcxx.llvm.org/

master_sites            https://github.com/llvm/llvm-project/releases/download/llvmorg-${version}
dist_subdir             llvm

livecheck.url           http://www.llvm.org/
livecheck.regex         download.html\#(\\d+\\.\\d+(\\.\\d+)+)

use_xz                  yes
distname                llvm-project-${version}.src

checksums               rmd160  ae542658ad0e97b4bf088b1cfba66fa10b9b52d8 \
                        sha256  326335a830f2e32d06d0a36393b5455d17dc73e0bd1211065227ee014f92cbf8
#                         size    97584928


set suffix              mp-${llvm_version}

compiler.blacklist-append clang
# pick the newest available (= installed) port:clang-XY compiler:
foreach clv {8.0 9.0 10 11 12 13 14 15 16 17 18 19 20} {
    if {[file exists ${prefix}/bin/clang-mp-${clv}]} {
        compiler.whitelist-prepend macports-clang-${clv}
    }
    compiler.fallback-prepend macports-clang-${clv}
}

if {[string match *clang++-mp-* ${configure.cxx}]} {
    compiler.blacklist-append {clang < 1204} {macports-clang-[5-7].0}
    compiler.fallback         clang macports-clang-11 macports-clang-10 macports-clang-9.0 macports-clang-8.0
    set clangversion [lindex [split ${configure.cc} -] 2]
    if {${clangversion} ne ""} {
        depends_build-append port:clang-${clangversion}
        if {${clangversion} < 8} {
            pre-configure {
                ui_error "This port requires at least clang 8 to be built!"
                return -code error "Please install or specify a sufficiently recent compiler"
            }
        }
    }
} else {
    pre-configure {
        ui_error "This port needs to be built with a clang compiler from MacPorts (>= 8.0)"
        return -code error "install a MacPorts clang compiler or invoke the install with `configure.compiler=macports-clang-XY`"
    }
}

variant pstl description "Build libc++ with ParallelSTL support (TBB backend)" {}

if {${os.platform} eq "linux"} {
    worksrcdir          ${distname}
    # depends_build-append port:libedit
    # depends_lib-append  port:libffi port:ncurses port:zlib

    patch.pre_args -Np1
    patchfiles-append \
        0010-compiler-rt-cmake-config-ix.cmake-was-Leopard-No-ASA.patch \
        0011-Fix-missing-long-long-math-prototypes-when-using-the.patch \
        0012-compiler-rt-add-some-defs-missing-in-older-SDKs.patch \
        0016-10.10-and-less-compiler-rt-find-macosx-sdk.patch \
        0017-10.6-and-less-libcxxabi-work-around-no-reexported_symbo.patch \
        0017-10.6-and-less-libcxx-work-around-no-reexported_symbo.patch \
        0021-10.6-and-less-libcxx-disable-Availability-tests.patch \
        0024-10.5-and-less-compiler-rt-work-around-no-libdispatch.patch \
        patch-accept-build_types.diff \
        patch-config-availability+ABIhiding.diff \
        patch-experimental-no-lto.diff
    # make benchmarks buildable (incl. not requiring over 2G of RAM to build)
    patchfiles-append \
        patch-strings-benchmark.diff \
        patch-cheaper-variant-benchmark.diff
    # clang-13/work/build/include/c++/v1/optional:224:5: error: destructor cannot be marked constexpr
    #     _LIBCPP_CONSTEXPR_AFTER_CXX17 ~__optional_destruct_base()
    patchfiles-append patch-no-const_expr_dtor.diff

    # let's see what we gain from supporting ParellelSTL
    # see https://reviews.llvm.org/D129452
    patchfiles-append \
        patch-use-pstl.diff \
        patch-no_result_of.diff

    # provide bits/cxxabi_init_exceptions.h
    # see https://discourse.llvm.org/t/libc-compiled-with-libstdc-abi-and-cxxabi-h-std-typeinfo/56553
    patchfiles-append \
        patch-provide-cxxabi_init_exceptions.diff

if {${os.platform} eq "darwin" && ${os.major} < 12} {
    # On OSX10.7 and older revert call to add_security_warnings as fails with
    #   add_security_warnings Function invoked with incorrect arguments
    post-patch {
        reinplace "s|add_security_warnings\(|\#add_security_warnings\(|" \
            ${patch.dir}/compiler-rt/lib/builtins/CMakeLists.txt \
            ${patch.dir}/compiler-rt/cmake/Modules/CompilerRTDarwinUtils.cmake
    }

    # On OSX10.7 and older revert call to add_security_warnings as fails with
    #   add_security_warnings Function invoked with incorrect arguments
    post-patch {
        reinplace "s|add_security_warnings\(|\#add_security_warnings\(|" \
            ${patch.dir}/compiler-rt/lib/builtins/CMakeLists.txt \
            ${patch.dir}/compiler-rt/cmake/Modules/CompilerRTDarwinUtils.cmake
    }
}

# make some space, but only after the patching so it's easier to share
# patchfiles with the main llvm ports.
post-patch {
    ui_info "Cleaning up unneeded directories"
    file delete -force ${worksrcpath}/clang
    file delete -force ${worksrcpath}/llvm/lib
    file delete -force ${worksrcpath}/llvm/test
    file delete -force ${worksrcpath}/polly
    file delete -force ${worksrcpath}/lldb
}

    cmake.install_prefix \
                        /usr
    long_description-append \
                        On Linux, this installs libc++ to ${cmake.install_prefix} \
                        regardless of where MacPorts is installed.

    if {[file exists ${filespath}/find_abi_headers.sh]} {
        set abi_header_dirs [exec ${filespath}/find_abi_headers.sh ${configure.cxx}]
        pre-configure {
            ui_info "abi_header_dirs=${abi_header_dirs}"
        }
    } else {
        # we're probably executed from the registry, e.g. while deactivating the port
        set abi_header_dirs {}
    }

    configure.args-append \
                        -DLLVM_ENABLE_RUNTIMES=libcxx \
                        -DLLVM_TARGETS_TO_BUILD="X86\;AMDGPU" \
                        -DLIBCXXABI_ENABLE_STATIC=OFF \
                        -DLIBCXX_ENABLE_STATIC=OFF \
                        -DLIBCXX_CXX_ABI=libstdc++ \
                        -DLIBCXX_CXX_ABI_INCLUDE_PATHS="${abi_header_dirs}" \
                        -DLIBCXX_ENABLE_ASSERTIONS=OFF \
                        -DLIBCXX_BENCHMARK_NATIVE_STDLIB=libstdc++ \
                        -DLIBCXX_LINK_TESTS_WITH_SHARED_LIBCXXABI=ON \
                        -DLIBCXX_INSTALL_LIBRARY=ON

    cmake.save_configure_cmd "install log"
    if {${build.jobs} ne 1} {
        build.post_args-append -wk
    }

    if {[variant_isset pstl]} {
        depends_lib-append \
                        port:onetbb
        configure.args-replace \
                        -DLLVM_ENABLE_RUNTIMES=libcxx \
                        -DLLVM_ENABLE_RUNTIMES="pstl\;libcxx"
        configure.args-append \
                        -DPSTL_PARALLEL_BACKEND=tbb \
                        -DLIBCXX_ENABLE_PARALLEL_ALGORITHMS=ON \
                        -DPSTL_HIDE_FROM_ABI_PER_TU=ON
        cmake.install_rpath-append \
                        ${prefix}/libexec/onetbb/lib
    }

    variant benchmark_libcxx description {build the benchmark against libc++} {
        configure.args-replace \
                        -DLIBCXX_BENCHMARK_NATIVE_STDLIB=libstdc++ \
                        -DLIBCXX_BENCHMARK_NATIVE_STDLIB=libc++
    }
    variant static_abi description {link the ABI library (libstdc++) statically} {
        configure.args-append \
                        -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON
    }

    cmake.source_dir    ${worksrcpath}/runtimes
    destroot.violate_mtree yes

    post-destroot {
        if {[variant_isset pstl]} {
            foreach i [glob ${destroot}/usr/include/*pstl*] {
                # move the ParellelSTL headers into the libc++ include dir so they're be found when
                # that directory is added to the compiler's header search path. Upstream appear to
                # be making this same merger.
                file rename ${i} ${destroot}/usr/include/c++/v1
            }
        }
        # be somewhat naughty: install system-wide links to the crucial OneTBB dependencies: without
        # those, using ParallelSTL would require pointing the build to the port:onetbb resources
        set otbpref ${prefix}/libexec/onetbb
        foreach d [glob ${otbpref}/include/*] {
            ln -s ${d} ${destroot}/usr/include/
        }
        foreach d [glob -dir ${otbpref}/lib/ *.so libtbb.so.12] {
            ln -s ${d} ${destroot}/usr/lib/
        }
        xinstall -m 755 -d ${destroot}/usr/lib/pkgconfig/
        foreach d [glob ${otbpref}/lib/pkgconfig/*] {
            ln -s ${d} ${destroot}/usr/lib/pkgconfig/
        }
    }

    test.run            yes
    test.dir            ${build.dir}
    test.target         cxx-benchmarks
    post-test {
        system -W ${build.dir}/libcxx/benchmarks "time ./algorithms.libcxx.out --benchmark_repetitions=1 --benchmark_filter='_1$'\;\
            time ./algorithms.native.out --benchmark_repetitions=1 --benchmark_filter='_1$' \;\
            time ./algorithms.libcxx.out --benchmark_repetitions=1 --benchmark_filter='_262144$'\;\
            time ./algorithms.native.out --benchmark_repetitions=1 --benchmark_filter='_262144$'"
    }

}

variant buildwith description {Label the install with the compiler used} {}
if {[variant_isset buildwith]} {
	set usedCompiler [string map {"-" "_"} [file tail ${configure.cc}]]
	variant ${usedCompiler} requires buildwith description "placeholder variant to record the compiler used" {
		pre-configure {
			ui_warn "This is just a placeholder variant"
		}
	}
	default_variants-append +${usedCompiler}
}
