PortSystem              1.0
PortGroup               compiler_blacklist_versions 1.0
PortGroup               LTO 1.0

name                    libcxx
epoch                   1
version                 9.0.1 ; revision 1
categories              lang
platforms               darwin
license                 MIT NCSA
maintainers             gmail.com:rjvbertin
description             libc++ is a new implementation of the C++ standard library with support for C++11 and portions of C++14.
long_description        ${description} \
                        Because objects cannot be passed between different versions of the C++ runtime, this port must \
                        replace the host version in order to be used.  On Snow Leopard and earlier, this is done \
                        automatically because there is no existing host version of this library.  On Lion and later, \
                        users must build the port with +replacemnt_libcxx and install the root manually if they wish \
                        to replace the existing host implementation.

homepage                http://libcxx.llvm.org/

# master_sites            http://www.llvm.org/releases/${version}/
master_sites            https://github.com/llvm/llvm-project/releases/download/llvmorg-${version}
dist_subdir             llvm

livecheck.url           http://www.llvm.org/
livecheck.regex         download.html\#(\\d+\\.\\d+(\\.\\d+)+)

use_xz                  yes
distname                ${name}-${version}.src
distfiles-append        llvm-${version}.src${extract.suffix}

checksums               ${name}-${version}.src${extract.suffix} \
                        rmd160  b85b557e1fa372f2f3eb854c13ca103abb671d66 \
                        sha256  0981ff11b862f4f179a13576ab0a2f5530f46bd3b6b4a90f568ccc6a62914b34 \
                        llvm-${version}.src${extract.suffix} \
                        rmd160  151c137ac3a514b6d32aaee5bb77dd32eb7d1f19 \
                        sha256  00a1ee1f389f81e9979f3a640a01c431b3021de0d42278f6508391a2f0b81c9a

if {${os.platform} eq "linux"} {
    PortGroup           cmake 1.1
    worksrcdir          llvm-${version}.src
    depends_build       port:libedit
    depends_lib         port:libffi port:ncurses port:zlib

    post-extract {
        file rename ${workpath}/${name}-${version}.src ${worksrcpath}/projects/libcxx
    }

    patch.pre_args -p1
    patchfiles-append \
        3002-Fix-missing-long-long-math-prototypes-when-using-the.patch \
        3003-implement-atomic-using-mutex-lock_guard-for-64b-ops-.patch \
        patch-accept-build_types.diff \
        patch-config-availability+ABIhiding.diff

    cmake.install_prefix \
                        /usr
    long_description-append \
                        On Linux, this installs libc++ to ${cmake.install_prefix} \
                        regardless of where MacPorts is installed.

    if {[file exists ${filespath}/find_abi_headers.sh]} {
        set abi_header_dirs [exec ${filespath}/find_abi_headers.sh ${configure.compiler}]
    } else {
        # we're probably executed from the registry, e.g. while deactivating the port
        set abi_header_dirs {}
    }

    configure.args-append \
                        -DLLVM_PATH=${worksrcpath} \
                        -DLLVM_TARGETS_TO_BUILD="X86\;AMDGPU" \
                        -DLIBCXXABI_ENABLE_STATIC=OFF \
                        -DLIBCXX_ENABLE_STATIC=OFF \
                        -DLIBCXX_CXX_ABI=libstdc++ \
                        -DLIBCXX_CXX_ABI_INCLUDE_PATHS="${abi_header_dirs}" \
                        -DLIBCXX_ENABLE_ASSERTIONS=OFF \
                        -DLIBCXX_BENCHMARK_NATIVE_STDLIB=libstdc++

    cmake.save_configure_cmd "log too"

    variant benchmark_libcxx description {build the benchmark against libc++} {
        configure.args-replace \
                        -DLIBCXX_BENCHMARK_NATIVE_STDLIB=libstdc++ \
                        -DLIBCXX_BENCHMARK_NATIVE_STDLIB=libc++
    }
    variant static_abi description {link the ABI library (libstdc++) statically} {
        configure.args-append \
                        -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON
    }

    build.dir           ${configure.dir}/projects/libcxx
    destroot.violate_mtree yes

    test.run            yes
    test.dir            ${configure.dir}
    test.target         check-libcxx

}
