PortSystem              1.0
PortGroup               compiler_blacklist_versions 1.0

name                    libcxx
epoch                   1
version                 6.0.1
categories              lang
platforms               darwin
license                 MIT NCSA
maintainers             {jeremyhu @jeremyhu}
description             libc++ is a new implementation of the C++ standard library with support for C++11 and portions of C++14.
long_description        ${description} \
                        Because objects cannot be passed between different versions of the C++ runtime, this port must \
                        replace the host version in order to be used.  On Snow Leopard and earlier, this is done \
                        automatically because there is no existing host version of this library.  On Lion and later, \
                        users must build the port with +replacemnt_libcxx and install the root manually if they wish \
                        to replace the existing host implementation.

homepage                http://libcxx.llvm.org/

master_sites            http://www.llvm.org/releases/${version}/
dist_subdir             llvm

use_xz                  yes
distname                ${name}-${version}.src
distfiles-append        llvm-${version}.src${extract.suffix}

checksums               ${name}-${version}.src${extract.suffix} \
                        rmd160  ead6a4fa9a0b700c96def8cfe5f7945d807da82c \
                        sha256  7654fbc810a03860e6f01a54c2297a0b9efb04c0b9aa0409251d9bdb3726fc67 \
                        llvm-${version}.src${extract.suffix} \
                        rmd160  6bfc568d0cab4d82ac948f54b18017d8e8ead934 \
                        sha256  b6d6c324f9c71494c0ccaf3dac1f16236d970002b42bb24a6c9e1634f7d0f4e2

if {${os.platform} eq "linux"} {
    PortGroup           cmake 1.1
    worksrcdir          llvm-${version}.src
    depends_lib         port:libedit port:libffi port:ncurses port:zlib

    post-extract {
        file rename ${workpath}/${name}-${version}.src ${worksrcpath}/projects/libcxx
    }

    patch.pre_args -p1
    patchfiles-append \
        3001-Fix-local-and-iterator-when-building-with-Lion-and-n.patch \
        3003-implement-atomic-using-mutex-lock_guard-for-64b-ops-.patch \
        patch-accept-build_types.diff

    cmake.install_prefix \
                        /usr
    long_description-append \
                        On Linux, this installs libc++ to ${cmake.install_prefix} \
                        regardless of where MacPorts is installed.

    if {[file exists ${filespath}/find_abi_headers.sh]} {
        set abi_header_dirs [exec ${filespath}/find_abi_headers.sh ${configure.compiler}]
    } else {
        # we're probably executed from the registry, e.g. while deactivating the port
        set abi_header_dirs {}
    }

    configure.args-append \
                        -DLLVM_PATH=${worksrcpath} \
                        -DLLVM_TARGETS_TO_BUILD="X86\;AMDGPU" \
                        -DLIBCXXABI_ENABLE_STATIC=OFF \
                        -DLIBCXX_ENABLE_STATIC=OFF \
                        -DLIBCXX_CXX_ABI=libstdc++ \
                        -DLIBCXX_CXX_ABI_INCLUDE_PATHS="${abi_header_dirs}" \
                        -DLIBCXX_ENABLE_ASSERTIONS=OFF \
                        -DLIBCXX_BENCHMARK_NATIVE_STDLIB=libstdc++

    cmake.save_configure_cmd "log too"

    variant benchmark_libcxx description {build the benchmark against libc++} {
        configure.args-replace \
                        -DLIBCXX_BENCHMARK_NATIVE_STDLIB=libstdc++ \
                        -DLIBCXX_BENCHMARK_NATIVE_STDLIB=libc++
    }
    variant static_abi description {link the ABI library (libstdc++) statically} {
        configure.args-append \
                        -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON
    }

    build.dir           ${configure.dir}/projects/libcxx
    destroot.violate_mtree yes

    test.run            yes
    test.dir            ${configure.dir}
    test.target         check-libcxx

}
