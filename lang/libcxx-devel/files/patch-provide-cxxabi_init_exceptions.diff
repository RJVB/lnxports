diff --git b/libcxx/cmake/Modules/orig.HandleLibCXXABI.cmake a/libcxx/cmake/Modules/HandleLibCXXABI.cmake
index 34e9a67..f78b66f 100644
--- b/libcxx/cmake/Modules/orig.HandleLibCXXABI.cmake
+++ a/libcxx/cmake/Modules/HandleLibCXXABI.cmake
@@ -85,7 +85,7 @@ endfunction()
 if ("${LIBCXX_CXX_ABI}" STREQUAL "libstdc++")
   add_library(libcxx-abi-headers INTERFACE)
   import_private_headers(libcxx-abi-headers "${LIBCXX_CXX_ABI_INCLUDE_PATHS}"
-    "cxxabi.h;bits/c++config.h;bits/os_defines.h;bits/cpu_defines.h;bits/cxxabi_tweaks.h;bits/cxxabi_forced.h")
+    "cxxabi.h;bits/c++config.h;bits/os_defines.h;bits/cpu_defines.h;bits/cxxabi_tweaks.h;bits/cxxabi_forced.h bits/cxxabi_init_exception.h")
   target_compile_definitions(libcxx-abi-headers INTERFACE "-DLIBSTDCXX" "-D__GLIBCXX__")
 
   import_shared_library(libcxx-abi-shared stdc++)
@@ -98,7 +98,7 @@ if ("${LIBCXX_CXX_ABI}" STREQUAL "libstdc++")
 elseif ("${LIBCXX_CXX_ABI}" STREQUAL "libsupc++")
   add_library(libcxx-abi-headers INTERFACE)
   import_private_headers(libcxx-abi-headers "${LIBCXX_CXX_ABI_INCLUDE_PATHS}"
-    "cxxabi.h;bits/c++config.h;bits/os_defines.h;bits/cpu_defines.h;bits/cxxabi_tweaks.h;bits/cxxabi_forced.h")
+    "cxxabi.h;bits/c++config.h;bits/os_defines.h;bits/cpu_defines.h;bits/cxxabi_tweaks.h;bits/cxxabi_forced.h bits/cxxabi_init_exception.h")
   target_compile_definitions(libcxx-abi-headers INTERFACE "-D__GLIBCXX__")
 
   import_shared_library(libcxx-abi-shared supc++)
diff --git b/libcxx/include/orig.__config_site.in a/libcxx/include/__config_site.in
index c0ea981..0e53f56 100644
--- b/libcxx/include/orig.__config_site.in
+++ a/libcxx/include/__config_site.in
@@ -37,6 +37,11 @@
 // Hardening.
 #cmakedefine01 _LIBCPP_ENABLE_HARDENED_MODE_DEFAULT
 #cmakedefine01 _LIBCPP_ENABLE_DEBUG_MODE_DEFAULT
+// RJVB : https://discourse.llvm.org/t/libc-compiled-with-libstdc-abi-and-cxxabi-h-std-typeinfo/56553
+// has to be defined and I don't feel like figuring out how to achieve that through the buildsystem
+// so we're just hard-coding it.
+#define _LIBCPP_ABI_GLIBCXX
+
 
 // __USE_MINGW_ANSI_STDIO gets redefined on MinGW
 #ifdef __clang__
diff --git b/libcxx/include/orig.typeinfo a/libcxx/include/typeinfo
index 0dc9f09..c61da3d 100644
--- b/libcxx/include/orig.typeinfo
+++ a/libcxx/include/typeinfo
@@ -73,6 +73,14 @@ public:
 #include <vcruntime_typeinfo.h>
 #else
 
+// RJVB : https://discourse.llvm.org/t/libc-compiled-with-libstdc-abi-and-cxxabi-h-std-typeinfo/56553
+#if defined(_LIBCPP_ABI_GLIBCXX)
+namespace __cxxabiv1
+{
+    class __class_type_info;
+}
+#endif
+
 namespace std  // purposefully not using versioning namespace
 {
 
@@ -351,6 +359,15 @@ public:
     bool operator!=(const type_info& __arg) const _NOEXCEPT
     { return !operator==(__arg); }
 #endif
+
+// RJVB : https://discourse.llvm.org/t/libc-compiled-with-libstdc-abi-and-cxxabi-h-std-typeinfo/56553
+#if defined(_LIBCPP_ABI_GLIBCXX)
+    virtual bool __is_pointer_p() const;
+    virtual bool __is_function_p() const;
+    virtual bool __do_catch(const type_info*, void**, unsigned) const;
+    virtual bool __do_upcast(const __cxxabiv1::__class_type_info*,
+void**) const;
+#endif
 };
 #endif // defined(_LIBCPP_ABI_MICROSOFT)
 
