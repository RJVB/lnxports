diff --git b/libcxx/benchmarks/orig2.CMakeLists.txt a/libcxx/benchmarks/CMakeLists.txt
index 0ee0b0b..45dba33 100644
--- b/libcxx/benchmarks/orig2.CMakeLists.txt
+++ a/libcxx/benchmarks/CMakeLists.txt
@@ -9,19 +9,36 @@ option(LIBCXX_BENCHMARK_NATIVE_STDLIB_FROM_MACPORTS "Build against the libstdc++
 
 set(CMAKE_FOLDER "${CMAKE_FOLDER}/Benchmarks")
 
-set(BENCHMARK_LIBCXX_COMPILE_FLAGS
-    -Wno-unused-command-line-argument
-    -nostdinc++
-    -isystem "${LIBCXX_GENERATED_INCLUDE_DIR}"
-    -L${LIBCXX_LIBRARY_DIR}
-    -Wl,-rpath,${LIBCXX_LIBRARY_DIR}
-    ${SANITIZER_FLAGS}
-    )
+if(APPLE)
+    set(CMAKE_OSX_ARCHITECTURES ${CMAKE_SYSTEM_PROCESSOR})
+    message(STATUS "Building benchmarks only for architecture ${CMAKE_SYSTEM_PROCESSOR}")
+endif()
+
+if (EXISTS ${LIBCXX_LIBRARY_DIR})
+  message(STATUS "Using LIBCXX_LIBRARY_DIR=${LIBCXX_LIBRARY_DIR}")
+  set(BENCHMARK_LIBCXX_COMPILE_FLAGS
+      -Wno-unused-command-line-argument
+      -nostdinc++
+      -isystem "${LIBCXX_GENERATED_INCLUDE_DIR}"
+      -L${LIBCXX_LIBRARY_DIR}
+      -Wl,-rpath,${LIBCXX_LIBRARY_DIR}
+      ${SANITIZER_FLAGS}
+      )
+else()
+  message(WARNING "Ignoring invalid LIBCXX_LIBRARY_DIR=${LIBCXX_LIBRARY_DIR}")
+  set(BENCHMARK_LIBCXX_COMPILE_FLAGS
+      -Wno-unused-command-line-argument
+      -nostdinc++
+      -isystem "${LIBCXX_GENERATED_INCLUDE_DIR}"
+      ${SANITIZER_FLAGS}
+      )
+endif()
 if(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR AND NOT APPLE)
   list(APPEND BENCHMARK_LIBCXX_COMPILE_FLAGS
     -isystem "${LIBCXX_GENERATED_INCLUDE_TARGET_DIR}")
 endif()
-if (DEFINED LIBCXX_CXX_ABI_LIBRARY_PATH)
+if (EXISTS LIBCXX_CXX_ABI_LIBRARY_PATH)
+  message(STATUS "Using LIBCXX_CXX_ABI_LIBRARY_PATH=${LIBCXX_CXX_ABI_LIBRARY_PATH}")
   list(APPEND BENCHMARK_LIBCXX_COMPILE_FLAGS
           -L${LIBCXX_CXX_ABI_LIBRARY_PATH}
           -Wl,-rpath,${LIBCXX_CXX_ABI_LIBRARY_PATH})
@@ -35,6 +52,7 @@ ExternalProject_Add(google-benchmark-libcxx
         SOURCE_DIR ${LLVM_THIRD_PARTY_DIR}/benchmark
         INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/benchmark-libcxx
         CMAKE_CACHE_ARGS
+		-DCMAKE_OSX_SYSROOT:STRING=${CMAKE_OSX_SYSROOT}
           -DCMAKE_C_COMPILER:STRING=${CMAKE_C_COMPILER}
           -DCMAKE_CXX_COMPILER:STRING=${CMAKE_CXX_COMPILER}
           -DCMAKE_BUILD_TYPE:STRING=MacPorts
