# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           compiler_blacklist_versions 1.0
PortGroup           LTO 1.0
platform linux {
    PortGroup       meson 1.0
}
PortGroup           active_variants 1.1

platform darwin {
    # May need clock_gettime()
    PortGroup       legacysupport 1.0
    legacysupport.newest_darwin_requires_legacy 15
}

name                mesa
epoch               1
version             21.2.5
if {${subport} eq "${name}"} { revision [expr ${revision} +1]; }
categories          x11 graphics
maintainers         {jeremyhu @jeremyhu} openmaintainer
license             MIT
license_noconflict  py26-libxml2 py27-libxml2
description         Mesa 3D Graphics Library
long_description    Mesa is an open-source implementation of the OpenGL specification, a system for rendering interactive 3D graphics.

homepage            https://www.mesa3d.org
master_sites        https://archive.mesa3d.org/older-versions/21.x
platforms           macosx darwin
use_xz              yes

checksums           rmd160  9fd50ec9a8047140d88097b25afa3c0412e33161 \
                    sha256  8e49585fb760d973723dab6435d0c86f7849b8305b1e6d99f475138d896bacbb
#                     size    15829684

platform linux {
    depends_fetch-append \
                    bin:wget:wget
    # avoid certificate issues on freedesktop.org
    fetch {
        system "wget ${master_sites}/${distname}${extract.suffix} --no-check-certificate --progress=bar:force -O ${distpath}/${distname}${extract.suffix}"
    }

    subport ${name}-crocus-driver {
        description \
                    installs the Crocus driver for i965 GPUs
        long_description \
                    installs Mesa's Crocus driver for i965 GPUs\n\
                    Force the use of this driver via the environment: MESA_LOADER_DRIVER_OVERRIDE=crocus
    }
}

depends_build       port:pkgconfig \
                    port:python39 \
                    port:py39-mako
platform darwin {
    depends_build-append \
                    port:flex \
                    port:bison \
                    port:gindent

    depends_lib     port:expat \
                    port:xorg-xorgproto \
                    port:xorg-libxcb \
                    port:xorg-libX11 \
                    port:xorg-libXext \
                    port:xorg-libXdamage \
                    port:xorg-libXfixes \
                    port:xorg-libXi \
                    port:xorg-libXmu \
                    port:xorg-libXxf86vm
}
platform linux {
    depends_lib-append \
                    port:xorg-libxcb \
                    port:xorg-libXvMC
}

patch.pre_args      -p1
platform darwin {
    patchfiles      0001-applegl-Provide-requirements-of-_SET_DrawBuffers.patch \
                    0002-Hack-to-address-build-failure-when-using-newer-macOS.patch
}

patchfiles-append   patch-meson.diff \
                    patch-verbose-loader_open_device.diff

if {[string match *meson* ${configure.cmd}]} {
    post-patch {
        reinplace "s|'python3'|'python3.9'|g" \
                    ${worksrcpath}/meson.build
    }
    platform darwin {
        patchfiles-append \
                    patch-autoconf-c11.diff
        depends_build   port:cctools

        configure.args-append \
                    -Dplatforms=x11 \
                    -Ddri3=false \
                    -Degl=false \
                    -Dgbm=false \
                    -Dosmesa=false \
                    -Dshared-llvm=false
        set gallium_drivers ""
    }
    platform linux {
        depends_lib-append \
                    port:libelf \
                    port:wayland \
                    port:vulkan-loader
        pre-configure {
            # delete certain auto-generated files that may require changes when building against
            # a different LLVM version.
            file delete [glob -nocomplain ${worksrcpath}/src/gallium/drivers/swr/rasterizer/jitter/gen_*]
        }
        post-patch {
            # should be a patch of course
            reinplace "s|SYS_memfd_create|__NR_memfd_create|g" \
                ${worksrcpath}/src/intel/tools/aub_mem.c \
                ${worksrcpath}/src/intel/vulkan/anv_gem_stubs.c \
                ${worksrcpath}/src/intel/vulkan/anv_allocator.c \
                ${worksrcpath}/src/drm-shim/device.c
        }
        if {${subport} ne "${name}-crocus-driver"} {
            set gallium_drivers "r300,r600,nouveau,svga,virgl,radeonsi,swrast,swr,iris"
            configure.args-append \
                    -Ddri-drivers=i915,i965,r100,r200,nouveau
        } else {
            set gallium_drivers "r300,r600,nouveau,svga,virgl,radeonsi,swrast,swr,iris,crocus"
            configure.args-append \
                    -Ddri-drivers=i965,r100,r200,nouveau
        }
        configure.args-append \
                    -Ddri3=true \
                    -Degl=true \
                    -Dosmesa=false \
                    -Dvulkan-drivers=intel,amd,swrast \
                    -Dplatforms=x11,wayland \
                    -Dgallium-extra-hud=true \
                    -Dgallium-va=true \
                    -Dgallium-opencl=disabled \
                    -Dopencl-spirv=false \
                    -Dopencl-native=false \
                    -Dtools=all \
                    -Dglx-direct=true
        if {[string match *clang* ${configure.compiler}]} {
            configure.args-append \
                    -Dbuild-tests=false
        } else {
            configure.args-append \
                    -Dbuild-tests=true
        }
        pre-configure {
            configure.args-append \
                    -Dgallium-drivers=${gallium_drivers}
        }
        post-destroot {
            if {${subport} ne "${name}-crocus-driver"} {
                if {[file type ${prefix}/lib/${build_arch}-linux-gnu/] eq "directory"} {
                    # a previous version of this port probably installed its libraries there
                    xinstall -m 755 -d ${destroot}${prefix}/lib/${build_arch}-linux-gnu/
                    foreach l [glob ${destroot}${prefix}/lib/*.so ${destroot}${prefix}/lib/*.so.*] {
                        ln -s [file join ".." [file tail ${l}]] ${destroot}${prefix}/lib/${build_arch}-linux-gnu/
                    }
                    # mesa/meson install a bunch of drivers as hardlinks to a single file.
                    # MacPorts's activation mechanism tends to make independent files out of those,
                    # multiplying storage requirements. Avoid this by converting to symlinks pointing
                    # to an appropriate named single file.
                    file rename ${destroot}${prefix}/lib/dri/i915_dri.so \
                        ${destroot}${prefix}/lib/dri/mesa_dri_driver.so
                    foreach d {i830 i915 i965 radeon r200 nouveau_vieux} {
                        ln -sf mesa_dri_driver.so ${destroot}${prefix}/lib/dri/${d}_dri.so
                    }
                    file rename ${destroot}${prefix}/lib/dri/swrast_dri.so \
                        ${destroot}${prefix}/lib/dri/gallium_dri.so
                    foreach d {radeonsi nouveau swrast kms_swrast iris r300 r600 vmwgfx virtio_gpu} {
                        ln -sf gallium_dri.so ${destroot}${prefix}/lib/dri/${d}_dri.so
                    }
                    file rename ${destroot}${prefix}/lib/libXvMCr600.so.1.0.0 \
                        ${destroot}${prefix}/lib/libXvMCgallium.so.1.0.0
                    foreach d {libXvMCr600.so.1.0.0 libXvMCnouveau.so.1.0.0} {
                        ln -sf libXvMCgallium.so.1.0.0 ${destroot}${prefix}/lib/${d}
                    }
                    file rename ${destroot}${prefix}/lib/dri/r600_drv_video.so \
                        ${destroot}${prefix}/lib/dri/gallium_drv_video.so
                    foreach d {r600 radeonsi nouveau} {
                        ln -sf gallium_drv_video.so ${destroot}${prefix}/lib/dri/${d}_drv_video.so
                    }
                }
            } else {
                # we only want the ${prefix}/lib/dri/crocus_dri.so driver
                file rename ${destroot}${prefix} ${destroot}/tmp
                xinstall -m 755 -d ${destroot}${prefix}/lib/dri
                file rename ${destroot}/tmp/lib/dri/crocus_dri.so ${destroot}${prefix}/lib/dri/crocus_dri.so
                file delete -force ${destroot}/tmp
            }
        }
    }
} else {
    post-patch {
        system -W ${worksrcpath} "autoreconf -fvi"
    }
    configure.args  --enable-autotools \
                    --disable-dependency-tracking \
                    --disable-silent-rules
    platform darwin {
        configure.args-append \
                    --with-platforms=x11 \
                    --disable-dri3 \
                    --disable-egl \
                    --disable-gbm \
                    --disable-osmesa \
                    --disable-llvm-shared-libs
        set gallium_drivers ""
    }
}

platform darwin {
    configure.env-append \
                    INDENT=${prefix}/bin/gindent
}
# mesa builds with -std=c99 but uses timespec_get() which was added in c11, so this works around that bug
configure.env-append \
                    export ac_cv_func_timespec_get=no \
                    STRIP=echo

# This project is affected by a bug in Apple's gcc driver driver that I fixed in the apple-gcc42 port.
# Use that or clang.
# clang-700.1.81 (Xcode 7.2.1) fails at:
#     disk_cache.c:637:7: error: cannot compile this atomic library call yet
#           p_atomic_add(cache->size, - (uint64_t)sb.st_blocks * 512);
#           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compiler.blacklist gcc-3.3 gcc-4.0 gcc-4.2 llvm-gcc-4.2 {clang < 800}

platform darwin {
    if {${os.major} < 11} {

        # versions > 17 do not presently compile on systems prior to 10.7
        version             17.1.6 ;    revision 2
        checksums           rmd160  43a9b758462316ad344ccdccf72d6d0ce295620e \
                            sha256  0686deadde1f126b20aa67e47e8c50502043eee4ecdf60d5009ffda3cebfee50
#                             size    9868932

        # this option does nothing in mesa 17.x and generates warnings
        configure.args-delete --enable-autotools

        # overwrite previous patchfiles, and then add as needed below
        patchfiles \
            mesa17-0001-glxcmds-Fix-a-typo-in-the-__APPLE__-codepath.patch \
            mesa17-0002-glext.h-Add-missing-include-of-stddef.h-for-ptrdiff_.patch \
            mesa17-0003-applegl-Provide-requirements-of-_SET_DrawBuffers.patch \
            mesa17-0004-mesa-Deal-with-size-differences-between-GLuint-and-G.patch

        # https://bugs.freedesktop.org/show_bug.cgi?id=89088
        configure.env-append INDENT=cat

        # not needed if legacysupport is used
        # patchfiles-append static-strndup.patch
    }

    if {${os.major} < 10} {
        # https://trac.macports.org/ticket/52811
        patchfiles-append patch-include-GL-mesa_glinterop_h.diff
    }

    if {${os.major} < 11} {
        # See https://trac.macports.org/ticket/54643
        if {[string match *meson* ${configure.cmd}]} {
            patchfiles-append \
                    patch-disable-glx_tls.diff
        } else {
            configure.args-append \
                    --disable-glx-tls
        }
    }

    if {${os.major} < 14} {
        # See https://trac.macports.org/ticket/54638
        # See https://trac.macports.org/ticket/54643
        # disk_cache uses the fstatat() function
        patchfiles-append disable_shader_cache.patch
        if {[string match *meson* ${configure.cmd}]} {
            configure.args-append \
                    -Dshader-cache=false
        }
    }

    if { ![file exists /usr/include/Xplugin.h] } {
        # Xplugin.h is missing on Tiger
        configure.cppflags-append -I${filespath}/include
    }

    pre-configure {
        if { ![file exists /usr/lib/libXplugin.dylib] } {
            ui_error "Detected a problem with your development environment.  Please work around it by executing:"
            ui_error "sudo ln -s libXplugin.1.dylib /usr/lib/libXplugin.dylib"
            return -code error "missing libXplugin.dylib"
        }
    }
}

if {![string match *meson* ${configure.cmd}] && [string match *gcc* ${configure.compiler}]} {
    # Older gcc fail to do -Werror=missing-prototypes correctly
    # https://trac.macports.org/ticket/46827
    patchfiles-append no-missing-prototypes-error.patch
}

configure.cppflags-delete -I${prefix}/include
# configure.cxxflags-append -std=c++11

platform linux {
    configure.ldflags-append -Wl,-rpath,${prefix}/${build_arch}-linux-gnu
    post-extract {
        if {![file exists /usr/include/linux/memfd.h]} {
            set kernel [exec uname -r]
            if {![file exists ${worksrcpath}/include/linux/memfd.h]} {
                xinstall -m 755 -d ${worksrcpath}/include/linux
                ln -s /usr/src/linux-headers-${kernel}/include/linux/memfd.h ${worksrcpath}/include/linux/
                xinstall -m 755 -d ${worksrcpath}/include/asm-generic
                ln -s /usr/src/linux-headers-${kernel}/include/asm-generic/hugetlb_encode.h ${worksrcpath}/include/asm-generic
            }
        }
    }
}

platform darwin {
    variant egl description {enable EGL support} {}
    if {[variant_isset egl]} {
        depends_lib-append      port:xorg-libxshmfence
        if {[string match *meson* ${configure.cmd}]} {
            configure.args-replace \
                               -Degl=false \
                               -Degl=true
        } else {
            configure.args-replace \
                                --disable-egl \
                                --enable-egl
        }
        set gallium_drivers swrast
        patchfiles-append       patch-support-egl_dri2.diff
    }

    variant llvm64bit description {The +llvm variants are effective for the 64bit components of universal builds only} {}
}

    # v21.2.5 seems to build against a narrow range of LLVM versions only; >= 11 specified and
    # my attempt against LLVM 14 failed.
    set lldversions {11 12 13}
    set llvariant ""
    foreach ldv ${lldversions} {
        set llv [join [lrange [split ${ldv} .] 0 1] ""]
        set conflist ""
        foreach v ${lldversions} {
            if {${v} ne ${ldv}} {
                set v [join [lrange [split ${v} .] 0 1] ""]
                set conflist "${conflist} llvm${v}"
            }
        }
        variant llvm${llv} conflicts ${conflist} description "Use LLVM/Clang ${ldv} for the \"accelerated\" Gallium swrast driver" {}
        if {[variant_exists llvm${llv}] && [variant_isset llvm${llv}]} {
            set llvariant llvm${llv}
        }
    }
    foreach ldv ${lldversions} {
        set llv [join [lrange [split ${ldv} .] 0 1] ""]
        if {[variant_isset llvm${llv}]} {
            if {!([variant_exists llvm${llv}] && [variant_isset llvm64bit])} {
                depends_lib-append \
                    port:llvm-${ldv}
            } else {
                # This is a hack; build and runtime dependencies are agnostic of the +universal variant
                # *if depends_skip_archcheck is also set* and
                # so the only way to register some kind of dependency on the required LLVM ports
                # without forcing them to be installed +universal too.
                depends_build-append \
                    port:llvm-${ldv}
                depends_run-append \
                    port:llvm-${ldv}
                depends_skip_archcheck \
                    llvm-${ldv} clang-${ldv}
            }
            set llvm_port llvm-${ldv}
            if {[string match *meson* ${configure.cmd}]} {
                if {[variant_exists llvm${llv}] && [variant_isset llvm64bit]} {
                    ui_warning "+llvm64bit is to be implemented and currently ignored"
                }
                configure.args-append \
                    -Dllvm=enabled
                set PATH $env(PATH)
                set env(PATH) ${prefix}/libexec/llvm-${ldv}/bin:${PATH}
                configure.ldflags-append -Wl,-rpath,${prefix}/libexec/llvm-${ldv}/lib
            } else {
                if {[variant_exists llvm${llv}] && [variant_isset llvm64bit]} {
                    lappend merger_configure_args(x86_64) \
                        --enable-llvm \
                        --with-llvm-prefix=${prefix}/libexec/llvm-${ldv}
                    lappend merger_configure_args(arm64) \
                        --enable-llvm \
                        --with-llvm-prefix=${prefix}/libexec/llvm-${ldv}
                } else {
                    configure.args-append \
                        --enable-llvm \
                        --with-llvm-prefix=${prefix}/libexec/llvm-${ldv}
                }
            }
        }
    }

if {${subport} eq "${name}"} {
    variant osmesa description {enable OSMesa library} {}
    if {[variant_isset osmesa]} {
        if {[string match *meson* ${configure.cmd}]} {
            configure.args-replace \
                    -Dosmesa=false \
                    -Dosmesa=true
        } else {
            configure.args-replace \
                    --disable-osmesa \
                    --enable-osmesa
        }
    }

    variant opencl conflicts opencl_icd description {enable OpenCL (standalone variant)} {}
    variant opencl_icd conflicts opencl description {enable OpenCL (ICD variant: PREFERRED!)} {}
    if {[variant_isset opencl]} {
        conflicts-append port:ocl-icd
        depends_build-append port:libclc
        if {[string match *meson* ${configure.cmd}]} {
            configure.args-replace \
                    -Dgallium-opencl=disabled \
                    -Dgallium-opencl=standalone
            configure.args-replace \
                    -Dopencl-native=false \
                    -Dopencl-native=true
        } else {
            configure.args-replace \
                    --disable-opencl \
                    --enable-opencl
        }
        if {[info exists llvm_port]} {
            depends_lib-append port:[string map {"llvm" "clang"} ${llvm_port}]
            require_active_variants ${llvm_port} "" nortti
        } else {
            pre-configure {
                ui_error "+opencl requires port:clang-XY and one of the LLVM variants"
                return -code error "LLVM required"
            }
        }
    } elseif {[variant_isset opencl_icd]} {
        depends_build-append port:libclc
        depends_lib-append   port:ocl-icd
        configure.args-replace \
                    -Dgallium-opencl=disabled \
                    -Dgallium-opencl=icd
        configure.args-replace \
                    -Dopencl-native=false \
                    -Dopencl-native=true
        if {[info exists llvm_port]} {
            depends_lib-append port:[string map {"llvm" "clang"} ${llvm_port}]
            require_active_variants ${llvm_port} "" nortti
        } else {
            pre-configure {
                ui_error "+opencl_icd requires port:clang-XY and one of the LLVM variants"
                return -code error "LLVM required"
            }
        }
    }

    default_variants-append +osmesa
}

# variant i915_gallium description {build the Gallium3D i915 and crocus drivers instead of the i915 DRI driver} {}
# if {[variant_isset i915_gallium]} {
#     set gallium_drivers "${gallium_drivers},i915,crocus"
#     configure.args-replace \
#                     -Ddri-drivers=auto \
#                     -Ddri-drivers=i965,r100,r200,nouveau
# }
# 
if {[string match *meson* ${configure.cmd}]} {
    build.post_args-append -k 0
} else {
    build.post_args-append -k
}

livecheck.type  regex
livecheck.url   ${homepage}
livecheck.regex {relnotes/([0-9.]+)\.html}


if {[string match *meson* ${configure.cmd}]} {
    meson.save_configure_cmd "install log"
} else {
    configure.post_args-append "|& tee -a ${workpath}/.macports.${subport}.configure.log'"
    pre-configure {
        set cmd [join "${configure.cmd} ${configure.pre_args} ${configure.args}"]
        configure.pre_args-prepend "-cf '${configure.cmd} "
        configure.cmd "/bin/csh"
        ui_debug "configure command set to `${configure.cmd} ${configure.pre_args} ${configure.args} ${configure.post_args}`"
        system "echo '## ${cmd}' > ${workpath}/.macports.${subport}.configure.log"
    }
    post-configure {
        if {![catch {set fd [open "${workpath}/.macports.${subport}.configure.cmd" "w"]} err]} {
            foreach var [array names ::env] {
                puts ${fd} "${var}=$::env(${var})"
            }
            puts ${fd} "[join [lrange [split ${configure.env} " "] 0 end] "\n"]\n"
            puts ${fd} "cd ${worksrcpath}"
            if {[info exists configure.post_args]} {
                puts ${fd} "${configure.cmd} ${configure.pre_args} ${configure.args} ${configure.post_args}"
            } else {
                puts ${fd} "${configure.cmd} ${configure.pre_args} ${configure.args}"
            }
        } else {
            if {[info exists fd]} {
                unset fd
            }
        }
    }
}

post-activate {
    ui_msg "--->    ${subport} activated!"
}
