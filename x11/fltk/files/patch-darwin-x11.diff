diff --git a/FL/Enumerations.H b/FL/Enumerations.H
index 2742be824..d5b242d98 100644
--- a/FL/Enumerations.H
+++ b/FL/Enumerations.H
@@ -571,13 +571,13 @@ enum Fl_When { // Fl_Widget::when():
 #define FL_KEY_MASK 0x0000ffff		///< All keys are 16 bit for now 
 					//   FIXME: Unicode needs 24 bits!
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 #  define FL_COMMAND	FL_META		///< An alias for FL_CTRL on WIN32 and X11, or FL_META on MacOS X
 #  define FL_CONTROL 	FL_CTRL		///< An alias for FL_META on WIN32 and X11, or FL_CTRL on MacOS X
 #else
 #  define FL_COMMAND	FL_CTRL		///< An alias for FL_CTRL on WIN32 and X11, or FL_META on MacOS X
 #  define FL_CONTROL	FL_META		///< An alias for FL_META on WIN32 and X11, or FL_CTRL on MacOS X
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
 /*@}*/		// group: Event States
 
diff --git a/FL/Fl.H b/FL/Fl.H
index 00f589f2b..24de7d537 100644
--- a/FL/Fl.H
+++ b/FL/Fl.H
@@ -165,7 +165,7 @@ public: // should be private!
   static Fl_Window* grab_;
   static int compose_state; // used for dead keys (WIN32) or marked text (MacOS)
   static void call_screen_init(); // recompute screen number and dimensions
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   static void reset_marked_text(); // resets marked text
   static void insertion_point_location(int x, int y, int height); // sets window coordinates & height of insertion point
 #endif
@@ -873,7 +873,7 @@ int main() {
   static void copy(const char* stuff, int len, int destination = 0);
 #endif
   
-#if !(defined(__APPLE__) || defined(WIN32) || defined(FL_DOXYGEN))
+#if !(defined(__APPLE_QUARTZ__) || defined(WIN32) || defined(FL_DOXYGEN))
   static void copy_image(const unsigned char* data, int W, int H, int destination = 0); // platform dependent
 #endif
   /**
diff --git a/FL/Fl_Bitmap.H b/FL/Fl_Bitmap.H
index a5a9b4590..d500e005b 100644
--- a/FL/Fl_Bitmap.H
+++ b/FL/Fl_Bitmap.H
@@ -45,13 +45,13 @@ public:
   private:
   int start(int XP, int YP, int WP, int HP, int &cx, int &cy, 
 	    int &X, int &Y, int &W, int &H);
-#if defined(__APPLE__) || defined(WIN32)
+#if defined(__APPLE_QUARTZ__) || defined(WIN32)
   /** for internal use */
   void *id_;
 #else
   /** for internal use */
   unsigned id_;
-#endif // __APPLE__ || WIN32
+#endif // __APPLE_QUARTZ__ || WIN32
 
   public:
 
diff --git a/FL/Fl_Copy_Surface.H b/FL/Fl_Copy_Surface.H
index 6b3f50799..b64f5c816 100644
--- a/FL/Fl_Copy_Surface.H
+++ b/FL/Fl_Copy_Surface.H
@@ -53,7 +53,7 @@ private:
   int width;
   int height;
   Fl_Paged_Device *helper;
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   CFMutableDataRef pdfdata;
   CGContextRef oldgc;
   CGContextRef gc;
@@ -83,7 +83,7 @@ public:
   int h() { return height; }
 };
 
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
 
 /* Mac class to reimplement Fl_Paged_Device::printable_rect() */
 class FL_EXPORT Fl_Quartz_Surface_ : public Fl_System_Printer {
diff --git a/FL/Fl_Device.H b/FL/Fl_Device.H
index a476a91d8..51b819638 100644
--- a/FL/Fl_Device.H
+++ b/FL/Fl_Device.H
@@ -52,7 +52,7 @@ typedef void (*Fl_Draw_Image_Cb)(void* data,int x,int y,int w,uchar* buf);
 #ifdef WIN32
 typedef int COORD_T;
 #  define XPOINT XPoint
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
 typedef float COORD_T;
 typedef struct { float x; float y; } QPoint;
 #  define XPOINT QPoint
@@ -164,7 +164,7 @@ protected:
   friend void fl_line(int x, int y, int x1, int y1);
   friend void fl_line(int x, int y, int x1, int y1, int x2, int y2);
   friend void fl_draw(const char *str, int n, int x, int y);
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   friend void fl_draw(const char *str, int n, float x, float y);
 #endif
   friend void fl_draw(int angle, const char *str, int n, int x, int y);
@@ -249,7 +249,7 @@ protected:
   virtual void line(int x, int y, int x1, int y1, int x2, int y2);
   /** \brief see fl_draw(const char *str, int n, int x, int y). */
   virtual void draw(const char *str, int n, int x, int y) {}
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   virtual void draw(const char *str, int n, float x, float y) { draw(str, n, (int)(x+0.5), (int)(y+0.5));}
 #endif
   /** \brief see fl_draw(int angle, const char *str, int n, int x, int y). */
@@ -412,7 +412,7 @@ public:
   virtual ~Fl_Graphics_Driver() { if (p) free(p); }
 };
 
-#if defined(__APPLE__) || defined(FL_DOXYGEN)
+#if defined(__APPLE_QUARTZ__) || defined(FL_DOXYGEN)
 /**
  \brief The Mac OS X-specific graphics class.
  *
@@ -425,7 +425,7 @@ public:
   void color(Fl_Color c);
   void color(uchar r, uchar g, uchar b);
   void draw(const char* str, int n, int x, int y);
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   void draw(const char *str, int n, float x, float y);
 #endif
   void draw(int angle, const char *str, int n, int x, int y);
@@ -498,7 +498,7 @@ public:
   int draw_scaled(Fl_Image *img, int XP, int YP, int WP, int HP);
 };
 #endif
-#if !(defined(__APPLE__) || defined(WIN32))
+#if !(defined(__APPLE_QUARTZ__) || defined(WIN32))
 /**
  \brief The Xlib-specific graphics class.
  *
@@ -585,7 +585,7 @@ public:
  */
 class FL_EXPORT Fl_Display_Device : public Fl_Surface_Device {
   static Fl_Display_Device *_display; // the platform display device
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   friend class Fl_X;
   friend class Fl_Graphics_Driver;
   static bool high_res_window_; //< true when drawing to a window of a retina display (Mac OS X only)
diff --git a/FL/Fl_Gl_Window.H b/FL/Fl_Gl_Window.H
index ceb710469..335ce32dd 100644
--- a/FL/Fl_Gl_Window.H
+++ b/FL/Fl_Gl_Window.H
@@ -231,7 +231,7 @@ public:
    Fl::event_y() to the pixel units used by the OpenGL source code.
    \version 1.3.4
    */
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   float pixels_per_unit();
 #else
   float pixels_per_unit() { return 1; }
diff --git a/FL/Fl_Image.H b/FL/Fl_Image.H
index af0926146..dd2a0bc2a 100644
--- a/FL/Fl_Image.H
+++ b/FL/Fl_Image.H
@@ -216,13 +216,13 @@ public:
 
   private:
 
-#if defined(__APPLE__) || defined(WIN32)
+#if defined(__APPLE_QUARTZ__) || defined(WIN32)
   void *id_; // for internal use
   void *mask_; // for internal use (mask bitmap)
 #else
   unsigned id_; // for internal use
   unsigned mask_; // for internal use (mask bitmap)
-#endif // __APPLE__ || WIN32
+#endif // __APPLE_QUARTZ__ || WIN32
 
 public:
 
diff --git a/FL/Fl_Image_Surface.H b/FL/Fl_Image_Surface.H
index fd0562107..ddcd73bdf 100644
--- a/FL/Fl_Image_Surface.H
+++ b/FL/Fl_Image_Surface.H
@@ -51,7 +51,7 @@ private:
   int width;
   int height;
   Fl_Paged_Device *helper;
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 #elif defined(WIN32)
   HDC _sgc; 
   Window _sw; 
@@ -79,7 +79,7 @@ public:
   Fl_Shared_Image *highres_image();
 };
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 /* Mac class to implement translate()/untranslate() for a flipped bitmap graphics context */
 class FL_EXPORT Fl_Quartz_Flipped_Surface_ : public Fl_Quartz_Surface_ {
 public:
diff --git a/FL/Fl_Menu_Item.H b/FL/Fl_Menu_Item.H
index 8b19a798b..27a719efc 100644
--- a/FL/Fl_Menu_Item.H
+++ b/FL/Fl_Menu_Item.H
@@ -22,7 +22,7 @@
 #  include "Fl_Widget.H"
 #  include "Fl_Image.H"
 
-#  if defined(__APPLE__) && defined(check)
+#  if defined(__APPLE_QUARTZ__) && defined(check)
 #    undef check
 #  endif
 
diff --git a/FL/Fl_Native_File_Chooser.H b/FL/Fl_Native_File_Chooser.H
index b025f69c6..3b9d623f6 100644
--- a/FL/Fl_Native_File_Chooser.H
+++ b/FL/Fl_Native_File_Chooser.H
@@ -39,12 +39,12 @@ typedef void fl_BROWSEINFOW;
 #endif
 
 // Use Apple's chooser
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 #  define MAXFILTERS	80
 #endif
 
 // All else falls back to FLTK's own chooser
-#if ! defined(__APPLE__) && !defined(WIN32)
+#if ! defined(__APPLE_QUARTZ__) && !defined(WIN32)
 #  include <FL/Fl_File_Chooser.H>
 #else
 #  include <FL/filename.H>	// FL_EXPORT
@@ -195,7 +195,7 @@ private:
   void add_filter(const char *, const char *);
 #endif
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 private:
   int             _btype;		// kind-of browser to show()
   int             _options;		// general options
@@ -233,7 +233,7 @@ private:
   int runmodal();
 #endif
 
-#if ! defined(__APPLE__) && !defined(WIN32)
+#if ! defined(__APPLE_QUARTZ__) && !defined(WIN32)
 private:
 #if FLTK_ABI_VERSION <= 10302
   int   _btype;			// kind-of browser to show()
@@ -255,7 +255,7 @@ private:
 #endif
 };
 
-#if !defined(__APPLE__) && !defined(WIN32)
+#if !defined(__APPLE_QUARTZ__) && !defined(WIN32)
 class FL_EXPORT Fl_FLTK_File_Chooser {
   friend class Fl_Native_File_Chooser;
 protected:
@@ -339,7 +339,7 @@ private:
   static int custom_gtk_filter_function(const GtkFileFilterInfo*, Fl_GTK_File_Chooser::pair*);
   static void free_pair(pair *p);
 };
-#endif // !defined(__APPLE__) && !defined(WIN32)
+#endif // !defined(__APPLE_QUARTZ__) && !defined(WIN32)
 
 #endif /*FL_NATIVE_FILE_CHOOSER_H*/
 
diff --git a/FL/Fl_Paged_Device.H b/FL/Fl_Paged_Device.H
index 4f47e075c..8975a16a5 100644
--- a/FL/Fl_Paged_Device.H
+++ b/FL/Fl_Paged_Device.H
@@ -36,7 +36,7 @@
  or Fl_PostScript_File_Device instead.
  */
 class FL_EXPORT Fl_Paged_Device : public Fl_Surface_Device {
-#ifndef __APPLE__
+#ifndef __APPLE_QUARTZ__
   friend class Fl_Copy_Surface;
   friend class Fl_Image_Surface;
   void draw_decorated_window(Fl_Window *win, int x_offset, int y_offset, Fl_Surface_Device *toset);
diff --git a/FL/Fl_Pixmap.H b/FL/Fl_Pixmap.H
index 6f93da7e8..ab3fad94a 100644
--- a/FL/Fl_Pixmap.H
+++ b/FL/Fl_Pixmap.H
@@ -65,13 +65,13 @@ class FL_EXPORT Fl_Pixmap : public Fl_Image {
 #endif
   UINT pixmap_bg_color; // RGB color used for pixmap background
 #endif // WIN32
-#if defined(__APPLE__) || defined(WIN32)
+#if defined(__APPLE_QUARTZ__) || defined(WIN32)
   void *id_; // for internal use
   void *mask_; // for internal use (mask bitmap)
 #else
   unsigned id_; // for internal use
   unsigned mask_; // for internal use (mask bitmap)
-#endif // __APPLE__ || WIN32
+#endif // __APPLE_QUARTZ__ || WIN32
   
   public:
 
diff --git a/FL/Fl_PostScript.H b/FL/Fl_PostScript.H
index c635e88ef..6f2a88308 100644
--- a/FL/Fl_PostScript.H
+++ b/FL/Fl_PostScript.H
@@ -199,7 +199,7 @@ class Clip {
   void draw_image_mono(Fl_Draw_Image_Cb call, void* data, int x,int y, int w, int h, int delta=1);
       
   void draw(const char* s, int nBytes, int x, int y) {transformed_draw(s,nBytes,x,y); };
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   void draw(const char* s, int nBytes, float x, float y) {transformed_draw(s,nBytes,x,y); };
 #endif
   void draw(int angle, const char *str, int n, int x, int y);
@@ -224,7 +224,7 @@ class Clip {
  two variants of which are usable and allow to specify what page format and layout are desired.
  */
 class FL_EXPORT Fl_PostScript_File_Device : public Fl_Paged_Device {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   CGContextRef gc;
 #endif
 protected:
@@ -250,7 +250,7 @@ public:
   void untranslate(void);
   int end_page (void);    
   void end_job(void);
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   void set_current() { fl_gc = gc; Fl_Paged_Device::set_current(); }
 #endif
   
diff --git a/FL/Fl_Printer.H b/FL/Fl_Printer.H
index 7ff255f24..f63690326 100644
--- a/FL/Fl_Printer.H
+++ b/FL/Fl_Printer.H
@@ -30,13 +30,13 @@
 #include <FL/Fl_RGB_Image.H>
 #include <FL/Fl_Bitmap.H>
 #include <stdio.h>
-#if !(defined(__APPLE__) || defined(WIN32))
+#if !(defined(__APPLE_QUARTZ__) || defined(WIN32))
 #include <FL/Fl_PostScript.H>
 #elif defined(WIN32)
 #include <commdlg.h>
 #endif
 
-#if defined(__APPLE__) || defined(WIN32) || defined(FL_DOXYGEN)
+#if defined(__APPLE_QUARTZ__) || defined(WIN32) || defined(FL_DOXYGEN)
 /**
  Print support under MSWindows and Mac OS.
 
@@ -50,7 +50,7 @@ private:
   /** \brief the printer's graphics context, if there's one, NULL otherwise */
   void *gc; 
   void set_current(void);
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   float scale_x;
   float scale_y;
   float angle; // rotation angle in radians
@@ -84,7 +84,7 @@ public:
   void untranslate(void);
   int end_page (void);
   void end_job (void);
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   void print_window_part(Fl_Window *win, int x, int y, int w, int h, int delta_x, int delta_y);
 #endif
   /** \brief The destructor */
@@ -93,7 +93,7 @@ public:
 
 #endif
   
-#if !(defined(__APPLE__) || defined(WIN32) )
+#if !(defined(__APPLE_QUARTZ__) || defined(WIN32) )
 /**
  Print support under Unix/Linux.
  
@@ -222,7 +222,7 @@ public:
   static const char *property_cancel;
   /** \} */ 
 private:
-#if defined(WIN32) || defined(__APPLE__)
+#if defined(WIN32) || defined(__APPLE_QUARTZ__)
   Fl_System_Printer *printer;
 #else
   Fl_PostScript_Printer *printer;
diff --git a/FL/Fl_Sys_Menu_Bar.H b/FL/Fl_Sys_Menu_Bar.H
index be47a3408..cd7763857 100644
--- a/FL/Fl_Sys_Menu_Bar.H
+++ b/FL/Fl_Sys_Menu_Bar.H
@@ -22,7 +22,7 @@
 #include "Fl_Menu_Bar.H"
 #include "x.H"
 
-#if defined(__APPLE__) || defined(FL_DOXYGEN)
+#if defined(__APPLE_QUARTZ__) || defined(FL_DOXYGEN)
 
 /**
   A class to create, modify and delete menus that appear on Mac OS X in the menu bar at the top of the screen.
@@ -125,7 +125,7 @@ public:
 typedef Fl_Menu_Bar Fl_Sys_Menu_Bar;
 #endif
 
-#endif // defined(__APPLE__) || defined(FL_DOXYGEN)
+#endif // defined(__APPLE_QUARTZ__) || defined(FL_DOXYGEN)
 
 #endif // Fl_Sys_Menu_Bar_H
 
diff --git a/FL/Fl_Tooltip.H b/FL/Fl_Tooltip.H
index 300c921dd..91c6fed0b 100644
--- a/FL/Fl_Tooltip.H
+++ b/FL/Fl_Tooltip.H
@@ -97,7 +97,7 @@ public:
   static int wrap_width() { return 400; }
 #endif
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   // the unique tooltip window
   static Fl_Window* current_window(void);
 #endif
diff --git a/FL/Fl_Window.H b/FL/Fl_Window.H
index f84ab1c9a..1b9e59af9 100644
--- a/FL/Fl_Window.H
+++ b/FL/Fl_Window.H
@@ -126,7 +126,7 @@ protected:
     int lw_; ///<  width of shape image
     int lh_; ///<  height of shape image
     Fl_Image* shape_; ///<  shape image
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
     typedef struct CGImage* CGImageRef;
     CGImageRef mask;
 #endif
@@ -147,7 +147,7 @@ public:
    \see void shape(const Fl_Image* img)
    */
   inline void shape(const Fl_Image& b) { shape(&b); }
-#if ! (defined(WIN32) || defined(__APPLE__) || defined(FL_DOXYGEN))
+#if ! (defined(WIN32) || defined(__APPLE_QUARTZ__) || defined(FL_DOXYGEN))
   void combine_mask(void);
 #endif
 private:
diff --git a/FL/fl_utf8.h b/FL/fl_utf8.h
index 2121198df..667fa8381 100644
--- a/FL/fl_utf8.h
+++ b/FL/fl_utf8.h
@@ -53,7 +53,7 @@
 #    undef chdir
 #    define chdir _chdir
 #  endif
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
 #  include <wchar.h>
 #  include <sys/stat.h>
 #  define xchar wchar_t
diff --git a/FL/gl.h b/FL/gl.h
index bb0881df1..907bef4e3 100644
--- a/FL/gl.h
+++ b/FL/gl.h
@@ -54,11 +54,11 @@
 #    endif
 #  endif
 
-#  ifdef __APPLE__
+#  ifdef __APPLE_QUARTZ__
 #    include <OpenGL/gl.h>
 #  else
 #    include <GL/gl.h>
-#  endif  // __APPLE__
+#  endif  // __APPLE_QUARTZ__
 
 FL_EXPORT void gl_start();
 FL_EXPORT void gl_finish();
@@ -89,7 +89,7 @@ FL_EXPORT void gl_draw(const char*, int n, int x, int y);
 FL_EXPORT void gl_draw(const char*, int n, float x, float y);
 FL_EXPORT void gl_draw(const char*, int x, int y, int w, int h, Fl_Align);
 FL_EXPORT void gl_measure(const char*, int& x, int& y);
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 extern FL_EXPORT void gl_texture_pile_height(int max);
 extern FL_EXPORT int gl_texture_pile_height();
 #endif
diff --git a/FL/glu.h b/FL/glu.h
index 6795b762f..793f2aa77 100644
--- a/FL/glu.h
+++ b/FL/glu.h
@@ -38,7 +38,7 @@
 #    endif
 #  endif
 
-#  ifdef __APPLE__
+#  ifdef __APPLE_QUARTZ__
 #    include <OpenGL/glu.h>
 #  else
 #    include <GL/glu.h>
diff --git a/FL/mac.H b/FL/mac.H
index cc752fc64..f85c0f136 100644
--- a/FL/mac.H
+++ b/FL/mac.H
@@ -17,7 +17,7 @@
 //
 
 // Do not directly include this file, instead use <FL/x.H>.  It will
-// include this file if "__APPLE__" is defined.  This is to encourage
+// include this file if "__APPLE_QUARTZ__" is defined.  This is to encourage
 // portability of even the system-specific code...
 #ifndef FL_DOXYGEN
 
diff --git a/FL/x.H b/FL/x.H
index 702ac86fe..b58df1d49 100644
--- a/FL/x.H
+++ b/FL/x.H
@@ -25,10 +25,13 @@
 #  define Fl_X_H
 
 #  include "Enumerations.H"
+#ifdef __APPLE__
+#include "config.h"
+#endif
 
 #  ifdef WIN32
 #    include "win32.H"
-#  elif defined(__APPLE__)
+#  elif defined(__APPLE_QUARTZ__)
 #    include "mac.H"
 #  else
 #    if defined(_ABIN32) || defined(_ABI64) // fix for broken SGI Irix X .h files
diff --git a/cairo/Fl_Cairo.cxx b/cairo/Fl_Cairo.cxx
index 6207d3c2e..e16f36f7a 100644
--- a/cairo/Fl_Cairo.cxx
+++ b/cairo/Fl_Cairo.cxx
@@ -22,7 +22,7 @@
 #include <FL/Fl.H>
 #include <FL/x.H>
 #include <FL/Fl_Window.H>
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 #include <Carbon/Carbon.h>
 #endif
 
diff --git a/examples/OpenGL3-glut-test.cxx b/examples/OpenGL3-glut-test.cxx
index dd92f18c0..4983db077 100644
--- a/examples/OpenGL3-glut-test.cxx
+++ b/examples/OpenGL3-glut-test.cxx
@@ -15,7 +15,7 @@
 //
 
 #include <stdio.h>
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
 #  define GL_DO_NOT_WARN_IF_MULTI_GL_VERSION_HEADERS_INCLUDED 1
 #  include <OpenGL/gl3.h> // defines OpenGL 3.0+ functions
 #else
@@ -107,7 +107,7 @@ void initShaders(void)
   v = glCreateShader(GL_VERTEX_SHADER);
   f = glCreateShader(GL_FRAGMENT_SHADER);
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 #define SHADING_LANG_VERS "140"
 #else
 #define SHADING_LANG_VERS "130"
@@ -196,7 +196,7 @@ int main (int argc, char* argv[])
   glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | FL_OPENGL3);
   glutInitWindowSize(400, 400);
   glutCreateWindow("Triangle Test");
-#ifndef __APPLE__
+#ifndef __APPLE_QUARTZ__
   GLenum err = glewInit(); // defines pters to functions of OpenGL V 1.2 and above
   if (err) Fl::error("glewInit() failed returning %u", err);
   fprintf(stderr, "Status: Using GLEW %s\n", glewGetString(GLEW_VERSION));
diff --git a/examples/OpenGL3test.cxx b/examples/OpenGL3test.cxx
index a1545505f..167c2a8d6 100644
--- a/examples/OpenGL3test.cxx
+++ b/examples/OpenGL3test.cxx
@@ -24,7 +24,7 @@
 #include <FL/Fl_Light_Button.H>
 #include <FL/Fl_Text_Display.H>
 #include <FL/Fl_Text_Buffer.H>
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
 #  include <OpenGL/gl3.h> // defines OpenGL 3.0+ functions
 #else
 #  if defined(WIN32)
@@ -145,7 +145,7 @@ public:
     if (first && event == FL_SHOW && shown()) {
       first = 0;
       make_current();
-#ifndef __APPLE__
+#ifndef __APPLE_QUARTZ__
       GLenum err = glewInit(); // defines pters to functions of OpenGL V 1.2 and above
       if (err) Fl::warning("glewInit() failed returning %u", err);
       else add_output("Using GLEW %s\n", glewGetString(GLEW_VERSION));
diff --git a/examples/clipboard.cxx b/examples/clipboard.cxx
index d19950ad8..1d84fc89c 100644
--- a/examples/clipboard.cxx
+++ b/examples/clipboard.cxx
@@ -133,7 +133,7 @@ void clip_callback(int source, void *data) { // called after clipboard was chang
 
 int main(int argc, char **argv)
 {
-#if !(defined(__APPLE__) || defined(WIN32))
+#if !(defined(__APPLE_QUARTZ__) || defined(WIN32))
   extern void fl_register_images();
   fl_register_images(); // required to allow pasting of images
 #endif
diff --git a/fluid/fluid.cxx b/fluid/fluid.cxx
index 3b4e5fdda..081104f9a 100644
--- a/fluid/fluid.cxx
+++ b/fluid/fluid.cxx
@@ -459,7 +459,7 @@ void exit_cb(Fl_Widget *,void *) {
   exit(0);
 }
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 #  include <FL/x.H>
 
 void
@@ -496,7 +496,7 @@ apple_open_cb(const char *c) {
   undo_clear();
   if (oldfilename) free((void *)oldfilename);
 }
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
 void open_cb(Fl_Widget *, void *v) {
   if (!v && modflag) {
@@ -1306,11 +1306,11 @@ void update_history(const char *flname) {
   fl_filename_absolute(absolute, sizeof(absolute), flname);
 
   for (i = 0; i < max_files; i ++)
-#if defined(WIN32) || defined(__APPLE__)
+#if defined(WIN32) || defined(__APPLE_QUARTZ__)
     if (!strcasecmp(absolute, absolute_history[i])) break;
 #else
     if (!strcmp(absolute, absolute_history[i])) break;
-#endif // WIN32 || __APPLE__
+#endif // WIN32 || __APPLE_QUARTZ__
 
   if (i == 0) return;
 
@@ -1815,9 +1815,9 @@ int main(int argc,char **argv) {
 
   if (c) set_filename(c);
   if (!batch_mode) {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
     fl_open_callback(apple_open_cb);
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
     Fl::visual((Fl_Mode)(FL_DOUBLE|FL_INDEX));
     Fl_File_Icon::load_system_icons();
     main_window->callback(exit_cb);
diff --git a/src/Fl.cxx b/src/Fl.cxx
index 1ca1cc7da..cedbc9960 100644
--- a/src/Fl.cxx
+++ b/src/Fl.cxx
@@ -81,7 +81,7 @@ HBRUSH fl_brush_action(int action);
 void fl_cleanup_pens(void);
 void fl_release_dc(HWND,HDC);
 void fl_cleanup_dc_list(void);
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
 extern double fl_mac_flush_and_wait(double time_to_wait);
 #endif // WIN32
 
@@ -91,7 +91,7 @@ extern double fl_mac_flush_and_wait(double time_to_wait);
 
 // Pointers you can use to change FLTK to a foreign language.
 // Note: Similar pointers are defined in FL/fl_ask.H and src/fl_ask.cxx
-#if !defined(__APPLE__) || defined(FL_DOXYGEN)
+#if !defined(__APPLE_QUARTZ__) || defined(FL_DOXYGEN)
   const char* fl_local_alt   = "Alt";	///< string pointer used in shortcuts, you can change it to another language
   const char* fl_local_ctrl  = "Ctrl";	///< string pointer used in shortcuts, you can change it to another language
   const char* fl_local_meta  = "Meta";	///< string pointer used in shortcuts, you can change it to another language
@@ -104,7 +104,7 @@ extern double fl_mac_flush_and_wait(double time_to_wait);
 #endif
 
 // Apple App Menu
-#if defined(__APPLE__) || defined(FL_DOXYGEN)
+#if defined(__APPLE_QUARTZ__) || defined(FL_DOXYGEN)
 const char *Fl_Mac_App_Menu::about = "About %@";
 const char *Fl_Mac_App_Menu::print = "Print Front Window";
 const char *Fl_Mac_App_Menu::services = "Services";
@@ -112,7 +112,7 @@ const char *Fl_Mac_App_Menu::hide = "Hide %@";
 const char *Fl_Mac_App_Menu::hide_others = "Hide Others";
 const char *Fl_Mac_App_Menu::show = "Show All";
 const char *Fl_Mac_App_Menu::quit = "Quit %@";
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
 #ifndef FL_DOXYGEN
 Fl_Widget	*Fl::belowmouse_,
@@ -272,7 +272,7 @@ int Fl::event_inside(const Fl_Widget *o) /*const*/ {
 
 // implementation in Fl_win32.cxx
 
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
 
 // implementation in Fl_cocoa.mm (was Fl_mac.cxx)
 
@@ -484,7 +484,7 @@ static void run_checks()
   }
 }
 
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 static char in_idle;
 #endif
 
@@ -571,7 +571,7 @@ double Fl::wait(double time_to_wait) {
 
   return fl_wait(time_to_wait);
 
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
 
   run_checks();
   return fl_mac_flush_and_wait(time_to_wait);
@@ -713,7 +713,7 @@ int Fl::check() {
   \endcode
 */
 int Fl::ready() {
-#if ! defined( WIN32 )  &&  ! defined(__APPLE__)
+#if ! defined( WIN32 )  &&  ! defined(__APPLE_QUARTZ__)
   if (first_timeout) {
     elapse_timeouts();
     if (first_timeout->time <= 0) return 1;
@@ -1002,7 +1002,7 @@ void Fl::focus(Fl_Widget *o) {
       if (!w1) w1 = o->window();
       while (w1) { win=w1; w1=win->window(); }
       if (win) {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 	if (fl_xfocus != win) {
 	  Fl_X *x = Fl_X::i(win);
 	  if (x) x->set_key_window();
@@ -1138,7 +1138,7 @@ void fl_fix_focus() {
   }
 }
 
-#if !(defined(WIN32) || defined(__APPLE__))
+#if !(defined(WIN32) || defined(__APPLE_QUARTZ__))
 extern Fl_Widget *fl_selection_requestor; // from Fl_x.cxx
 #endif
 
@@ -1156,7 +1156,7 @@ void fl_throw_focus(Fl_Widget *o) {
 #endif // DEBUG
 
   if (o->contains(Fl::pushed())) Fl::pushed_ = 0;
-#if !(defined(WIN32) || defined(__APPLE__))
+#if !(defined(WIN32) || defined(__APPLE_QUARTZ__))
   if (o->contains(fl_selection_requestor)) fl_selection_requestor = 0;
 #endif
   if (o->contains(Fl::belowmouse())) Fl::belowmouse_ = 0;
@@ -1379,7 +1379,7 @@ int Fl::handle_(int e, Fl_Window* window)
     if (grab()) wi = grab();
     { int ret;
       Fl_Widget* pbm = belowmouse();
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
       if (fl_mac_os_version < 100500) {
         // before 10.5, mouse moved events aren't sent to borderless windows such as tooltips
 	Fl_Window *tooltip = Fl_Tooltip::current_window();
@@ -1581,7 +1581,7 @@ void Fl_Window::hide() {
   Fl_X** pp = &Fl_X::first;
   for (; *pp != ip; pp = &(*pp)->next) if (!*pp) return;
   *pp = ip->next;
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   // MacOS X manages a single pointer per application. Make sure that hiding
   // a toplevel window will not leave us with some random pointer shape, or
   // worst case, an invisible pointer
@@ -1698,7 +1698,7 @@ int Fl_Window::handle(int ev)
 	i->map();
 #else
 # error unsupported platform
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
       }
       break;
     case FL_HIDE:
@@ -1927,7 +1927,7 @@ void Fl_Window::flush() {
 
 #ifdef WIN32
 #  include "Fl_win32.cxx"
-//#elif defined(__APPLE__)
+//#elif defined(__APPLE_QUARTZ__)
 #endif
 
 
diff --git a/src/Fl_Bitmap.cxx b/src/Fl_Bitmap.cxx
index 426bc6c0b..35b3b35c7 100644
--- a/src/Fl_Bitmap.cxx
+++ b/src/Fl_Bitmap.cxx
@@ -163,7 +163,7 @@ void fl_delete_bitmask(Fl_Bitmask bm) {
 }
 
 
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
 
 // Create a 1-bit mask used for alpha blending
@@ -268,7 +268,7 @@ int Fl_Bitmap::start(int XP, int YP, int WP, int HP, int &cx, int &cy,
   return 0;
 }
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 void Fl_Quartz_Graphics_Driver::draw(Fl_Bitmap *bm, int XP, int YP, int WP, int HP, int cx, int cy) {
   int X, Y, W, H;
   if (bm->start(XP, YP, WP, HP, cx, cy, X, Y, W, H)) {
diff --git a/src/Fl_Copy_Surface.cxx b/src/Fl_Copy_Surface.cxx
index d710d64cf..ab2b50674 100644
--- a/src/Fl_Copy_Surface.cxx
+++ b/src/Fl_Copy_Surface.cxx
@@ -20,7 +20,7 @@
 #include <FL/Fl.H>
 
 
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
 #include <ApplicationServices/ApplicationServices.h>
 
 Fl_Quartz_Surface_::Fl_Quartz_Surface_(int w, int h) : Fl_System_Printer(), width(w), height(h) {
@@ -72,7 +72,7 @@ Fl_Copy_Surface::Fl_Copy_Surface(int w, int h) :  Fl_Surface_Device(NULL)
 {
   width = w;
   height = h;
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   helper = new Fl_Quartz_Surface_(width, height);
   driver(helper->driver());
   prepare_copy_pdf_and_tiff(w, h);
@@ -118,7 +118,7 @@ Fl_Copy_Surface::Fl_Copy_Surface(int w, int h) :  Fl_Surface_Device(NULL)
  */
 Fl_Copy_Surface::~Fl_Copy_Surface()
 {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   complete_copy_pdf_and_tiff();
   fl_gc = oldgc;
   delete (Fl_Quartz_Surface_*)helper;
@@ -172,7 +172,7 @@ void Fl_Copy_Surface::draw(Fl_Widget* widget, int delta_x, int delta_y)
 
 void Fl_Copy_Surface::set_current()
 {
-#if defined(__APPLE__) || defined(WIN32)
+#if defined(__APPLE_QUARTZ__) || defined(WIN32)
   fl_gc = gc;
   fl_window = (Window)1;
   Fl_Surface_Device::set_current();
@@ -185,7 +185,7 @@ void Fl_Copy_Surface::set_current()
 }
 
 
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
 
 size_t Fl_Copy_Surface::MyPutBytes(void* info, const void* buffer, size_t count)
   {
@@ -273,10 +273,10 @@ void Fl_Copy_Surface::draw_decorated_window(Fl_Window* win, int delta_x, int del
   helper->draw_decorated_window(win, delta_x, delta_y, this);
 }
 
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
 
-#if !(defined(__APPLE__) || defined(WIN32) || defined(FL_DOXYGEN))
+#if !(defined(__APPLE_QUARTZ__) || defined(WIN32) || defined(FL_DOXYGEN))
 /* graphics driver that translates all graphics coordinates before calling Xlib */
 class Fl_translated_Xlib_Graphics_Driver_ : public Fl_Xlib_Graphics_Driver {
   int offset_x, offset_y; // translation between user and graphical coordinates: graphical = user + offset
diff --git a/src/Fl_Device.cxx b/src/Fl_Device.cxx
index a35227b23..df010a5fb 100644
--- a/src/Fl_Device.cxx
+++ b/src/Fl_Device.cxx
@@ -24,7 +24,7 @@ const char *Fl_Device::class_id = "Fl_Device";
 const char *Fl_Surface_Device::class_id = "Fl_Surface_Device";
 const char *Fl_Display_Device::class_id = "Fl_Display_Device";
 const char *Fl_Graphics_Driver::class_id = "Fl_Graphics_Driver";
-#if defined(__APPLE__) || defined(FL_DOXYGEN)
+#if defined(__APPLE_QUARTZ__) || defined(FL_DOXYGEN)
 const char *Fl_Quartz_Graphics_Driver::class_id = "Fl_Quartz_Graphics_Driver";
 #  ifndef FL_DOXYGEN
    bool Fl_Display_Device::high_res_window_ = false;
@@ -34,7 +34,7 @@ const char *Fl_Quartz_Graphics_Driver::class_id = "Fl_Quartz_Graphics_Driver";
 const char *Fl_GDI_Graphics_Driver::class_id = "Fl_GDI_Graphics_Driver";
 const char *Fl_GDI_Printer_Graphics_Driver::class_id = "Fl_GDI_Printer_Graphics_Driver";
 #endif
-#if !(defined(__APPLE__) || defined(WIN32))
+#if !(defined(__APPLE_QUARTZ__) || defined(WIN32))
 const char *Fl_Xlib_Graphics_Driver::class_id = "Fl_Xlib_Graphics_Driver";
 #endif
 
@@ -82,7 +82,7 @@ Fl_Display_Device::Fl_Display_Device(Fl_Graphics_Driver *graphics_driver) : Fl_S
 /** Returns the platform display device. */
 Fl_Display_Device *Fl_Display_Device::display_device() {
   static Fl_Display_Device *display = new Fl_Display_Device(new
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
                                                                   Fl_Quartz_Graphics_Driver
 #elif defined(WIN32)
                                                                   Fl_GDI_Graphics_Driver
diff --git a/src/Fl_Double_Window.cxx b/src/Fl_Double_Window.cxx
index 7ac1ae60e..6400ee98c 100644
--- a/src/Fl_Double_Window.cxx
+++ b/src/Fl_Double_Window.cxx
@@ -106,7 +106,7 @@ void fl_copy_offscreen(int x, int y, int w, int h, Fl_Offscreen pixmap, int srcx
     ((Fl_Xlib_Graphics_Driver*)fl_graphics_driver)->copy_offscreen(x, y, w, h, pixmap, srcx, srcy);
 #elif defined(WIN32)
     ((Fl_GDI_Graphics_Driver*)fl_graphics_driver)->copy_offscreen(x, y, w, h, pixmap, srcx, srcy);
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
     ((Fl_Quartz_Graphics_Driver*)fl_graphics_driver)->copy_offscreen(x, y, w, h, pixmap, srcx, srcy);
 #endif
   }
@@ -458,7 +458,7 @@ void Fl_Double_Window::flush(int eraseoverlay) {
     //# if defined(FLTK_USE_CAIRO)
     //if Fl::cairo_autolink_context() Fl::cairo_make_current(this); // capture gc changes automatically to update the cairo context adequately
     //# endif
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
     if ( myi->other_xid ) {
       fl_begin_offscreen( myi->other_xid );
       fl_clip_region( 0 );   
diff --git a/src/Fl_File_Browser.cxx b/src/Fl_File_Browser.cxx
index aaeddb18e..5259e830e 100644
--- a/src/Fl_File_Browser.cxx
+++ b/src/Fl_File_Browser.cxx
@@ -56,11 +56,11 @@
 #  include <os2.h>
 #endif // __EMX__
 
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
 #  include <sys/param.h>
 #  include <sys/ucred.h>
 #  include <sys/mount.h>
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
 #if defined(_AIX)
 extern "C" {
@@ -512,7 +512,7 @@ Fl_File_Browser::load(const char     *directory,// I - Directory to load
 
 	num_files ++;
       }
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
     // MacOS X and Darwin use getfsstat() system call...
     int			numfs;	// Number of file systems
     struct statfs	*fs;	// Buffer for file system info
@@ -660,7 +660,7 @@ Fl_File_Browser::load(const char     *directory,// I - Directory to load
       // window after requesting filesystem list.
       add("/", icon);
     }
-#endif // WIN32 || __EMX__ || __APPLE__ || _AIX || ...
+#endif // WIN32 || __EMX__ || __APPLE_QUARTZ__ || _AIX || ...
   }
   else
   {
diff --git a/src/Fl_Font.H b/src/Fl_Font.H
index 7a98650b2..0de305fa4 100644
--- a/src/Fl_Font.H
+++ b/src/Fl_Font.H
@@ -28,7 +28,7 @@
 
 #  if USE_XFT
 typedef struct _XftFont XftFont;
-#  elif !defined(WIN32) && !defined(__APPLE__)
+#  elif !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 #    include "Xutf8.h"
 #  endif // USE_XFT
 
diff --git a/src/Fl_Gl_Choice.cxx b/src/Fl_Gl_Choice.cxx
index fffeda387..5e2e3aa4b 100644
--- a/src/Fl_Gl_Choice.cxx
+++ b/src/Fl_Gl_Choice.cxx
@@ -29,7 +29,7 @@
 
 #  ifdef WIN32
 void fl_save_dc(HWND, HDC);
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
 extern void gl_texture_reset();
 #endif
 
diff --git a/src/Fl_Gl_Device_Plugin.cxx b/src/Fl_Gl_Device_Plugin.cxx
index df14786b0..bc8855594 100644
--- a/src/Fl_Gl_Device_Plugin.cxx
+++ b/src/Fl_Gl_Device_Plugin.cxx
@@ -23,7 +23,7 @@
 #include <FL/Fl_RGB_Image.H>
 #include "FL/Fl.H"
 
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
 uchar *convert_BGRA_to_RGB(uchar *baseAddress, int w, int h, int mByteWidth)
 {
   uchar *newimg = new uchar[3*w*h];
@@ -51,7 +51,7 @@ static Fl_RGB_Image* capture_gl_rectangle(Fl_Gl_Window *glw, int x, int y, int w
  stored from bottom to top.
  */
 {
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
   const int bytesperpixel = 4;
   float factor = glw->pixels_per_unit();
   if (factor > 1) {
@@ -73,14 +73,14 @@ static Fl_RGB_Image* capture_gl_rectangle(Fl_Gl_Window *glw, int x, int y, int w
   mByteWidth = (mByteWidth + 3) & ~3;    // Align to 4 bytes
   uchar *baseAddress = new uchar[mByteWidth * h];
   glReadPixels(x, glw->pixel_h() - (y+h), w, h,
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
                GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV,
 #else
                GL_RGB, GL_UNSIGNED_BYTE,
 #endif
                baseAddress);
   glPopClientAttrib();
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
   baseAddress = convert_BGRA_to_RGB(baseAddress, w, h, mByteWidth);
   mByteWidth = 3 * w;
 #endif
@@ -89,7 +89,7 @@ static Fl_RGB_Image* capture_gl_rectangle(Fl_Gl_Window *glw, int x, int y, int w
   return img;
 }
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 static void imgProviderReleaseData (void *info, const void *data, size_t size)
 {
   delete (Fl_RGB_Image *)info;
@@ -108,7 +108,7 @@ public:
     Fl_Gl_Window *glw = w->as_gl_window();
     if (!glw) return 0;
     Fl_RGB_Image *img = capture_gl_rectangle(glw, 0, 0, glw->w(), glw->h());
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
     if (Fl_Surface_Device::surface()->class_name() == Fl_Printer::class_id) {
       // convert the image to CGImage, and draw it at full res (useful on retina display)
       CGColorSpaceRef cSpace = CGColorSpaceCreateDeviceRGB();
diff --git a/src/Fl_Gl_Overlay.cxx b/src/Fl_Gl_Overlay.cxx
index 76d532b89..d497dca05 100644
--- a/src/Fl_Gl_Overlay.cxx
+++ b/src/Fl_Gl_Overlay.cxx
@@ -187,7 +187,7 @@ int Fl_Gl_Window::can_do_overlay() {
 void Fl_Gl_Window::redraw_overlay() {
   if (!shown()) return;
   make_overlay();
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   redraw();
 #else
 #ifndef WIN32
@@ -201,7 +201,7 @@ void Fl_Gl_Window::redraw_overlay() {
 
 void Fl_Gl_Window::make_overlay_current() {
   make_overlay();
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   // this is not very useful, but unfortunately, Apple decided
   // that front buffer drawing can no longer (OS X 10.4) be 
   // supported on their platforms.
diff --git a/src/Fl_Gl_Window.cxx b/src/Fl_Gl_Window.cxx
index b645b8997..096cc14eb 100644
--- a/src/Fl_Gl_Window.cxx
+++ b/src/Fl_Gl_Window.cxx
@@ -24,7 +24,7 @@ extern int fl_gl_load_plugin;
 #include <FL/Fl.H>
 #include <FL/x.H>
 #include "Fl_Gl_Choice.H"
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 #include <FL/gl.h>
 #include <OpenGL/OpenGL.h>
 #endif
@@ -63,7 +63,7 @@ int Fl_Gl_Window::can_do(int a, const int *b) {
 }
 
 void Fl_Gl_Window::show() {
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
   int need_redraw = 0;
 #endif
   if (!shown()) {
@@ -79,29 +79,29 @@ void Fl_Gl_Window::show() {
 	return;
       }
     }
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
     Fl_X::make_xid(this, g->vis, g->colormap);
     if (overlay && overlay != this) ((Fl_Gl_Window*)overlay)->show();
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
 	if( ! parent() ) need_redraw=1;
 #endif
   }
   Fl_Window::show();
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   set_visible();
   if(need_redraw) redraw();//necessary only after creation of a top-level GL window
-#endif /* __APPLE__ */
+#endif /* __APPLE_QUARTZ__ */
 }
 
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
 
 float Fl_Gl_Window::pixels_per_unit()
 {
   return (fl_mac_os_version >= 100700 && Fl::use_high_res_GL() && Fl_X::i(this) && Fl_X::i(this)->mapped_to_retina()) ? 2 : 1;
 }
 
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
 /**
   The invalidate() method turns off valid() and is
@@ -120,16 +120,16 @@ void Fl_Gl_Window::invalidate() {
 
 int Fl_Gl_Window::mode(int m, const int *a) {
   if (m == mode_ && a == alist) return 0;
-#ifndef __APPLE__
+#ifndef __APPLE_QUARTZ__
   int oldmode = mode_;
 #endif
-#if defined(__APPLE__) || defined(USE_X11)
+#if defined(__APPLE_QUARTZ__) || defined(USE_X11)
   if (a) { // when the mode is set using the a array of system-dependent values, and if asking for double buffer,
            // the FL_DOUBLE flag must be set in the mode_ member variable
     const int *aa = a;
     while (*aa) {
       if (*(aa++) ==
-#  if defined(__APPLE__)
+#  if defined(__APPLE_QUARTZ__)
           kCGLPFADoubleBuffer
 #  else
           GLX_DOUBLEBUFFER
@@ -137,10 +137,10 @@ int Fl_Gl_Window::mode(int m, const int *a) {
           ) { m |= FL_DOUBLE; break; }
     }
   }
-#endif // !__APPLE__
-#if !defined(WIN32) && !defined(__APPLE__)
+#endif // !__APPLE_QUARTZ__
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
   Fl_Gl_Choice* oldg = g;
-#endif // !WIN32 && !__APPLE__
+#endif // !WIN32 && !__APPLE_QUARTZ__
   context(0);
   mode_ = m; alist = a;
   if (shown()) {
@@ -180,7 +180,7 @@ int Fl_Gl_Window::mode(int m, const int *a) {
 void Fl_Gl_Window::make_current() {
 //  puts("Fl_Gl_Window::make_current()");
 //  printf("make_current: context_=%p\n", context_);
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
   // detect if the window was moved between low and high resolution displays
   if (Fl_X::i(this)->changed_resolution()){
     Fl_X::i(this)->changed_resolution(false);
@@ -298,7 +298,7 @@ void Fl_Gl_Window::flush() {
   uchar save_valid_f = valid_f_;
 #endif
   
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   Fl_X *i = Fl_X::i(this);
   if (i->wait_for_expose) {
     Fl_X::GLcontext_update((GLContext)context());
@@ -402,7 +402,7 @@ void Fl_Gl_Window::flush() {
       }
 
     }
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
     Fl_X::GLcontext_flushbuffer(context_);
 #endif
 
@@ -432,12 +432,12 @@ void Fl_Gl_Window::resize(int X,int Y,int W,int H) {
   int is_a_resize = (W != Fl_Widget::w() || H != Fl_Widget::h());
   if (is_a_resize) valid(0);
   
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   Fl_X *flx = Fl_X::i(this);
   if (flx && flx->in_windowDidResize()) Fl_X::GLcontext_update(context_);
 #endif
 
-#if ! ( defined(__APPLE__) || defined(WIN32) )
+#if ! ( defined(__APPLE_QUARTZ__) || defined(WIN32) )
   if (is_a_resize && !resizable() && overlay && overlay != this) {
     ((Fl_Gl_Window*)overlay)->resize(0,0,W,H);
   }
diff --git a/src/Fl_Image.cxx b/src/Fl_Image.cxx
index ad65bedaf..a2cd6a6f8 100644
--- a/src/Fl_Image.cxx
+++ b/src/Fl_Image.cxx
@@ -313,7 +313,7 @@ Fl_RGB_Image::Fl_RGB_Image(const Fl_Pixmap *pxm, Fl_Color bg):
   the image.
 */
 Fl_RGB_Image::~Fl_RGB_Image() {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   if (id_) CGImageRelease((CGImageRef)id_);
   else if (alloc_array) delete[] (uchar *)array;
 #else
@@ -323,7 +323,7 @@ Fl_RGB_Image::~Fl_RGB_Image() {
 }
 
 void Fl_RGB_Image::uncache() {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   if (id_) {
     if (mask_) *(bool*)mask_ = false;
     CGImageRelease((CGImageRef)id_);
@@ -589,7 +589,7 @@ void Fl_RGB_Image::desaturate() {
   d(new_d);
 }
 
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 // Composite an image with alpha on systems that don't have accelerated
 // alpha compositing...
 static void alpha_blend(Fl_RGB_Image *img, int X, int Y, int W, int H, int cx, int cy) {
@@ -646,7 +646,7 @@ static void alpha_blend(Fl_RGB_Image *img, int X, int Y, int W, int H, int cx, i
 
   delete[] dst;
 }
-#endif // !WIN32 && !__APPLE__
+#endif // !WIN32 && !__APPLE_QUARTZ__
 
 void Fl_RGB_Image::draw(int XP, int YP, int WP, int HP, int cx, int cy) {
   fl_graphics_driver->draw(this, XP, YP, WP, HP, cx, cy);
@@ -675,7 +675,7 @@ int Fl_Graphics_Driver::draw_scaled(Fl_Image *img, int X, int Y, int W, int H) {
   return 0;
 }
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 static void imgProviderReleaseData (void *info, const void *data, size_t size)
 {
   if (!info || *(bool*)info) delete[] (unsigned char *)data;
diff --git a/src/Fl_Image_Surface.cxx b/src/Fl_Image_Surface.cxx
index b24541a6a..a8b036c9f 100644
--- a/src/Fl_Image_Surface.cxx
+++ b/src/Fl_Image_Surface.cxx
@@ -29,7 +29,7 @@ void Fl_Image_Surface::prepare_(int w, int h, int highres) {
   highres = 0;
   if (highres) {/* avoid compiler warning (Linux + Windows */}
 #endif
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   offscreen = fl_create_offscreen(highres ? 2*w : w, highres ? 2*h : h);
   helper = new Fl_Quartz_Flipped_Surface_(w, h);
   if (highres) {
@@ -80,7 +80,7 @@ Fl_Image_Surface::Fl_Image_Surface(int w, int h) : Fl_Surface_Device(NULL) {
 /** The destructor.
  */
 Fl_Image_Surface::~Fl_Image_Surface() {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   void *data = CGBitmapContextGetData((CGContextRef)offscreen);
   free(data);
   CGContextRelease((CGContextRef)offscreen);
@@ -104,7 +104,7 @@ Fl_RGB_Image* Fl_Image_Surface::image()
 {
   unsigned char *data;
   int W = width, H = height;
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   CGContextFlush(offscreen);
   W = CGBitmapContextGetWidth(offscreen);
   H = CGBitmapContextGetHeight(offscreen);
@@ -157,7 +157,7 @@ void Fl_Image_Surface::draw(Fl_Widget *widget, int delta_x, int delta_y)
 
 void Fl_Image_Surface::set_current()
 {
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
   fl_gc = offscreen; fl_window = 0;
   Fl_Surface_Device::set_current();
   Fl_X::set_high_resolution( CGBitmapContextGetWidth(offscreen) > width );
@@ -179,7 +179,7 @@ void Fl_Image_Surface::set_current()
 #endif
 }
 
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
 
 Fl_Quartz_Flipped_Surface_::Fl_Quartz_Flipped_Surface_(int w, int h) : Fl_Quartz_Surface_(w, h) {
 }
@@ -238,7 +238,7 @@ void Fl_Image_Surface::draw_decorated_window(Fl_Window* win, int delta_x, int de
   fl_pop_clip();
   RestoreDC(fl_gc, _savedc);
   DeleteDC(fl_gc);
-#elif !defined(__APPLE__)
+#elif !defined(__APPLE_QUARTZ__)
   fl_pop_clip();
 #endif
   helper->draw_decorated_window(win, delta_x, delta_y, this);
diff --git a/src/Fl_Input.cxx b/src/Fl_Input.cxx
index 00fdbbccb..d78911cfb 100644
--- a/src/Fl_Input.cxx
+++ b/src/Fl_Input.cxx
@@ -358,7 +358,7 @@ int Fl_Input::handle_key() {
       else replace(position(), del ? position()-del : mark(),
 	           Fl::event_text(), Fl::event_length());
     }
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
     if (Fl::compose_state) {
       this->mark( this->position() - Fl::compose_state );
       }
@@ -393,7 +393,7 @@ int Fl_Input::handle_key() {
       return 0;							// ignore other combos, pass to parent
 
     case FL_Delete: {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
       if (mods==0)          return kf_delete_char_right();	// Delete         (OSX-HIG,TE,SA,WOX)
       if (mods==FL_CTRL)    return kf_delete_char_right();	// Ctrl-Delete    (??? TE,!SA,!WOX)
       if (mods==FL_ALT)     return kf_delete_word_right();	// Alt-Delete     (OSX-HIG,TE,SA)
@@ -411,7 +411,7 @@ int Fl_Input::handle_key() {
     }
 
     case FL_Left:
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
       if (mods==0)          return kf_move_char_left();		// Left           (OSX-HIG)
       if (mods==FL_ALT)     return kf_move_word_left();		// Alt-Left       (OSX-HIG)
       if (mods==FL_META)    return kf_move_sol();		// Meta-Left      (OSX-HIG)
@@ -425,7 +425,7 @@ int Fl_Input::handle_key() {
 #endif
 
     case FL_Right:
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
       if (mods==0)          return kf_move_char_right();	// Right          (OSX-HIG)
       if (mods==FL_ALT)     return kf_move_word_right();	// Alt-Right      (OSX-HIG)
       if (mods==FL_META)    return kf_move_eol();		// Meta-Right     (OSX-HIG)
@@ -439,7 +439,7 @@ int Fl_Input::handle_key() {
 #endif
 
     case FL_Up:
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
       if (mods==0)          return kf_lines_up(1);		// Up             (OSX-HIG)
       if (mods==FL_CTRL)    return kf_page_up();		// Ctrl-Up        (TE !HIG)
       if (mods==FL_ALT)     return kf_move_up_and_sol();	// Alt-Up         (OSX-HIG)
@@ -452,7 +452,7 @@ int Fl_Input::handle_key() {
 #endif
 
     case FL_Down:
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
       if (mods==0)          return kf_lines_down(1);		// Dn             (OSX-HIG)
       if (mods==FL_CTRL)    return kf_page_down();		// Ctrl-Dn        (TE !HIG)
       if (mods==FL_ALT)     return kf_move_down_and_eol();	// Alt-Dn         (OSX-HIG)
@@ -467,7 +467,7 @@ int Fl_Input::handle_key() {
     case FL_Page_Up:
       // Fl_Input has no scroll control, so instead we move the cursor by one page
       // OSX-HIG recommends Alt increase one semantic unit, Meta next higher..
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
       if (mods==0)          return kf_page_up();		// PgUp           (OSX-HIG)
       if (mods==FL_ALT)     return kf_page_up();		// Alt-PageUp     (OSX-HIG)
       if (mods==FL_META)    return kf_top();			// Meta-PageUp    (OSX-HIG,!TE)
@@ -480,7 +480,7 @@ int Fl_Input::handle_key() {
 #endif
 
     case FL_Page_Down:
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
       // Fl_Input has no scroll control, so instead we move the cursor by one page
       // OSX-HIG recommends Alt increase one semantic unit, Meta next higher..
       if (mods==0)          return kf_page_down();		// PgDn           (OSX-HIG)
@@ -495,7 +495,7 @@ int Fl_Input::handle_key() {
 #endif
 
     case FL_Home:
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
       if (mods==0)          return kf_top();			// Home           (OSX-HIG)
       if (mods==FL_ALT)     return kf_top();			// Alt-Home       (???)
       return 0;							// ignore other combos, pass to parent
@@ -506,7 +506,7 @@ int Fl_Input::handle_key() {
 #endif
 
     case FL_End:
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
       if (mods==0)          return kf_bottom();			// End            (OSX-HIG)
       if (mods==FL_ALT)     return kf_bottom();			// Alt-End        (???)
       return 0;							// ignore other combos, pass to parent
@@ -517,7 +517,7 @@ int Fl_Input::handle_key() {
 #endif
 
     case FL_BackSpace:
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
       if (mods==0)          return kf_delete_char_left();	// Backspace      (OSX-HIG)
       if (mods==FL_CTRL)    return kf_delete_char_left();	// Ctrl-Backspace (TE/SA)
       if (mods==FL_ALT)     return kf_delete_word_left();	// Alt-Backspace  (OSX-HIG)
@@ -590,7 +590,7 @@ int Fl_Input::handle(int event) {
   static int dnd_save_position, dnd_save_mark, drag_start = -1, newpos;
   static Fl_Widget *dnd_save_focus = NULL;
   switch (event) {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
     case FL_UNFOCUS:
       if (Fl::compose_state) {
 	this->mark( this->position() );
@@ -679,7 +679,7 @@ int Fl_Input::handle(int event) {
 	  dnd_save_focus = this;
           // drag the data:
           copy(0);
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
           Fl_X::dnd(1);
 #else
           Fl::dnd();
@@ -746,7 +746,7 @@ int Fl_Input::handle(int event) {
           Fl::focus(dnd_save_focus);
           handle(FL_UNFOCUS);
         }
-#if !(defined(__APPLE__) || defined(WIN32))
+#if !(defined(__APPLE_QUARTZ__) || defined(WIN32))
       Fl::first_window()->cursor(FL_CURSOR_MOVE);
 #endif
       dnd_save_focus = NULL;
@@ -844,7 +844,7 @@ Fl_Secret_Input::Fl_Secret_Input(int X,int Y,int W,int H,const char *l)
 
 int Fl_Secret_Input::handle(int event) {
   int retval = Fl_Input::handle(event);
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   if (event == FL_KEYBOARD && Fl::compose_state) {
     this->mark( this->position() ); // don't underline marked text
   }
diff --git a/src/Fl_Input_.cxx b/src/Fl_Input_.cxx
index 175f1acec..8a373f67e 100644
--- a/src/Fl_Input_.cxx
+++ b/src/Fl_Input_.cxx
@@ -339,7 +339,7 @@ void Fl_Input_::drawtext(int X, int Y, int W, int H) {
       int offset2;
       if (pp <= e) x2 = xpos + (float)expandpos(p, pp, buf, &offset2);
       else offset2 = (int) strlen(buf);
-#ifdef __APPLE__ // Mac OS: underline marked ( = selected + Fl::compose_state != 0) text 
+#ifdef __APPLE_QUARTZ__ // Mac OS: underline marked ( = selected + Fl::compose_state != 0) text 
       if (Fl::compose_state) {
         fl_color(textcolor());
       }
@@ -351,7 +351,7 @@ void Fl_Input_::drawtext(int X, int Y, int W, int H) {
       fl_color(fl_contrast(textcolor(), selection_color()));
       }
       fl_draw(buf+offset1, offset2-offset1, x1, (float)(Y+ypos+desc));
-#ifdef __APPLE__ // Mac OS: underline marked ( = selected + Fl::compose_state != 0) text
+#ifdef __APPLE_QUARTZ__ // Mac OS: underline marked ( = selected + Fl::compose_state != 0) text
       if (Fl::compose_state) {
         fl_color( fl_color_average(textcolor(), color(), 0.6) );
         float width = fl_width(buf+offset1, offset2-offset1);
@@ -373,7 +373,7 @@ void Fl_Input_::drawtext(int X, int Y, int W, int H) {
   CONTINUE2:
     // draw the cursor:
     if (Fl::focus() == this && (
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 				Fl::compose_state || 
 #endif
 				selstart == selend) &&
@@ -388,7 +388,7 @@ void Fl_Input_::drawtext(int X, int Y, int W, int H) {
       } else {
         fl_rectf((int)(xpos+curx+0.5), Y+ypos, 2, height);
       }
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
       Fl::insertion_point_location(xpos+curx, Y+ypos+height, height);
 #endif
     }
diff --git a/src/Fl_Menu.cxx b/src/Fl_Menu.cxx
index 8f350aa62..81a067005 100644
--- a/src/Fl_Menu.cxx
+++ b/src/Fl_Menu.cxx
@@ -122,7 +122,7 @@ class menuwindow : public Fl_Menu_Window {
 public:
   menutitle* title;
   int handle(int);
-#if defined (__APPLE__) || defined (USE_X11)
+#if defined (__APPLE_QUARTZ__) || defined (USE_X11)
   int early_hide_handle(int);
 #endif
   int itemheight;	// zero == menubar
@@ -655,7 +655,7 @@ static int backward(int menu) { // previous item in menu menu if possible
 }
 
 int menuwindow::handle(int e) {
-#if defined (__APPLE__) || defined (USE_X11)
+#if defined (__APPLE_QUARTZ__) || defined (USE_X11)
   // This off-route takes care of the "detached menu" bug on OS X.
   // Apple event handler requires that we hide all menu windows right
   // now, so that Carbon can continue undisturbed with handling window
@@ -748,7 +748,7 @@ int menuwindow::early_hide_handle(int e) {
     }
     break;
     case FL_MOVE:
-#if ! (defined(WIN32) || defined(__APPLE__))
+#if ! (defined(WIN32) || defined(__APPLE_QUARTZ__))
       if (pp.state == DONE_STATE) {
 	return 1; // Fix for STR #2619
       }
diff --git a/src/Fl_Native_File_Chooser.cxx b/src/Fl_Native_File_Chooser.cxx
index 7aa1d799b..3895757d3 100644
--- a/src/Fl_Native_File_Chooser.cxx
+++ b/src/Fl_Native_File_Chooser.cxx
@@ -22,12 +22,12 @@
 #endif
 
 // Use Apple's chooser
-#ifdef __APPLE__
+#if defined(__APPLE_QUARTZ__) && defined(__APPLE_QUARTZ__)
 #include <FL/Fl_Native_File_Chooser.H>
 #endif
 
 // All else falls back to FLTK's own chooser
-#if ! defined(__APPLE__) && !defined(WIN32)
+#if ! defined(__APPLE_QUARTZ__) && !defined(WIN32)
 #include "Fl_Native_File_Chooser_FLTK.cxx"
 #endif
 
diff --git a/src/Fl_Native_File_Chooser_GTK.cxx b/src/Fl_Native_File_Chooser_GTK.cxx
index 27d744586..8404a7723 100644
--- a/src/Fl_Native_File_Chooser_GTK.cxx
+++ b/src/Fl_Native_File_Chooser_GTK.cxx
@@ -684,7 +684,7 @@ void Fl_GTK_File_Chooser::probe_for_GTK_libs(void) {
     return;
   }
   
-  char *pc_dl_error; // used to report errors by the GET_SYM macro...
+  const char *pc_dl_error; // used to report errors by the GET_SYM macro...
   // items we need from GLib
   GET_SYM(g_free, ptr_glib);
   GET_SYM(g_slist_nth_data, ptr_glib);
diff --git a/src/Fl_Native_File_Chooser_MAC.mm b/src/Fl_Native_File_Chooser_MAC.mm
index 546460417..2298a9049 100644
--- a/src/Fl_Native_File_Chooser_MAC.mm
+++ b/src/Fl_Native_File_Chooser_MAC.mm
@@ -21,7 +21,7 @@
 //        Possibly 'preset_file' could be used to select the filename.
 //
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 
 #include "Fl_Native_File_Chooser_common.cxx"		// strnew/strfree/strapp/chrcat
 #include <libgen.h>		// dirname(3)
@@ -696,7 +696,7 @@ int Fl_Native_File_Chooser::post() {
   return (retval == 1 ? 0 : 1);
 }
 
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
 //
 // End of "$Id$".
diff --git a/src/Fl_Paged_Device.cxx b/src/Fl_Paged_Device.cxx
index 18f5b5601..718f1b52d 100644
--- a/src/Fl_Paged_Device.cxx
+++ b/src/Fl_Paged_Device.cxx
@@ -58,7 +58,7 @@ void Fl_Paged_Device::print_widget(Fl_Widget* widget, int delta_x, int delta_y)
   // if widget is a main window, clip all drawings to the window area
   if (is_window && !widget->window()) {
     fl_push_clip(0, 0, widget->w(), widget->h() );
-#ifdef __APPLE__ // for Mac OS X 10.6 and above, make window with rounded bottom corners
+#ifdef __APPLE_QUARTZ__ // for Mac OS X 10.6 and above, make window with rounded bottom corners
     if ( fl_mac_os_version >= 100600 && driver()->class_name() == Fl_Quartz_Graphics_Driver::class_id ) {
       Fl_X::clip_to_rounded_corners(fl_gc, widget->w(), widget->h());
     }
@@ -137,7 +137,7 @@ void Fl_Paged_Device::print_window_part(Fl_Window *win, int x, int y, int w, int
   win->make_current();
   uchar *image_data;
   image_data = fl_read_image(NULL, x, y, w, h);
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   Fl_X::q_release_context(); // matches make_current() call above
 #endif
   if (save_front != win) save_front->show();
diff --git a/src/Fl_Pixmap.cxx b/src/Fl_Pixmap.cxx
index c75ff4750..9e0255538 100644
--- a/src/Fl_Pixmap.cxx
+++ b/src/Fl_Pixmap.cxx
@@ -109,18 +109,18 @@ int Fl_Pixmap::prepare(int XP, int YP, int WP, int HP, int &cx, int &cy,
     return 1;
   }
   if (!id_) {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
     id_ = Fl_Quartz_Graphics_Driver::create_offscreen_with_alpha(w(), h());
 #else
     id_ = fl_create_offscreen(w(), h());
 #endif
     fl_begin_offscreen((Fl_Offscreen)id_);
-#ifndef __APPLE__
+#ifndef __APPLE_QUARTZ__
     uchar *bitmap = 0;
     fl_mask_bitmap = &bitmap;
 #endif
     fl_draw_pixmap(data(), 0, 0, FL_BLACK);
-#ifndef __APPLE__
+#ifndef __APPLE_QUARTZ__
 #if defined(WIN32)
     extern UINT win_pixmap_bg_color; // computed by fl_draw_pixmap()
     this->pixmap_bg_color = win_pixmap_bg_color;
@@ -137,7 +137,7 @@ int Fl_Pixmap::prepare(int XP, int YP, int WP, int HP, int &cx, int &cy,
 }
 
 //------------------------------------------------------------------------------
-#ifdef __APPLE__					// Apple, Mac OS X
+#ifdef __APPLE_QUARTZ__					// Apple, Mac OS X
 //------------------------------------------------------------------------------
 
 void Fl_Quartz_Graphics_Driver::draw(Fl_Pixmap *pxm, int XP, int YP, int WP, int HP, int cx, int cy) {
diff --git a/src/Fl_PostScript.cxx b/src/Fl_PostScript.cxx
index 38450a1f3..52774bb4d 100644
--- a/src/Fl_PostScript.cxx
+++ b/src/Fl_PostScript.cxx
@@ -61,7 +61,7 @@ Fl_PostScript_Graphics_Driver::~Fl_PostScript_Graphics_Driver() {
  */
 Fl_PostScript_File_Device::Fl_PostScript_File_Device(void)
 {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   gc = fl_gc; // the display context is used by fl_text_extents()
 #endif
   Fl_Surface_Device::driver( new Fl_PostScript_Graphics_Driver() );
@@ -167,7 +167,7 @@ int Fl_PostScript_Graphics_Driver::clocale_printf(const char *format, ...)
 
 #ifndef FL_DOXYGEN
 
-#if ! (defined(__APPLE__) || defined(WIN32) )
+#if ! (defined(__APPLE_QUARTZ__) || defined(WIN32) )
 #  include "print_panel.cxx"
 #endif
 
@@ -1553,7 +1553,7 @@ void Fl_PostScript_File_Device::end_job (void)
 
 #endif // FL_DOXYGEN
 
-#if ! (defined(__APPLE__) || defined(WIN32) )
+#if ! (defined(__APPLE_QUARTZ__) || defined(WIN32) )
 /** Starts a print job. */
 int Fl_PostScript_Printer::start_job(int pages, int *firstpage, int *lastpage) {
   enum Fl_Paged_Device::Page_Format format;
@@ -1651,7 +1651,7 @@ int Fl_PostScript_Printer::start_job(int pages, int *firstpage, int *lastpage) {
   return ps->start_postscript(pages, format, layout); // start printing
 }
 
-#endif // ! (defined(__APPLE__) || defined(WIN32) )
+#endif // ! (defined(__APPLE_QUARTZ__) || defined(WIN32) )
 
 
 //
diff --git a/src/Fl_Preferences.cxx b/src/Fl_Preferences.cxx
index 90b7820fd..f0878c568 100644
--- a/src/Fl_Preferences.cxx
+++ b/src/Fl_Preferences.cxx
@@ -37,7 +37,7 @@
 // on Windows, which is supposed to be POSIX compliant...
 #  define access _access
 #  define mkdir _mkdir
-#elif defined (__APPLE__)
+#elif defined (__APPLE_QUARTZ__)
 #  include <ApplicationServices/ApplicationServices.h>
 #  include <unistd.h>
 #  include <config.h>
@@ -80,7 +80,7 @@ Fl_Preferences *Fl_Preferences::runtimePrefs = 0;
  *         The buffer is overwritten during every call to this function!
  */
 const char *Fl_Preferences::newUUID() {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   CFUUIDRef theUUID = CFUUIDCreate(NULL);
   CFUUIDBytes b = CFUUIDGetUUIDBytes(theUUID);
   sprintf(uuidBuffer, "%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X",
@@ -1020,7 +1020,7 @@ Fl_Preferences::RootNode::RootNode( Fl_Preferences *prefs, Root root, const char
   snprintf(filename + strlen(filename), sizeof(filename) - strlen(filename),
            "/%s/%s.prefs", vendor, application);
   for (char *s = filename; *s; s++) if (*s == '\\') *s = '/';
-#elif defined ( __APPLE__ )
+#elif defined ( __APPLE_QUARTZ__ )
   // TODO: verify that this is the Apple sanctioned way of finding these folders
   // (On MSWindows, this frequently leads to issues with internationalized systems)
   // Carbon: err = FindFolder( kLocalDomain, kPreferencesFolderType, 1, &spec.vRefNum, &spec.parID );
@@ -1162,7 +1162,7 @@ int Fl_Preferences::RootNode::write() {
   fprintf( f, "; application: %s\n", application_ );
   prefs_->node->write( f );
   fclose( f );
-#if !(defined(__APPLE__) || defined(WIN32))
+#if !(defined(__APPLE_QUARTZ__) || defined(WIN32))
   // unix: make sure that system prefs are user-readable
   if (strncmp(filename_, "/etc/fltk/", 10) == 0) {
     char *p;
@@ -1191,7 +1191,7 @@ char Fl_Preferences::RootNode::getPath( char *path, int pathlen ) {
   if ( !s ) return 0;
   *s = 0;
   char ret = fl_make_path( path );
-#if !(defined(__APPLE__) || defined(WIN32))
+#if !(defined(__APPLE_QUARTZ__) || defined(WIN32))
   // unix: make sure that system prefs dir. is user-readable
   if (strncmp(path, "/etc/fltk/", 10) == 0) {
     fl_chmod(path, 0755); // rwxr-xr-x
diff --git a/src/Fl_Printer.cxx b/src/Fl_Printer.cxx
index be081ad7d..f376c9a43 100644
--- a/src/Fl_Printer.cxx
+++ b/src/Fl_Printer.cxx
@@ -64,17 +64,17 @@ const char *Fl_Printer::property_save = "Save";
 const char *Fl_Printer::property_cancel = "Cancel";
 
 const char *Fl_Printer::class_id = "Fl_Printer";
-#if defined(__APPLE__) || defined(WIN32) || defined(FL_DOXYGEN)
+#if defined(__APPLE_QUARTZ__) || defined(WIN32) || defined(FL_DOXYGEN)
 const char *Fl_System_Printer::class_id = Fl_Printer::class_id;
 #endif
-#if !( defined(__APPLE__) || defined(WIN32) )
+#if !( defined(__APPLE_QUARTZ__) || defined(WIN32) )
 const char *Fl_PostScript_Printer::class_id = Fl_Printer::class_id;
 #endif
 
-#if defined(__APPLE__) || defined(WIN32)
+#if defined(__APPLE_QUARTZ__) || defined(WIN32)
 void Fl_System_Printer::set_current(void)
 {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   fl_gc = (CGContextRef)gc;
 #elif defined(WIN32)
   fl_gc = (HDC)gc;
@@ -90,7 +90,7 @@ void Fl_System_Printer::origin(int *x, int *y)
 #endif
 
 Fl_Printer::Fl_Printer(void) {
-#if defined(WIN32) || defined(__APPLE__)
+#if defined(WIN32) || defined(__APPLE_QUARTZ__)
   printer = new Fl_System_Printer();
 #else
   printer = new Fl_PostScript_Printer();
diff --git a/src/Fl_Quartz_Printer.mm b/src/Fl_Quartz_Printer.mm
index 204ccaf0d..8a66a22df 100644
--- a/src/Fl_Quartz_Printer.mm
+++ b/src/Fl_Quartz_Printer.mm
@@ -16,7 +16,7 @@
 //     http://www.fltk.org/str.php
 //
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 #include <FL/Fl_Printer.H>
 
 #include <FL/Fl.H>
@@ -354,7 +354,7 @@ void Fl_System_Printer::print_window_part(Fl_Window *win, int x, int y, int w, i
   CFRelease(img);
 }
 
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
 //
 // End of "$Id$".
diff --git a/src/Fl_Sys_Menu_Bar.mm b/src/Fl_Sys_Menu_Bar.mm
index 2e7d32caa..3e883921d 100644
--- a/src/Fl_Sys_Menu_Bar.mm
+++ b/src/Fl_Sys_Menu_Bar.mm
@@ -32,7 +32,7 @@
  * Many other calls of the parent class don't work.
  */
 
-#if defined(__APPLE__) || defined(FL_DOXYGEN)
+#if defined(__APPLE_QUARTZ__) || defined(FL_DOXYGEN)
 #include <FL/Fl_Menu_Item.H>
 #include <FL/Fl_Sys_Menu_Bar.H>
 #include <FL/x.H>
@@ -535,7 +535,7 @@ void Fl_Mac_App_Menu::custom_application_menu_items(const Fl_Menu_Item *m)
     [item release];
   }
 }
-#endif /* __APPLE__ */
+#endif /* __APPLE_QUARTZ__ */
 
 //
 // End of "$Id$".
diff --git a/src/Fl_Text_Display.cxx b/src/Fl_Text_Display.cxx
index 6a4d749c9..5210ca31d 100644
--- a/src/Fl_Text_Display.cxx
+++ b/src/Fl_Text_Display.cxx
@@ -2216,7 +2216,7 @@ void Fl_Text_Display::draw_string(int style,
 
     if (style & PRIMARY_MASK) {
       if (Fl::focus() == (Fl_Widget*)this) {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 	if (Fl::compose_state) background = color();// Mac OS: underline marked text
 	else 
 #endif
@@ -2253,18 +2253,18 @@ void Fl_Text_Display::draw_string(int style,
   if (!(style & BG_ONLY_MASK)) {
     fl_color( foreground );
     fl_font( font, fsize );
-#if !(defined(__APPLE__) || defined(WIN32)) && USE_XFT
+#if !(defined(__APPLE_QUARTZ__) || defined(WIN32)) && USE_XFT
     // makes sure antialiased ÄÖÜ do not leak on line above
     fl_push_clip(X, Y, toX - X, mMaxsize);
 #endif
     fl_draw( string, nChars, X, Y + mMaxsize - fl_descent());
-#ifdef __APPLE__ // Mac OS: underline marked (= selected + Fl::compose_state != 0) text
+#ifdef __APPLE_QUARTZ__ // Mac OS: underline marked (= selected + Fl::compose_state != 0) text
     if (Fl::compose_state && (style & PRIMARY_MASK)) {
       fl_color( fl_color_average(foreground, background, 0.6) );
       fl_line(X, Y + mMaxsize - 1, X + fl_width(string, nChars), Y + mMaxsize - 1);
     }
 #endif
-#if !(defined(__APPLE__) || defined(WIN32)) && USE_XFT
+#if !(defined(__APPLE_QUARTZ__) || defined(WIN32)) && USE_XFT
     fl_pop_clip();
 #endif
   }
@@ -2349,7 +2349,7 @@ void Fl_Text_Display::draw_cursor( int X, int Y ) {
   if ( X < text_area.x - 1 || X > text_area.x + text_area.w )
     return;
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   Fl::insertion_point_location(X, bot, fontHeight);
 #endif
   /* For cursors other than the block, make them around 2/3 of a character
@@ -3782,7 +3782,7 @@ void Fl_Text_Display::draw(void) {
   int has_selection = buffer()->selection_position(&start, &end);
   if (damage() & (FL_DAMAGE_ALL | FL_DAMAGE_SCROLL | FL_DAMAGE_EXPOSE)
       && (
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 	  Fl::compose_state ||
 #endif
 	  !has_selection || mCursorPos < start || mCursorPos > end) &&
@@ -3960,7 +3960,7 @@ int Fl_Text_Display::handle(int event) {
       if (dragType==DRAG_START_DND) {
         if (!Fl::event_is_click() && Fl::dnd_text_ops()) {
           const char* copy = buffer()->selection_text();
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
           Fl_X::dnd(1);
 #else
           Fl::dnd();
diff --git a/src/Fl_Text_Editor.cxx b/src/Fl_Text_Editor.cxx
index 70e193a69..2ef48c469 100644
--- a/src/Fl_Text_Editor.cxx
+++ b/src/Fl_Text_Editor.cxx
@@ -141,7 +141,7 @@ static struct {
   { FL_Insert,    FL_SHIFT,                 Fl_Text_Editor::kf_paste      },
   { 'a',          FL_CTRL,                  Fl_Text_Editor::kf_select_all },
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   // Define CMD+key accelerators...
   { 'z',          FL_COMMAND,               Fl_Text_Editor::kf_undo       },
   { 'x',          FL_COMMAND,               Fl_Text_Editor::kf_cut        },
@@ -156,7 +156,7 @@ static struct {
   { FL_Right,     FL_COMMAND|FL_SHIFT,      Fl_Text_Editor::kf_m_s_move   },
   { FL_Up,        FL_COMMAND|FL_SHIFT,      Fl_Text_Editor::kf_m_s_move   },
   { FL_Down,      FL_COMMAND|FL_SHIFT,      Fl_Text_Editor::kf_m_s_move   },
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
   { 0,            0,                        0                             }
 };
@@ -642,7 +642,7 @@ int Fl_Text_Editor::handle_key() {
       if (insert_mode()) insert(Fl::event_text());
       else overstrike(Fl::event_text());
     }
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
     if (Fl::compose_state) {
       int pos = this->insert_position();
       this->buffer()->select(pos - Fl::compose_state, pos);
@@ -685,7 +685,7 @@ int Fl_Text_Editor::handle(int event) {
 
     case FL_UNFOCUS:
       show_cursor(mCursorOn); // redraws the cursor
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
       if (buffer()->selected() && Fl::compose_state) {
 	int pos = insert_position();
 	buffer()->select(pos, pos);
diff --git a/src/Fl_Tooltip.cxx b/src/Fl_Tooltip.cxx
index cff54fae5..2a4e68c72 100644
--- a/src/Fl_Tooltip.cxx
+++ b/src/Fl_Tooltip.cxx
@@ -75,7 +75,7 @@ Fl_Widget* Fl_Tooltip::widget_ = 0;
 static Fl_TooltipBox *window = 0;
 static int Y,H;
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 // returns the unique tooltip window
 Fl_Window *Fl_Tooltip::current_window(void)
 {
@@ -156,7 +156,7 @@ static void tooltip_timeout(void*) {
       if (window) window->hide();
     } else {
       int condition = 1;
-#if !(defined(__APPLE__) || defined(WIN32))
+#if !(defined(__APPLE_QUARTZ__) || defined(WIN32))
       condition = (Fl::grab() == NULL);
 #endif
       if ( condition ) {
diff --git a/src/Fl_Tree_Prefs.cxx b/src/Fl_Tree_Prefs.cxx
index 783787704..9f542d146 100644
--- a/src/Fl_Tree_Prefs.cxx
+++ b/src/Fl_Tree_Prefs.cxx
@@ -28,7 +28,7 @@
 //    These can be replaced via prefs.openicon()/closeicon()
 //
 static const char * const L_open_xpm[] = {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   "11 11 2 1",
   ".  c None",
   "@  c #000000",
@@ -43,7 +43,7 @@ static const char * const L_open_xpm[] = {
   "...@@@.....",
   "...@@......",
   "...@......."
-#else /* __APPLE__ */
+#else /* __APPLE_QUARTZ__ */
   "11 11 3 1",
   ".	c #fefefe",
   "#	c #444444",
@@ -59,12 +59,12 @@ static const char * const L_open_xpm[] = {
   "#.........#",
   "#.........#",
   "###########"
-#endif /* __APPLE__ */
+#endif /* __APPLE_QUARTZ__ */
 };
 static Fl_Pixmap L_openpixmap(L_open_xpm);
 
 static const char * const L_close_xpm[] = {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   "11 11 2 1",
   ".  c None",
   "@  c #000000",
@@ -79,7 +79,7 @@ static const char * const L_close_xpm[] = {
   ".....@.....",
   "...........",
   "..........."
-#else /* __APPLE__ */
+#else /* __APPLE_QUARTZ__ */
   "11 11 3 1",
   ".	c #fefefe",
   "#	c #444444",
@@ -95,7 +95,7 @@ static const char * const L_close_xpm[] = {
   "#.........#",
   "#.........#",
   "###########"
-#endif /* __APPLE__ */
+#endif /* __APPLE_QUARTZ__ */
 };
 static Fl_Pixmap L_closepixmap(L_close_xpm);
 
@@ -157,11 +157,11 @@ Fl_Tree_Prefs::Fl_Tree_Prefs() {
   _labelfgcolor           = FL_BLACK;
   _labelbgcolor           = 0xffffffff;		// we use this as 'transparent'
   _connectorcolor         = Fl_Color(43);
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   _connectorstyle         = FL_TREE_CONNECTOR_NONE;
-#else /* __APPLE__ */
+#else /* __APPLE_QUARTZ__ */
   _connectorstyle         = FL_TREE_CONNECTOR_DOTTED;
-#endif /* __APPLE__ */
+#endif /* __APPLE_QUARTZ__ */
   _openimage              = &L_openpixmap;
   _closeimage             = &L_closepixmap;
   _userimage              = 0;
diff --git a/src/Fl_Window.cxx b/src/Fl_Window.cxx
index b066efe61..d11d8d849 100644
--- a/src/Fl_Window.cxx
+++ b/src/Fl_Window.cxx
@@ -97,7 +97,7 @@ Fl_Window::~Fl_Window() {
   delete icon_;
   if (shape_data_) {
     if (shape_data_->todelete_) delete shape_data_->todelete_;
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
     if (shape_data_->mask) {
       CGImageRelease(shape_data_->mask);
     }
@@ -436,7 +436,7 @@ void Fl_Window::free_icons() {
 }
 
 
-#ifndef __APPLE__
+#ifndef __APPLE_QUARTZ__
 /**
   Waits for the window to be displayed after calling show().
 
@@ -504,7 +504,7 @@ void Fl_Window::wait_for_expose() {
     Fl::wait();
   }
 }
-#endif  // ! __APPLE__
+#endif  // ! __APPLE_QUARTZ__
 
 //
 // End of "$Id$".
diff --git a/src/Fl_Window_hotspot.cxx b/src/Fl_Window_hotspot.cxx
index 626ad8885..5dae1e049 100644
--- a/src/Fl_Window_hotspot.cxx
+++ b/src/Fl_Window_hotspot.cxx
@@ -49,7 +49,7 @@ void Fl_Window::hotspot(int X, int Y, int offscreen) {
         top = bottom = GetSystemMetrics(SM_CYFIXEDFRAME);
       }
       top += GetSystemMetrics(SM_CYCAPTION);
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
       top = 24;
       left = 2;
       right = 2;
diff --git a/src/Fl_Window_iconize.cxx b/src/Fl_Window_iconize.cxx
index 3d9546c85..8e238bf2f 100644
--- a/src/Fl_Window_iconize.cxx
+++ b/src/Fl_Window_iconize.cxx
@@ -27,7 +27,7 @@ void Fl_Window::iconize() {
   } else {
 #ifdef WIN32
     ShowWindow(i->xid, SW_SHOWMINNOACTIVE);
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
     i->collapse();
 #else
     XIconifyWindow(fl_display, i->xid, fl_screen);
diff --git a/src/Fl_Window_shape.cxx b/src/Fl_Window_shape.cxx
index f4a4c97a3..82fd2676f 100644
--- a/src/Fl_Window_shape.cxx
+++ b/src/Fl_Window_shape.cxx
@@ -27,7 +27,7 @@
 
 #ifdef WIN32
 # include <malloc.h> // needed for VisualC2010
-#elif !defined(__APPLE__)
+#elif !defined(__APPLE_QUARTZ__)
 #include <config.h>
 #if HAVE_DLFCN_H
 #include <dlfcn.h>
@@ -37,7 +37,7 @@
 #endif
 
 
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
 
 static void MyProviderReleaseData (void *info, const void *data, size_t size) {
   delete[] (uchar*)data;
@@ -166,12 +166,12 @@ void Fl_Window::combine_mask()
 }
 #endif // !FL_DOXYGEN
 
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
 
 void Fl_Window::shape_bitmap_(Fl_Image* b) {
   shape_data_->shape_ = b;
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
   if (b) {
     // complement mask bits and perform bitwise inversion of all bytes and also reverse top and bottom
     int bytes_per_row = (b->w() + 7)/8;
@@ -192,7 +192,7 @@ void Fl_Window::shape_bitmap_(Fl_Image* b) {
 }
 
 
-#if defined(__APPLE__) // on the mac, use an 8-bit mask
+#if defined(__APPLE_QUARTZ__) // on the mac, use an 8-bit mask
 /* the image can be of any depth
  offset gives the byte offset from the pixel start to the byte used to construct the shape
  */
@@ -320,7 +320,7 @@ void Fl_Window::shape(const Fl_Image* img) {
 #if FLTK_ABI_VERSION >= 10303
   if (shape_data_) {
     if (shape_data_->todelete_) { delete shape_data_->todelete_; }
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
     if (shape_data_->mask) { CGImageRelease(shape_data_->mask); }
 #endif
     }
@@ -339,7 +339,7 @@ void Fl_Window::shape(const Fl_Image* img) {
 
 void Fl_Window::draw() {
   if (shape_data_) {
-# if defined(__APPLE__) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_4
+# if defined(__APPLE_QUARTZ__) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_4
     if (shape_data_->mask && (&CGContextClipToMask != NULL)) {
       CGContextClipToMask(fl_gc, CGRectMake(0,0,w(),h()), shape_data_->mask); // requires Mac OS 10.4
     }
@@ -354,7 +354,7 @@ void Fl_Window::draw() {
       SetWindowRgn(fl_xid(this), region, TRUE); // the system deletes the region when it's no longer needed
       delete temp;
     }
-#elif !(defined(__APPLE__) || defined(WIN32))
+#elif !(defined(__APPLE_QUARTZ__) || defined(WIN32))
     if (( shape_data_->lw_ != w() || shape_data_->lh_ != h() ) && shape_data_->shape_) {
         // size of window has changed since last time
     combine_mask();
@@ -410,7 +410,7 @@ void Fl_Window::draw() {
     }
   }
 #endif
-# if defined(__APPLE__) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_4
+# if defined(__APPLE_QUARTZ__) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_4
   if (shape_data_) CGContextRestoreGState(fl_gc);
 # endif
   
diff --git a/src/Fl_arg.cxx b/src/Fl_arg.cxx
index 184f52fc9..384643eb7 100644
--- a/src/Fl_arg.cxx
+++ b/src/Fl_arg.cxx
@@ -28,7 +28,7 @@
 #include <ctype.h>
 #include "flstring.h"
 
-#if defined(WIN32) || defined(__APPLE__)
+#if defined(WIN32) || defined(__APPLE_QUARTZ__)
 int XParseGeometry(const char*, int*, int*, unsigned int*, unsigned int*);
 #  define NoValue	0x0000
 #  define XValue  	0x0001
@@ -170,7 +170,7 @@ int Fl::arg(int argc, char **argv, int &i) {
     i++;
     return 1;
   }
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   // The Finder application in MacOS X passes the "-psn_N_NNNNN" option
   // to all apps...
   else if (strcmp(s, "NSDocumentRevisionsDebugMode") == 0) {
@@ -181,7 +181,7 @@ int Fl::arg(int argc, char **argv, int &i) {
     i++;
     return 1;
   }
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
   const char *v = argv[i+1];
   if (i >= argc-1 || !v)
@@ -194,7 +194,7 @@ int Fl::arg(int argc, char **argv, int &i) {
     if (!flags) return 0;
     geometry = v;
 
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
   } else if (fl_match(s, "display", 2)) {
     Fl::display(v);
 #endif
@@ -295,7 +295,7 @@ void Fl_Window::show(int argc, char **argv) {
 
   Fl::get_system_colors();
 
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
   // Get defaults for drag-n-drop and focus...
   const char *key = 0, *val;
 
@@ -316,7 +316,7 @@ void Fl_Window::show(int argc, char **argv) {
   if (val) Fl::visible_focus(strcasecmp(val, "true") == 0 ||
                              strcasecmp(val, "on") == 0 ||
                              strcasecmp(val, "yes") == 0);
-#endif // !WIN32 && !__APPLE__
+#endif // !WIN32 && !__APPLE_QUARTZ__
 
   // set colors first, so background_pixel is correct:
   static char beenhere;
@@ -355,7 +355,7 @@ void Fl_Window::show(int argc, char **argv) {
   // Show the window AFTER we have set the colors and scheme.
   show();
 
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
   // set the command string, used by state-saving window managers:
   int j;
   int n=0; for (j=0; j<argc; j++) n += strlen(argv[j])+1;
@@ -365,7 +365,7 @@ void Fl_Window::show(int argc, char **argv) {
   XChangeProperty(fl_display, fl_xid(this), XA_WM_COMMAND, XA_STRING, 8, 0,
 		  (unsigned char *)buffer, p-buffer-1);
   delete[] buffer;
-#endif // !WIN32 && !__APPLE__
+#endif // !WIN32 && !__APPLE_QUARTZ__
 }
 
 // Calls useful for simple demo programs, with automatic help message:
@@ -402,7 +402,7 @@ void Fl::args(int argc, char **argv) {
   int i; if (Fl::args(argc,argv,i) < argc) Fl::error(helpmsg);
 }
 
-#if defined(WIN32) || defined(__APPLE__)
+#if defined(WIN32) || defined(__APPLE_QUARTZ__)
 
 /* the following function was stolen from the X sources as indicated. */
 
diff --git a/src/Fl_cocoa.mm b/src/Fl_cocoa.mm
index c9ee7d76b..6a15d7b7b 100644
--- a/src/Fl_cocoa.mm
+++ b/src/Fl_cocoa.mm
@@ -29,7 +29,7 @@
 // One Compile to copy them all and in the bundle bind them,
 // in the Land of MacOS X where the Drop-Shadows lie."
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 
 #define CONSOLIDATE_MOTION 0
 extern "C" {
@@ -4877,7 +4877,7 @@ int Fl_X::calc_mac_os_version() {
   return fl_mac_os_version;
 }
 
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
 //
 // End of "$Id$".
diff --git a/src/Fl_compose.cxx b/src/Fl_compose.cxx
index b5ac1625b..d32309d3d 100644
--- a/src/Fl_compose.cxx
+++ b/src/Fl_compose.cxx
@@ -27,12 +27,12 @@ Utility functions to support text input.
 
 #ifndef FL_DOXYGEN
 int Fl::compose_state = 0;
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 int Fl_X::next_marked_length = 0;
 #endif
 #endif
 
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 extern XIC fl_xim_ic;
 #endif
 
@@ -78,7 +78,7 @@ extern XIC fl_xim_ic;
  */
 int Fl::compose(int& del) {
   int condition;
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
   int has_text_key = Fl::compose_state || Fl::e_keysym <= '~' || Fl::e_keysym == FL_Iso_Key ||
   Fl::e_keysym == FL_JIS_Underscore || Fl::e_keysym == FL_Yen ||
   (Fl::e_keysym >= FL_KP && Fl::e_keysym <= FL_KP_Last && Fl::e_keysym != FL_KP_Enter);
@@ -92,10 +92,10 @@ unsigned char ascii = (unsigned char)e_text[0];
 #else
   condition = (e_state & (FL_ALT | FL_META | FL_CTRL)) && !(ascii & 128) ;
 #endif // WIN32
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
   if (condition) { del = 0; return 0;} // this stuff is to be treated as a function key
   del = Fl::compose_state;
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   Fl::compose_state = Fl_X::next_marked_length;
 #else
   Fl::compose_state = 0;
@@ -105,7 +105,7 @@ unsigned char ascii = (unsigned char)e_text[0];
   return 1;
 }
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 static int insertion_point_x = 0;
 static int insertion_point_y = 0;
 static int insertion_point_height = 0;
@@ -131,7 +131,7 @@ void Fl::insertion_point_location(int x, int y, int height) {
   insertion_point_y = y;
   insertion_point_height = height;
 }
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
 /**
  If the user moves the cursor, be sure to call Fl::compose_reset().
@@ -142,7 +142,7 @@ void Fl::insertion_point_location(int x, int y, int height) {
 void Fl::compose_reset()
 {
   Fl::compose_state = 0;
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
   if (fl_xim_ic) XmbResetIC(fl_xim_ic);
 #endif
 }
diff --git a/src/Fl_display.cxx b/src/Fl_display.cxx
index fd942d8a3..1c1b74755 100644
--- a/src/Fl_display.cxx
+++ b/src/Fl_display.cxx
@@ -30,7 +30,7 @@
     and does nothing useful under WIN32.
 */
 void Fl::display(const char *d) {
-#if defined(__APPLE__) || defined(WIN32)
+#if defined(__APPLE_QUARTZ__) || defined(WIN32)
   (void)d;
 #else
   static char e[1024];
@@ -43,7 +43,7 @@ void Fl::display(const char *d) {
     }
   }
   putenv(e);
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 }
 
 //
diff --git a/src/Fl_get_key.cxx b/src/Fl_get_key.cxx
index 4e7d6c649..19dbce8d3 100644
--- a/src/Fl_get_key.cxx
+++ b/src/Fl_get_key.cxx
@@ -18,7 +18,7 @@
 
 #ifdef WIN32
 #  include "Fl_get_key_win32.cxx"
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
 #  include "Fl_get_key_mac.cxx"
 #else
 
diff --git a/src/Fl_get_system_colors.cxx b/src/Fl_get_system_colors.cxx
index c0385d53f..aa0262cea 100644
--- a/src/Fl_get_system_colors.cxx
+++ b/src/Fl_get_system_colors.cxx
@@ -92,7 +92,7 @@ static void set_selection_color(uchar r, uchar g, uchar b) {
   Fl::set_color(FL_SELECTION_COLOR,r,g,b);
 }
 
-#if defined(WIN32) || defined(__APPLE__)
+#if defined(WIN32) || defined(__APPLE_QUARTZ__)
 
 #  include <stdio.h>
 // simulation of XParseColor:
@@ -129,7 +129,7 @@ int fl_parse_color(const char* p, uchar& r, uchar& g, uchar& b) {
     return 1;
   } else return 0;
 }
-#endif // WIN32 || __APPLE__
+#endif // WIN32 || __APPLE_QUARTZ__
 
 
 /** \fn Fl::get_system_colors()
@@ -169,7 +169,7 @@ void Fl::get_system_colors() {
   getsyscolor(COLOR_HIGHLIGHT,	0,     set_selection_color);
 }
 
-#elif defined(__APPLE__)			// --- APPLE ---
+#elif defined(__APPLE_QUARTZ__)			// --- APPLE ---
 
 // MacOS X currently supports two color schemes - Blue and Graphite.
 // Since we aren't emulating the Aqua interface (even if Apple would
@@ -292,13 +292,13 @@ static Fl_Pixmap	tile(tile_xpm);
 int Fl::scheme(const char *s) {
   if (!s) {
     if ((s = getenv("FLTK_SCHEME")) == NULL) {
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
       const char* key = 0;
       if (Fl::first_window()) key = Fl::first_window()->xclass();
       if (!key) key = "fltk";
       fl_open_display();
       s = XGetDefault(fl_display, key, "scheme");
-#endif // !WIN32 && !__APPLE__
+#endif // !WIN32 && !__APPLE_QUARTZ__
     }
   }
 
diff --git a/src/Fl_grab.cxx b/src/Fl_grab.cxx
index 10d5e1d32..d810519ec 100644
--- a/src/Fl_grab.cxx
+++ b/src/Fl_grab.cxx
@@ -37,7 +37,7 @@ extern void fl_fix_focus(); // in Fl.cxx
 extern HWND fl_capture;
 #endif
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 extern void *fl_capture;
 #endif
 
@@ -56,7 +56,7 @@ void Fl::grab(Fl_Window* win) {
 #ifdef WIN32
       SetActiveWindow(fl_capture = fl_xid(first_window()));
       SetCapture(fl_capture);
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
       fl_capture = Fl_X::i(first_window())->xid;
       Fl_X::i(first_window())->set_key_window();
 #else
@@ -85,7 +85,7 @@ void Fl::grab(Fl_Window* win) {
 #ifdef WIN32
       fl_capture = 0;
       ReleaseCapture();
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
       fl_capture = 0;
 #else
       // We must keep the grab in the non-EWMH fullscreen case
diff --git a/src/Fl_own_colormap.cxx b/src/Fl_own_colormap.cxx
index e0984518c..7e5265789 100644
--- a/src/Fl_own_colormap.cxx
+++ b/src/Fl_own_colormap.cxx
@@ -41,7 +41,7 @@
 
 void Fl::own_colormap() {}
 
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
 // MacOS X always provides a TrueColor interface...
 
 void Fl::own_colormap() {}
diff --git a/src/Fl_visual.cxx b/src/Fl_visual.cxx
index c9df1a19a..0fbce48a5 100644
--- a/src/Fl_visual.cxx
+++ b/src/Fl_visual.cxx
@@ -65,7 +65,7 @@ int Fl::visual(int flags) {
   if ((flags & FL_RGB8) && GetDeviceCaps(fl_gc,BITSPIXEL)<24) return 0;
   return 1;
 }
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
 
 // \todo Mac : need to implement Visual flags
 int Fl::visual(int flags) {
diff --git a/src/Fl_x.cxx b/src/Fl_x.cxx
index 46c5c5d26..a352917d2 100644
--- a/src/Fl_x.cxx
+++ b/src/Fl_x.cxx
@@ -16,7 +16,7 @@
 
 #ifdef WIN32
 //#  include "Fl_win32.cxx"
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
 //#  include "Fl_mac.cxx"	// now Fl_cocoa.mm
 #elif !defined(FL_DOXYGEN)
 
diff --git a/src/filename_absolute.cxx b/src/filename_absolute.cxx
index 412c5be06..8baada9f7 100644
--- a/src/filename_absolute.cxx
+++ b/src/filename_absolute.cxx
@@ -219,11 +219,11 @@ fl_filename_relative(char       *to,	// O - Relative filename
       *slash != '\0' && *newslash != '\0';
        slash ++, newslash ++)
     if (isdirsep(*slash) && isdirsep(*newslash)) continue;
-#if defined(WIN32) || defined(__EMX__) || defined(__APPLE__)
+#if defined(WIN32) || defined(__EMX__) || defined(__APPLE_QUARTZ__)
     else if (tolower(*slash & 255) != tolower(*newslash & 255)) break;
 #else
     else if (*slash != *newslash) break;
-#endif // WIN32 || __EMX__ || __APPLE__
+#endif // WIN32 || __EMX__ || __APPLE_QUARTZ__
 
   // skip over trailing slashes
   if ( *newslash == '\0' && *slash != '\0' && !isdirsep(*slash)
diff --git a/src/filename_list.cxx b/src/filename_list.cxx
index 4b811795f..03dc54aaa 100644
--- a/src/filename_list.cxx
+++ b/src/filename_list.cxx
@@ -22,7 +22,7 @@
 #include <FL/fl_utf8.h>
 #include "flstring.h"
 #include <stdlib.h>
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 #include <FL/x.H>
 #endif
 
@@ -87,7 +87,7 @@ int fl_filename_list(const char *d, dirent ***list,
 
   // Assume that locale encoding is no less dense than UTF-8
   dirlen = strlen(d);
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   dirloc = (char *)d;
 #else
   dirloc = (char *)malloc(dirlen + 1);
@@ -97,7 +97,7 @@ int fl_filename_list(const char *d, dirent ***list,
 #ifndef HAVE_SCANDIR
   // This version is when we define our own scandir
   int n = fl_scandir(dirloc, list, 0, sort);
-#elif defined(HAVE_SCANDIR_POSIX) && !defined(__APPLE__)
+#elif defined(HAVE_SCANDIR_POSIX) && !defined(__APPLE_QUARTZ__)
   // POSIX (2008) defines the comparison function like this:
   int n = scandir(dirloc, list, 0, (int(*)(const dirent **, const dirent **))sort);
 #elif defined(__osf__)
@@ -108,7 +108,7 @@ int fl_filename_list(const char *d, dirent ***list,
   int n = scandir(dirloc, list, 0, (int(*)(void*, void*))sort);
 #elif defined(__sgi)
   int n = scandir(dirloc, list, 0, sort);
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
 # if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_8
   int n = scandir(dirloc, list, 0, (int(*)(const struct dirent**,const struct dirent**))sort);
 # else
@@ -121,7 +121,7 @@ int fl_filename_list(const char *d, dirent ***list,
   int n = scandir(dirloc, list, 0, (int(*)(const void*,const void*))sort);
 #endif
 
-#ifndef __APPLE__
+#ifndef __APPLE_QUARTZ__
   free(dirloc);
 #endif
 
@@ -140,7 +140,7 @@ int fl_filename_list(const char *d, dirent ***list,
     int newlen;
     dirent *de = (*list)[i];
     int len = strlen(de->d_name);
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
     newlen = len;
 #else
     newlen = fl_utf8from_mb(NULL, 0, de->d_name, len);
@@ -149,7 +149,7 @@ int fl_filename_list(const char *d, dirent ***list,
 
     // Conversion to UTF-8
     memcpy(newde, de, de->d_name - (char*)de);
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
     strcpy(newde->d_name, de->d_name);
 #else
     fl_utf8from_mb(newde->d_name, newlen + 1, de->d_name, len);
diff --git a/src/fl_ask.cxx b/src/fl_ask.cxx
index 7ef45cc26..13a8d55c1 100644
--- a/src/fl_ask.cxx
+++ b/src/fl_ask.cxx
@@ -54,7 +54,7 @@ static const char *message_title_default;
 Fl_Font fl_message_font_ = FL_HELVETICA;
 Fl_Fontsize fl_message_size_ = -1;
 static int enableHotspot = 1;
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 extern "C" void NSBeep(void);
 #endif
 
@@ -300,7 +300,7 @@ void fl_beep(int type) {
       MessageBeep(0xFFFFFFFF);
       break;
   }
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
   switch (type) {
     case FL_BEEP_DEFAULT :
     case FL_BEEP_ERROR :
diff --git a/src/fl_color.cxx b/src/fl_color.cxx
index 6b03bb159..3188b75bf 100644
--- a/src/fl_color.cxx
+++ b/src/fl_color.cxx
@@ -25,7 +25,7 @@
 
 #ifdef WIN32
 #  include "fl_color_win32.cxx"
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
 #  include "fl_color_mac.cxx"
 #else
 
diff --git a/src/fl_dnd.cxx b/src/fl_dnd.cxx
index 4da6c91a2..e02949cb1 100644
--- a/src/fl_dnd.cxx
+++ b/src/fl_dnd.cxx
@@ -18,7 +18,7 @@
 
 #ifdef WIN32
 #  include "fl_dnd_win32.cxx"
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
 //#  include "fl_dnd_mac.cxx"
 #else
 #  include "fl_dnd_x.cxx"
diff --git a/src/fl_draw.cxx b/src/fl_draw.cxx
index da6e7a277..95652239d 100644
--- a/src/fl_draw.cxx
+++ b/src/fl_draw.cxx
@@ -101,7 +101,7 @@ static const char* expand_text_(const char* from, char*& buf, int maxbuf, double
  Also, invalid UTF-8 sequences are copied unchanged by this procedure.
  Therefore, checking for tab, space, control, & or @, and copying the byte otherwise, is enough.
  } else  if (handle_utf8_seq(p, o)) { // figure out if we have an utf8 valid sequence before we determine the nbsp test validity:
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
     } else if (c == 0xCA) { // non-breaking space in MacRoman
 #else
     } else if (c == 0xA0) { // non-breaking space in ISO 8859
diff --git a/src/fl_draw_image.cxx b/src/fl_draw_image.cxx
index fd93e63c6..4f7ea6da9 100644
--- a/src/fl_draw_image.cxx
+++ b/src/fl_draw_image.cxx
@@ -28,7 +28,7 @@
 
 #ifdef WIN32
 #  include "fl_draw_image_win32.cxx"
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
 #  include "fl_draw_image_mac.cxx"
 #else
 
diff --git a/src/fl_encoding_latin1.cxx b/src/fl_encoding_latin1.cxx
index 1a486b361..47e789526 100644
--- a/src/fl_encoding_latin1.cxx
+++ b/src/fl_encoding_latin1.cxx
@@ -21,7 +21,7 @@
 #include <stdlib.h>
 #include "flstring.h"
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
  
 // These function assume a western code page. If you need to support 
 // scripts that are not part of this code page, you might want to
diff --git a/src/fl_encoding_mac_roman.cxx b/src/fl_encoding_mac_roman.cxx
index 83bddab77..db4848bd7 100644
--- a/src/fl_encoding_mac_roman.cxx
+++ b/src/fl_encoding_mac_roman.cxx
@@ -35,7 +35,7 @@
 // lookup tables below will convert all common character codes and replace
 // unknown characters with an upsidedown question mark.
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 
 const char *fl_mac_roman_to_local(const char *t, int)
 {
diff --git a/src/fl_font.cxx b/src/fl_font.cxx
index 26960e081..d5c8b91b4 100644
--- a/src/fl_font.cxx
+++ b/src/fl_font.cxx
@@ -47,7 +47,7 @@
 
 #ifdef WIN32
 #  include "fl_font_win32.cxx"
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
 #  include "fl_font_mac.cxx"
 #elif USE_XFT
 #  include "fl_font_xft.cxx"
@@ -55,7 +55,7 @@
 #  include "fl_font_x.cxx"
 #endif // WIN32
 
-#if ! (defined(WIN32) || defined(__APPLE__))
+#if ! (defined(WIN32) || defined(__APPLE_QUARTZ__))
 XFontStruct *fl_X_core_font()
 {
   return fl_xfont.value();
@@ -85,7 +85,7 @@ void fl_text_extents(const char *c, int &dx, int &dy, int &w, int &h) {
 
 
 void fl_draw(const char* str, int l, float x, float y) {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   fl_graphics_driver->draw(str, l, x, y);
 #else
   fl_draw(str, l, (int)x, (int)y);
diff --git a/src/fl_open_uri.cxx b/src/fl_open_uri.cxx
index d25b5b9a9..cf2686e6f 100644
--- a/src/fl_open_uri.cxx
+++ b/src/fl_open_uri.cxx
@@ -45,9 +45,9 @@
 // Local functions...
 //
 
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 static char	*path_find(const char *program, char *filename, int filesize);
-#endif // !WIN32 && !__APPLE__
+#endif // !WIN32 && !__APPLE_QUARTZ__
 #ifndef WIN32
 static int	run_program(const char *program, char **argv, char *msg, int msglen);
 #endif // !WIN32
@@ -131,7 +131,7 @@ fl_open_uri(const char *uri, char *msg, int msglen) {
 
   return (int)(ShellExecute(HWND_DESKTOP, "open", uri, NULL, NULL, SW_SHOW) > (void *)32);
 
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
   char	*argv[3];			// Command-line arguments
 
   argv[0] = (char*)"open";
@@ -142,7 +142,7 @@ fl_open_uri(const char *uri, char *msg, int msglen) {
 
   return run_program("/usr/bin/open", argv, msg, msglen) != 0;
 
-#else // !WIN32 && !__APPLE__
+#else // !WIN32 && !__APPLE_QUARTZ__
   // Run any of several well-known commands to open the URI.
   //
   // We give preference to the Portland group's xdg-utils
@@ -267,7 +267,7 @@ void fl_decode_uri(char *uri)
 
 /**   @} */
 
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 // Find a program in the path...
 static char *path_find(const char *program, char *filename, int filesize) {
   const char	*path;			// Search path
@@ -299,7 +299,7 @@ static char *path_find(const char *program, char *filename, int filesize) {
 
   return 0;
 }
-#endif // !WIN32 && !__APPLE__
+#endif // !WIN32 && !__APPLE_QUARTZ__
 
 
 #ifndef WIN32
diff --git a/src/fl_overlay.cxx b/src/fl_overlay.cxx
index e87c2bff2..a54558e27 100644
--- a/src/fl_overlay.cxx
+++ b/src/fl_overlay.cxx
@@ -23,7 +23,7 @@
 
 #include <FL/x.H>
 #include <FL/fl_draw.H>
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 #include <config.h>
 #endif
 
diff --git a/src/fl_read_image.cxx b/src/fl_read_image.cxx
index 89ff3e49e..29c4e14b4 100644
--- a/src/fl_read_image.cxx
+++ b/src/fl_read_image.cxx
@@ -25,7 +25,7 @@
 #  include <stdio.h>
 #endif // DEBUG
 
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
 #  include "fl_read_image_mac.cxx"
 #else
 #  include <FL/Fl_RGB_Image.H>
@@ -628,7 +628,7 @@ static uchar *read_win_rectangle(uchar *p, int X, int Y, int w, int h, int alpha
 
 #endif // !WIN32
 
-#endif // !__APPLE__
+#endif // !__APPLE_QUARTZ__
 
 //
 // End of "$Id$".
diff --git a/src/fl_rect.cxx b/src/fl_rect.cxx
index cbbce2896..2c96ca96a 100644
--- a/src/fl_rect.cxx
+++ b/src/fl_rect.cxx
@@ -526,7 +526,7 @@ void Fl_Graphics_Driver::point(int x, int y) {
 
 ////////////////////////////////////////////////////////////////
 
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 // Missing X call: (is this the fastest way to init a 1-rectangle region?)
 // MSWindows equivalent exists, implemented inline in win32.H
 Fl_Region XRectangleRegion(int x, int y, int w, int h) {
diff --git a/src/fl_set_font.cxx b/src/fl_set_font.cxx
index 865f8f00d..44956fb5a 100644
--- a/src/fl_set_font.cxx
+++ b/src/fl_set_font.cxx
@@ -32,7 +32,7 @@ static int table_size;
   the string is not copied, so the string must be in static memory.
 */    
 void Fl::set_font(Fl_Font fnum, const char* name) {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   if (!fl_fonts) fl_fonts = Fl_X::calc_fl_fonts();
 #endif
   while (fnum >= table_size) {
@@ -50,16 +50,16 @@ void Fl::set_font(Fl_Font fnum, const char* name) {
     for (; i < table_size; i++) {
       fl_fonts[i].fontname[0] = 0;
       fl_fonts[i].name = 0;
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
       fl_fonts[i].xlist = 0;
       fl_fonts[i].n = 0;
-#endif // !WIN32 && !__APPLE__
+#endif // !WIN32 && !__APPLE_QUARTZ__
     }
   }
   Fl_Fontdesc* s = fl_fonts+fnum;
   if (s->name) {
     if (!strcmp(s->name, name)) {s->name = name; return;}
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
     if (s->xlist && s->n >= 0) XFreeFontNames(s->xlist);
 #endif
     for (Fl_Font_Descriptor* f = s->first; f;) {
@@ -69,7 +69,7 @@ void Fl::set_font(Fl_Font fnum, const char* name) {
   }
   s->name = name;
   s->fontname[0] = 0;
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
   s->xlist = 0;
 #endif
   s->first = 0;
@@ -85,7 +85,7 @@ void Fl::set_font(Fl_Font fnum, Fl_Font from) {
     of this face.
 */
 const char* Fl::get_font(Fl_Font fnum) {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   if (!fl_fonts) fl_fonts = Fl_X::calc_fl_fonts();
 #endif
   return fl_fonts[fnum].name;
diff --git a/src/fl_set_fonts.cxx b/src/fl_set_fonts.cxx
index 000d5701a..541642a81 100644
--- a/src/fl_set_fonts.cxx
+++ b/src/fl_set_fonts.cxx
@@ -24,7 +24,7 @@
 
 #ifdef WIN32
 #  include "fl_set_fonts_win32.cxx"
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
 #  include "fl_set_fonts_mac.cxx"
 #elif USE_XFT
 #  include "fl_set_fonts_xft.cxx"
diff --git a/src/fl_shortcut.cxx b/src/fl_shortcut.cxx
index f95821848..b49706dac 100644
--- a/src/fl_shortcut.cxx
+++ b/src/fl_shortcut.cxx
@@ -39,7 +39,7 @@
 #include <stdlib.h>
 #include <ctype.h>
 #include "flstring.h"
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 #include <FL/x.H>
 #endif
 
@@ -118,7 +118,7 @@ static Keyname table[] = {
   {FL_Alt_R,	"Alt_R"},
   {FL_Delete,	"Delete"}
 };
-#elif defined(__APPLE__) 
+#elif defined(__APPLE_QUARTZ__) 
 static Keyname table[] = {
   //             v - this column may contain UTF-8 characters
   {' ',         "Space"},
@@ -268,7 +268,7 @@ const char* fl_shortcut_label(unsigned int shortcut, const char **eom) {
   if (eom) *eom = p;
 
   // add key name
-#if defined(WIN32) || defined(__APPLE__) // if not X
+#if defined(WIN32) || defined(__APPLE_QUARTZ__) // if not X
   if (key >= FL_F && key <= FL_F_Last) {
     *p++ = 'F';
     if (key > FL_F+9) *p++ = (key-FL_F)/10+'0';
@@ -458,7 +458,7 @@ int Fl_Widget::test_shortcut(const char *t, const bool require_alt) {
   // for menubars etc. shortcuts must work only if the Alt modifier is pressed
   if (require_alt && Fl::event_state(FL_ALT)==0) return 0;
   unsigned int c = fl_utf8decode(Fl::event_text(), Fl::event_text()+Fl::event_length(), 0);
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   // this line makes underline shortcuts work the same way they do on MSWindow
   // and Linux. 
   if (c && Fl::event_state(FL_ALT)) 
@@ -468,7 +468,7 @@ int Fl_Widget::test_shortcut(const char *t, const bool require_alt) {
   unsigned int ls = label_shortcut(t);
   if (c == ls)
     return 1;
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   // On OS X, we need to simulate the upper case keystroke as well
   if (Fl::event_state(FL_ALT) && c<128 && isalpha(c) && (unsigned)toupper(c)==ls)
     return 1;
diff --git a/src/fl_utf8.cxx b/src/fl_utf8.cxx
index d1ce2d80c..007a43945 100644
--- a/src/fl_utf8.cxx
+++ b/src/fl_utf8.cxx
@@ -40,7 +40,7 @@ extern "C" {
   int XUtf8Tolower(int ucs);
   unsigned short XUtf8IsNonSpacing(unsigned int ucs);
 };
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
 # include <stdio.h>
 # include <time.h>
 //# include <unix.h>
diff --git a/src/gl_draw.cxx b/src/gl_draw.cxx
index bd072ffa8..28568ae5f 100644
--- a/src/gl_draw.cxx
+++ b/src/gl_draw.cxx
@@ -32,11 +32,11 @@
 #include "Fl_Font.H"
 #include <FL/fl_utf8.h>
 
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 #include "Xutf8.h"
 #endif
 
-#if defined(__APPLE__)
+#if defined(__APPLE_QUARTZ__)
 
 #if !defined(kCGBitmapByteOrder32Host) // doc says available 10.4 but some 10.4 don't have it
 #  define kCGBitmapByteOrder32Host 0
@@ -48,7 +48,7 @@
 #  include <FL/Fl_Gl_Window.H>
 #endif // < MAC_OS_X_VERSION_10_4
 
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
 /** Returns the current font's height */
 int   gl_height() {return fl_height();}
@@ -64,7 +64,7 @@ double gl_width(uchar c) {return fl_width(c);}
 static Fl_Font_Descriptor *gl_fontsize;
 
 #define GENLISTSIZE 256
-#ifndef __APPLE__
+#ifndef __APPLE_QUARTZ__
 #  define USE_OksiD_style_GL_font_selection 1  // Most hosts except OSX
 #endif
 
@@ -78,7 +78,7 @@ static Fl_Font_Descriptor *gl_fontsize;
 void  gl_font(int fontid, int size) {
   fl_font(fontid, size);
   Fl_Font_Descriptor *fl_fontsize = fl_graphics_driver->font_descriptor();
-#ifndef __APPLE__
+#ifndef __APPLE_QUARTZ__
   if (!fl_fontsize->listbase) {
 
 #ifdef  USE_OksiD_style_GL_font_selection
@@ -112,11 +112,11 @@ void  gl_font(int fontid, int size) {
 #endif // USE_OksiD_style_GL_font_selection
   }
   glListBase(fl_fontsize->listbase);
-#endif // !__APPLE__
+#endif // !__APPLE_QUARTZ__
   gl_fontsize = fl_fontsize;
 }
 
-#ifndef __APPLE__
+#ifndef __APPLE_QUARTZ__
 static void get_list(int r) {
   gl_fontsize->glok[r] = 1;
 #if defined(USE_X11)
@@ -181,7 +181,7 @@ void gl_remove_displaylist_fonts()
 #endif
 }
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 static void gl_draw_textures(const char* str, int n);
 #endif
 
@@ -191,7 +191,7 @@ static void gl_draw_textures(const char* str, int n);
  \see On the Mac OS X platform, see gl_texture_pile_height(int)
   */
 void gl_draw(const char* str, int n) {
-#ifdef __APPLE__  
+#ifdef __APPLE_QUARTZ__  
   gl_draw_textures(str, n);
 #else
   static unsigned short *buf = NULL;
@@ -338,7 +338,7 @@ void gl_draw_image(const uchar* b, int x, int y, int w, int h, int d, int ld) {
   glDrawPixels(w,h,d<4?GL_RGB:GL_RGBA,GL_UNSIGNED_BYTE,(const ulong*)b);
 }
 
-#if defined(__APPLE__) || defined(FL_DOXYGEN)
+#if defined(__APPLE_QUARTZ__) || defined(FL_DOXYGEN)
 /* Text drawing to an OpenGL scene under Mac OS X is implemented using textures, as recommended by Apple.
  This allows to use any font at any size, and any Unicode character.
  Some old Apple hardware doesn't implement the required GL_EXT_texture_rectangle extension.
@@ -580,7 +580,7 @@ void gl_texture_reset()
 {
   if (gl_fifo) gl_texture_pile_height(gl_texture_pile_height());
 }
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
 #endif // HAVE_GL
 
diff --git a/src/gl_start.cxx b/src/gl_start.cxx
index 49be7e0ca..2d7b70b29 100644
--- a/src/gl_start.cxx
+++ b/src/gl_start.cxx
@@ -46,7 +46,7 @@ static int pw, ph;
 static Fl_Gl_Choice* gl_choice;
 #endif
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 static Fl_Gl_Choice* gl_choice;
 #endif
 
@@ -67,7 +67,7 @@ void gl_start() {
 #endif
   }
   fl_set_gl_context(Fl_Window::current(), context);
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   Fl_X::gl_start(context);
 #elif !defined(WIN32)
   glXWaitX();
@@ -97,7 +97,7 @@ void gl_start() {
 /** Releases an OpenGL context */
 void gl_finish() {
   glFlush();
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
   glXWaitGL();
 #endif
 }
diff --git a/src/glut_compatability.cxx b/src/glut_compatability.cxx
index bd1908fe9..ee25a71a6 100644
--- a/src/glut_compatability.cxx
+++ b/src/glut_compatability.cxx
@@ -38,7 +38,7 @@
 #    include <dlfcn.h>
 #  endif // HAVE_DLFCN_H
 #  define MAXWINDOWS 32
-#  ifdef __APPLE__
+#  ifdef __APPLE_QUARTZ__
 #    include <FL/x.H>
 #  endif
 static Fl_Glut_Window *windows[MAXWINDOWS+1];
diff --git a/src/screen_xywh.cxx b/src/screen_xywh.cxx
index 35aeb57ff..8234f9317 100644
--- a/src/screen_xywh.cxx
+++ b/src/screen_xywh.cxx
@@ -114,7 +114,7 @@ static void screen_init() {
   screens[0].bottom = GetSystemMetrics(SM_CYSCREEN);
   work_area[0] = screens[0];
 }
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
 static XRectangle screens[16];
 static float dpi_h[16];
 static float dpi_v[16];
@@ -179,7 +179,7 @@ static void screen_init() {
     void *libxrandr_addr = dlopen("libXrandr.so.2", RTLD_LAZY);
     if (!libxrandr_addr) libxrandr_addr = dlopen("libXrandr.so", RTLD_LAZY);
 #   ifdef __APPLE_CC__ // allows testing on Darwin + X11
-    if (!libxrandr_addr) libxrandr_addr = dlopen("/opt/X11/lib/libXrandr.dylib", RTLD_LAZY);
+    if (!libxrandr_addr) libxrandr_addr = dlopen("@PREFIX@/lib/libXrandr.dylib", RTLD_LAZY);
 #   endif
     if (libxrandr_addr) XRRSizes_f = (XRRSizes_type)dlsym(libxrandr_addr, "XRRSizes");
   }
@@ -253,7 +253,7 @@ static void screen_init() {
   }
 }
 
-#endif // ( WIN32 || __APPLE__ || ) X11
+#endif // ( WIN32 || __APPLE_QUARTZ__ || ) X11
 
 #ifndef FL_DOXYGEN
 void Fl::call_screen_init() {
@@ -305,7 +305,7 @@ void Fl::screen_work_area(int &X, int &Y, int &W, int &H, int n) {
   Y = work_area[n].top;
   W = work_area[n].right - X;
   H = work_area[n].bottom - Y;
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
   Fl_X::screen_work_area(X, Y, W, H, n);
 #else
   if (n == 0) { // for the main screen, these return the work area
@@ -345,7 +345,7 @@ void Fl::screen_xywh(int &X, int &Y, int &W, int &H, int n) {
     W = GetSystemMetrics(SM_CXSCREEN);
     H = GetSystemMetrics(SM_CYSCREEN);
   }
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
   X = screens[n].x;
   Y = screens[n].y;
   W = screens[n].width;
@@ -441,7 +441,7 @@ void Fl::screen_dpi(float &h, float &v, int n)
     h = float(dpi[n][0]);
     v = float(dpi[n][1]);
   }
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
   if (n >= 0 && n < num_screens) {
     h = dpi_h[n];
     v = dpi_v[n];
diff --git a/src/xutf8/case.c b/src/xutf8/case.c
index 8efc0e397..da89a2a52 100644
--- a/src/xutf8/case.c
+++ b/src/xutf8/case.c
@@ -19,9 +19,9 @@
  * This file is required on all platforms for UTF-8 support
  */
 
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 #  include "../Xutf8.h"
-#endif /* !defined(WIN32) && !defined(__APPLE__) */
+#endif /* !defined(WIN32) && !defined(__APPLE_QUARTZ__) */
 
 #include "headers/case.h"
 #include <stdlib.h>
diff --git a/src/xutf8/is_right2left.c b/src/xutf8/is_right2left.c
index 69a612a48..9ea02afe9 100644
--- a/src/xutf8/is_right2left.c
+++ b/src/xutf8/is_right2left.c
@@ -18,9 +18,9 @@
  * This file is required on all platforms for utf8 support
  */
 
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 #  include "../Xutf8.h"
-#endif /* !defined(WIN32) && !defined(__APPLE__) */
+#endif /* !defined(WIN32) && !defined(__APPLE_QUARTZ__) */
 
 unsigned short
 XUtf8IsRightToLeft(unsigned int ucs) {
diff --git a/src/xutf8/is_spacing.c b/src/xutf8/is_spacing.c
index 6e3d6abd3..d4b896763 100644
--- a/src/xutf8/is_spacing.c
+++ b/src/xutf8/is_spacing.c
@@ -18,9 +18,9 @@
  * This file is required on all platforms for utf8 support
  */
 
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 #  include "../Xutf8.h"
-#endif /* !defined(WIN32) && !defined(__APPLE__) */
+#endif /* !defined(WIN32) && !defined(__APPLE_QUARTZ__) */
 
 #include "headers/spacing.h"
 
diff --git a/src/xutf8/keysym2Ucs.c b/src/xutf8/keysym2Ucs.c
index d01a3a751..440aab3b9 100644
--- a/src/xutf8/keysym2Ucs.c
+++ b/src/xutf8/keysym2Ucs.c
@@ -16,7 +16,7 @@
 
 #define KEYSYM2UCS_INCLUDED
 
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 
 #include "../Xutf8.h"
 #include "imKStoUCS.c"
diff --git a/src/xutf8/lcUniConv/cp936ext.h b/src/xutf8/lcUniConv/cp936ext.h
index e41db3f5d..b693f9992 100644
--- a/src/xutf8/lcUniConv/cp936ext.h
+++ b/src/xutf8/lcUniConv/cp936ext.h
@@ -16,7 +16,7 @@
  *     http://www.fltk.org/str.php
  */
 
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 
 #ifndef CP936
 #ifdef NEED_TOWC
@@ -6243,7 +6243,7 @@ cp936ext_wctomb (conv_t conv, unsigned char *r, ucs4_t wc, int n)
 
 #endif /* CP936 */
 
-#endif /* __APPLE__  WIN32 */
+#endif /* __APPLE_QUARTZ__  WIN32 */
 
 /*
  * End of "$Id$".
diff --git a/src/xutf8/utf8Input.c b/src/xutf8/utf8Input.c
index 9a0c2e5ff..109ab03a9 100644
--- a/src/xutf8/utf8Input.c
+++ b/src/xutf8/utf8Input.c
@@ -14,7 +14,7 @@
  *     http://www.fltk.org/str.php
  */
 
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 
 #include <config.h>
 #include "../Xutf8.h"
diff --git a/src/xutf8/utf8Utils.c b/src/xutf8/utf8Utils.c
index 54bbccf4c..7fdd8c912 100644
--- a/src/xutf8/utf8Utils.c
+++ b/src/xutf8/utf8Utils.c
@@ -18,7 +18,7 @@
  * Unicode to UTF-8 conversion functions.
  */
 
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 
 #include "../Xutf8.h"
 
diff --git a/src/xutf8/utf8Wrap.c b/src/xutf8/utf8Wrap.c
index 61ffeef64..0f190cb02 100644
--- a/src/xutf8/utf8Wrap.c
+++ b/src/xutf8/utf8Wrap.c
@@ -17,7 +17,7 @@
 /*
  * X11 UTF-8 text drawing functions.
  */
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 
 #include "../Xutf8.h"
 #include <X11/Xlib.h>
diff --git a/test/blocks.cxx b/test/blocks.cxx
index 43c3ffe19..f44f4097b 100644
--- a/test/blocks.cxx
+++ b/test/blocks.cxx
@@ -43,9 +43,9 @@
 #  define ALSA_PCM_NEW_HW_PARAMS_API
 #  include <alsa/asoundlib.h>
 #endif // HAVE_ALSA_ASOUNDLIB_H
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 #  include <CoreAudio/AudioHardware.h>
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 #ifdef WIN32
 #  include <mmsystem.h>
 #endif // WIN32
@@ -137,7 +137,7 @@ Fl_Tiled_Image screen_tile(&screen_bitmap);
 // the CoreAudio implementation you see here!
 class BlockSound {
   // Private, OS-specific data...
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   AudioDeviceID device;
 #ifndef MAC_OS_X_VERSION_10_5
 #define MAC_OS_X_VERSION_10_5 1050
@@ -167,7 +167,7 @@ class BlockSound {
 #  ifdef HAVE_ALSA_ASOUNDLIB_H
   snd_pcm_t *handle;
 #  endif // HAVE_ALSA_ASOUNDLIB_H
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
   public:
 
@@ -190,7 +190,7 @@ int BlockSound::sample_size = 0;
 BlockSound::BlockSound() {
   sample_size = 0;
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   remaining = 0;
 
   UInt32 size = sizeof(device);
@@ -283,7 +283,7 @@ BlockSound::BlockSound() {
     }
   }
 #  endif // HAVE_ALSA_ASOUNDLIB_H
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
   if (sample_size) {
     // Make an explosion sound by passing white noise through a low pass
@@ -310,7 +310,7 @@ BlockSound::BlockSound() {
 
 // Cleanup the BlockSound class
 BlockSound::~BlockSound() {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   if (sample_size) {
 #  if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5
     AudioDeviceStop(device, audio_proc_id);
@@ -339,7 +339,7 @@ BlockSound::~BlockSound() {
     snd_pcm_close(handle);
   }
 #  endif // HAVE_ALSA_ASOUNDLIB_H
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
   if (sample_size) {
     delete[] sample_data;
@@ -347,7 +347,7 @@ BlockSound::~BlockSound() {
 }
 
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 // Callback function for writing audio data...
 OSStatus
 BlockSound::audio_cb(AudioDeviceID device,
@@ -377,7 +377,7 @@ BlockSound::audio_cb(AudioDeviceID device,
 
   return noErr;
 }
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
 
 // Play a note for the given amount of time...
@@ -388,15 +388,15 @@ BlockSound::play_explosion(float duration) {
   if (duration <= 0.0)
     return;
 
-#if defined(__APPLE__) || defined(WIN32) || defined(HAVE_ALSA_ASOUNDLIB_H)
+#if defined(__APPLE_QUARTZ__) || defined(WIN32) || defined(HAVE_ALSA_ASOUNDLIB_H)
   if (duration > 1.0)
     duration = 1.0;
 
   int samples = (int)(duration * sample_size);
   short *sample_ptr = sample_data + 2 * (sample_size - samples);
-#endif // __APPLE__ || WIN32 || HAVE_ALSA_ASOUNDLIB_H
+#endif // __APPLE_QUARTZ__ || WIN32 || HAVE_ALSA_ASOUNDLIB_H
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   // Point to the next note...
   data      = sample_ptr;
   remaining = samples * 2;
@@ -420,7 +420,7 @@ BlockSound::play_explosion(float duration) {
     }
     return;
   }
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 }
 
 
diff --git a/test/browser.cxx b/test/browser.cxx
index 3c7d673b4..023de4c80 100644
--- a/test/browser.cxx
+++ b/test/browser.cxx
@@ -148,7 +148,7 @@ int main(int argc, char **argv) {
       fname = "../test/browser.cxx";
       done = browser->load(fname);
     }
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
     if ( i == argc ) 
     {
       char buf[2048];
diff --git a/test/color_chooser.cxx b/test/color_chooser.cxx
index 3f6a0cd2a..5e028ecb5 100644
--- a/test/color_chooser.cxx
+++ b/test/color_chooser.cxx
@@ -28,7 +28,7 @@
 
 #include <stdlib.h>
 #include <stdio.h>
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 #include "list_visuals.cxx"
 #endif
 
@@ -114,7 +114,7 @@ int main(int argc, char ** argv) {
            " - : default visual\n"
            " r : call Fl::visual(FL_RGB)\n"
            " c : call Fl::own_colormap()\n",argv[0]);
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
     printf(" # : use this visual with an empty colormap:\n");
     list_visuals();
 #endif
@@ -127,7 +127,7 @@ int main(int argc, char ** argv) {
     } else if (argv[i][0] == 'c') {
       Fl::own_colormap();
     } else if (argv[i][0] != '-') {
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
       int visid = atoi(argv[i]);
       fl_open_display();
       XVisualInfo templt; int num;
diff --git a/test/demo.cxx b/test/demo.cxx
index 8499e73a1..e4e391fb1 100644
--- a/test/demo.cxx
+++ b/test/demo.cxx
@@ -75,7 +75,7 @@
 #    define chdir _chdir
 #    define putenv _putenv
 #  endif // !__WATCOMC__
-#elif defined __APPLE__
+#elif defined __APPLE_QUARTZ__
 #include <ApplicationServices/ApplicationServices.h>
 #include <unistd.h> // for chdir()
 #include <stdio.h>
@@ -149,7 +149,7 @@ const char* suffix = "d.exe";		// exe name with trailing 'd'
 # else
 const char* suffix = ".exe";		// exe name w/o trailing 'd'
 # endif
-#elif defined __APPLE__
+#elif defined __APPLE_QUARTZ__
 const char *suffix = ".app";
 #else
 const char *suffix = "";
@@ -371,7 +371,7 @@ void dobut(Fl_Widget *, long arg) {
 
   // format commandline with optional parameters
 
-#if defined(__APPLE__) // macOS
+#if defined(__APPLE_QUARTZ__) // macOS
 
   if (params[0]) {
     // we assume that we have only one argument which is a filename in 'data_path'
@@ -409,7 +409,7 @@ void dobut(Fl_Widget *, long arg) {
     fl_alert("Error starting process, error #%lu\n'%s'", err, command);
   }
 
-#elif defined __APPLE__
+#elif defined __APPLE_QUARTZ__
 
   debug_var("Command", command);
 
@@ -512,7 +512,7 @@ int main(int argc, char **argv) {
   // construct app_path for all executable files
 
   fl_filename_absolute(app_path, sizeof(app_path), argv[0]);
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
     char *q = strstr(app_path, "/Contents/MacOS/");
     if (q) *q = 0;
 #endif
diff --git a/test/editor.cxx b/test/editor.cxx
index c9aa6a4bf..1bae07858 100644
--- a/test/editor.cxx
+++ b/test/editor.cxx
@@ -863,7 +863,7 @@ Fl_Menu_Item menuitems[] = {
     { "&Save File",       FL_COMMAND + 's', (Fl_Callback *)save_cb },
     { "Save File &As...", FL_COMMAND + FL_SHIFT + 's', (Fl_Callback *)saveas_cb, 0, FL_MENU_DIVIDER },
     { "New &View",        FL_ALT
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
       + FL_COMMAND
 #endif
       + 'v', (Fl_Callback *)view_cb, 0 },
@@ -966,7 +966,7 @@ int main(int argc, char **argv) {
   Fl_Window* window = new_view();
 
   window->show(1, argv);
-#ifndef __APPLE__
+#ifndef __APPLE_QUARTZ__
   if (argc > 1) load_file(argv[1], -1);
 #endif
 
diff --git a/test/file_chooser.cxx b/test/file_chooser.cxx
index 9e5427b3c..915252855 100644
--- a/test/file_chooser.cxx
+++ b/test/file_chooser.cxx
@@ -104,7 +104,7 @@ main(int  argc,		// I - Number of command-line arguments
 
   filter = new Fl_Input(50, 10, 315, 25, "Filter:");
   int argn = 1;
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   // OS X may add the process number as the first argument - ignore
   if (argc>argn && strncmp(argv[1], "-psn_", 5)==0)
     argn++;
diff --git a/test/fonts.cxx b/test/fonts.cxx
index a935fdd07..0cd7195ee 100644
--- a/test/fonts.cxx
+++ b/test/fonts.cxx
@@ -156,7 +156,7 @@ int main(int argc, char **argv) {
   create_the_forms();
 
 // For the Unicode test, get all fonts...
-//#ifdef __APPLE__
+//#ifdef __APPLE_QUARTZ__
   int i = 0;
 //#else
 //  int i = fl_choice("Which fonts:","-*","iso8859","All");
diff --git a/test/fractals.cxx b/test/fractals.cxx
index 5d3f1def3..54aadee7f 100644
--- a/test/fractals.cxx
+++ b/test/fractals.cxx
@@ -70,7 +70,7 @@ int main(int, char**) {
 #if defined(WIN32) || defined(__EMX__)
 #  define drand48() (((float) rand())/((float) RAND_MAX))
 #  define srand48(x) (srand((x)))
-#elif defined __APPLE__
+#elif defined __APPLE_QUARTZ__
 #  define drand48() (((float) rand())/((float) RAND_MAX))
 #  define srand48(x) (srand((x)))
 #endif
diff --git a/test/fullscreen.cxx b/test/fullscreen.cxx
index b3ede25bc..041a92e9a 100644
--- a/test/fullscreen.cxx
+++ b/test/fullscreen.cxx
@@ -163,7 +163,7 @@ void border_cb(Fl_Widget *o, void *p) {
   Fl_Window *w = (Fl_Window *)p;
   int d = ((Fl_Button *)o)->value();
   w->border(d);
-#if defined(WIN32) || defined(__APPLE__)
+#if defined(WIN32) || defined(__APPLE_QUARTZ__)
   int wx = w->x(), wy = w->y();
   w->hide(); w->show();
   w->position(wx, wy);
diff --git a/test/image.cxx b/test/image.cxx
index 422566c3f..e5ab5295b 100644
--- a/test/image.cxx
+++ b/test/image.cxx
@@ -73,7 +73,7 @@ void button_cb(Fl_Widget *,void *) {
 }
 
 #include <FL/x.H>
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 #include "list_visuals.cxx"
 #endif
 
@@ -89,7 +89,7 @@ int arg(int argc, char **argv, int &i) {
 }
 
 int main(int argc, char **argv) {
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
   int i = 1;
 
   Fl::args(argc,argv,i,arg);
diff --git a/test/list_visuals.cxx b/test/list_visuals.cxx
index 42bc36f38..635abbd52 100644
--- a/test/list_visuals.cxx
+++ b/test/list_visuals.cxx
@@ -24,7 +24,7 @@
 //     http://www.fltk.org/str.php
 //
 
-#if defined(WIN32) || defined(__APPLE__)
+#if defined(WIN32) || defined(__APPLE_QUARTZ__)
 #include <FL/Fl.H>
 #include <FL/fl_message.H>
 
diff --git a/test/menubar.cxx b/test/menubar.cxx
index 37a49c168..1ea954fb3 100644
--- a/test/menubar.cxx
+++ b/test/menubar.cxx
@@ -170,7 +170,7 @@ Fl_Menu_Item pulldown[] = {
   {0}
 };
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 Fl_Menu_Item menu_location[] = {
   {"Fl_Menu_Bar",	0, 0, 0, FL_MENU_VALUE},
   {"Fl_Sys_Menu_Bar",	},
@@ -195,7 +195,7 @@ void menu_location_cb(Fl_Widget* w, void* data)
     menubar->show();
     }
 }
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
 #define WIDTH 700
 
@@ -231,14 +231,14 @@ int main(int argc, char **argv) {
   Fl_Box b(200,200,200,100,"Press right button\nfor a pop-up menu");
   window.resizable(&mb);
   window.size_range(300,400,0,400);
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   Fl_Choice ch2(500,100,150,25,"Use:"); 
   ch2.menu(menu_location);
   ch2.callback(menu_location_cb, &menubar);
 #endif
   window.end();
   
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   Fl_Menu_Item custom[] = {
     {"Preferences…",	0,	test_cb, NULL, FL_MENU_DIVIDER},
     {"Radio1",	0,	test_cb, NULL, FL_MENU_RADIO|FL_MENU_VALUE},
diff --git a/test/native-filechooser.cxx b/test/native-filechooser.cxx
index 81086047f..444874236 100644
--- a/test/native-filechooser.cxx
+++ b/test/native-filechooser.cxx
@@ -80,12 +80,12 @@ int main(int argc, char **argv) {
   ////       no icons will be shown. However, this means you do not need to link in the
   ////       fltk_images library, potentially reducing the size of your executable.
   //// Loading the system icons is not required by the OSX or Windows native file choosers.
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
   Fl_File_Icon::load_system_icons();
 #endif
 
   int argn = 1;
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   // OS X may add the process number as the first argument - ignore
   if (argc>argn && strncmp(argv[1], "-psn_", 5)==0)
     argn++;
diff --git a/test/sudoku.cxx b/test/sudoku.cxx
index ed258c30d..9b9d6be0c 100644
--- a/test/sudoku.cxx
+++ b/test/sudoku.cxx
@@ -35,7 +35,7 @@
 
 #ifdef WIN32
 #  include "sudokurc.h"
-#elif !defined(__APPLE__)
+#elif !defined(__APPLE_QUARTZ__)
 #  include "pixmaps/sudoku.xbm"
 #endif // WIN32
 
@@ -50,9 +50,9 @@
 #  define ALSA_PCM_NEW_HW_PARAMS_API
 #  include <alsa/asoundlib.h>
 #endif // HAVE_ALSA_ASOUNDLIB_H
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 #  include <CoreAudio/AudioHardware.h>
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 #ifdef WIN32
 #  include <mmsystem.h>
 #endif // WIN32
@@ -65,11 +65,11 @@
 #define GROUP_SIZE	160
 #define CELL_SIZE	50
 #define CELL_OFFSET	5
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 #  define MENU_OFFSET	0
 #else
 #  define MENU_OFFSET	25
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
 // Sound class for Sudoku...
 //
@@ -88,7 +88,7 @@
 // the CoreAudio implementation you see here!
 class SudokuSound {
   // Private, OS-specific data...
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   AudioDeviceID device;
 #ifndef MAC_OS_X_VERSION_10_5
 #define MAC_OS_X_VERSION_10_5 1050
@@ -118,7 +118,7 @@ class SudokuSound {
 #  ifdef HAVE_ALSA_ASOUNDLIB_H
   snd_pcm_t *handle;
 #  endif // HAVE_ALSA_ASOUNDLIB_H
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
   // Common data...
   static int frequencies[9];
@@ -219,7 +219,7 @@ int SudokuSound::sample_size = 0;
 SudokuSound::SudokuSound() {
   sample_size = 0;
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   remaining = 0;
 
   UInt32 size = sizeof(device);
@@ -315,7 +315,7 @@ SudokuSound::SudokuSound() {
     }
   }
 #  endif // HAVE_ALSA_ASOUNDLIB_H
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
   if (sample_size) {
     // Make each of the notes using a combination of sine and sawtooth waves
@@ -347,7 +347,7 @@ SudokuSound::SudokuSound() {
 
 // Cleanup the SudokuSound class
 SudokuSound::~SudokuSound() {
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   if (sample_size) {
 #  if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5
     AudioDeviceStop(device, audio_proc_id);
@@ -376,7 +376,7 @@ SudokuSound::~SudokuSound() {
     snd_pcm_close(handle);
   }
 #  endif // HAVE_ALSA_ASOUNDLIB_H
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
   if (sample_size) {
     for (int i = 0; i < 9; i ++) {
@@ -386,7 +386,7 @@ SudokuSound::~SudokuSound() {
 }
 
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 // Callback function for writing audio data...
 OSStatus
 SudokuSound::audio_cb(AudioDeviceID device,
@@ -416,7 +416,7 @@ SudokuSound::audio_cb(AudioDeviceID device,
 
   return noErr;
 }
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 
 #define NOTE_DURATION 50
 
@@ -424,7 +424,7 @@ SudokuSound::audio_cb(AudioDeviceID device,
 void SudokuSound::play(char note) {
   Fl::check();
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
   // Point to the next note...
   data      = sample_data[note - 'A'];
   remaining = sample_size * 2;
@@ -480,7 +480,7 @@ void SudokuSound::play(char note) {
   XChangeKeyboardControl(fl_display,
                          KBBellPercent | KBBellPitch | KBBellDuration,
 			 &control);
-#endif // __APPLE__
+#endif // __APPLE_QUARTZ__
 }
 
 
@@ -707,7 +707,7 @@ Sudoku::Sudoku()
   // Set icon for window (MacOS uses app bundle for icon...)
 #ifdef WIN32
   icon((char *)LoadIcon(fl_display, MAKEINTRESOURCE(IDI_ICON)));
-#elif !defined(__APPLE__)
+#elif !defined(__APPLE_QUARTZ__)
   fl_open_display();
   icon((char *)XCreateBitmapFromData(fl_display, DefaultRootWindow(fl_display),
                                      (char *)sudoku_bits, sudoku_width,
diff --git a/test/tiled_image.cxx b/test/tiled_image.cxx
index 23cb290a8..63a8cad6e 100644
--- a/test/tiled_image.cxx
+++ b/test/tiled_image.cxx
@@ -35,7 +35,7 @@ void button_cb(Fl_Widget *,void *) {
 }
 
 #include <FL/x.H>
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
 #include "list_visuals.cxx"
 #endif
 
@@ -51,7 +51,7 @@ int arg(int argc, char **argv, int &i) {
 }
 
 int main(int argc, char **argv) {
-#if !defined(WIN32) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__APPLE_QUARTZ__)
   int i = 1;
 
   Fl::args(argc,argv,i,arg);
diff --git a/test/utf8.cxx b/test/utf8.cxx
index b2c40fcb9..6d21d046f 100644
--- a/test/utf8.cxx
+++ b/test/utf8.cxx
@@ -421,7 +421,7 @@ int make_font_chooser(void)
   //	font_count = Fl::set_fonts("*");
 #ifdef WIN32
   font_count = Fl::set_fonts("*");
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
   font_count = Fl::set_fonts("*");
 #else
   // Load the systems available fonts - ask for everything that claims to be 
@@ -582,7 +582,7 @@ int main(int argc, char** argv)
   Fl::set_font(extra_font,
 #ifdef WIN32
                " Arial Unicode MS"
-#elif defined(__APPLE__)
+#elif defined(__APPLE_QUARTZ__)
                "Monaco"
 #else
                "-*-*-*-*-*-*-*-*-*-*-*-*-iso10646-1"
diff --git a/zlib/zutil.h b/zlib/zutil.h
index b079ea6a8..16179d6be 100644
--- a/zlib/zutil.h
+++ b/zlib/zutil.h
@@ -159,7 +159,7 @@ extern z_const char * const z_errmsg[10]; /* indexed by 2-zlib_error */
 #  define OS_CODE 18
 #endif
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 #  define OS_CODE 19
 #endif
 
