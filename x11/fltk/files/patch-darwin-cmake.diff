diff --git a/CMake/setup.cmake b/CMake/setup.cmake
index 60b7da109..2c3d6b0d4 100644
--- a/CMake/setup.cmake
+++ b/CMake/setup.cmake
@@ -59,7 +59,7 @@ set (FLTK_DOCDIR ${CMAKE_INSTALL_DATADIR}/doc CACHE PATH
 # set where config files go
 if (WIN32 AND NOT CYGWIN)
   set (FLTK_CONFIG_PATH CMake)
-elseif (APPLE AND NOT OPTION_APPLE_X11)
+elseif (APPLE AND NOT OPTION_APPLE_X11 AND NOT CMAKE_BUILD_TYPE STREQUAL "MacPorts")
   set (FLTK_CONFIG_PATH FLTK.framework/Resources/CMake)
 else ()
   set (FLTK_CONFIG_PATH ${FLTK_DATADIR}/fltk)
@@ -76,13 +76,15 @@ if (APPLE)
   set (HAVE_SCANDIR 1)
   set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated")
   if (OPTION_APPLE_X11)
-    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -U__APPLE__")
-    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -U__APPLE__")
-    if (NOT(${CMAKE_SYSTEM_VERSION} VERSION_LESS 17.0.0)) # a.k.a. macOS version ≥ 10.13
-      set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_LIBCPP_HAS_THREAD_API_PTHREAD")
-    endif (NOT(${CMAKE_SYSTEM_VERSION} VERSION_LESS 17.0.0))
+#    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -U__APPLE__")
+#    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -U__APPLE__")
+#    if (NOT(${CMAKE_SYSTEM_VERSION} VERSION_LESS 17.0.0)) # a.k.a. macOS version ≥ 10.13
+#      set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_LIBCPP_HAS_THREAD_API_PTHREAD")
+#    endif (NOT(${CMAKE_SYSTEM_VERSION} VERSION_LESS 17.0.0))
   else ()
     set (__APPLE_QUARTZ__ 1)
+    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__APPLE_QUARTZ__")
+    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D__APPLE_QUARTZ__")
     set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -framework Cocoa")
     set (CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -framework Cocoa")
   endif (OPTION_APPLE_X11)
diff --git a/cairo/CMakeLists.txt b/cairo/CMakeLists.txt
index 2cfa912fd..a03f152d5 100644
--- a/cairo/CMakeLists.txt
+++ b/cairo/CMakeLists.txt
@@ -11,6 +11,9 @@ FL_ADD_LIBRARY(fltk_cairo STATIC "${cairo_SRCS}")
 if(OPTION_BUILD_SHARED_LIBS)
 #######################################################################
 FL_ADD_LIBRARY(fltk_cairo SHARED "${cairo_SRCS}")
+if(APPLE)
+    target_link_libraries(fltk_cairo_SHARED PRIVATE -lcairo fltk)
+endif()
 
 #######################################################################
 endif(OPTION_BUILD_SHARED_LIBS)
diff --git a/configh.cmake.in b/configh.cmake.in
index a49a85c67..407a9ddbb 100644
--- a/configh.cmake.in
+++ b/configh.cmake.in
@@ -183,7 +183,7 @@
  * Byte order of your machine: 1 = big-endian, 0 = little-endian.
  */
 
-#ifdef __APPLE__
+#ifdef __APPLE_QUARTZ__
 #include <mac_endianness.h>
 #else
 #cmakedefine01 WORDS_BIGENDIAN
diff --git b/CMake/orig.options.cmake a/CMake/options.cmake
index ddd650f..071c874 100644
--- b/CMake/orig.options.cmake
+++ a/CMake/options.cmake
@@ -240,12 +240,14 @@ if (OPENGL_FOUND)
     set (GLLIBS "-lGLU -lGL")
   endif (WIN32)
 
-  # check if function glXGetProcAddressARB exists
-  set (TEMP_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})
-  set (CMAKE_REQUIRED_LIBRARIES ${OPENGL_LIBRARIES})
-  CHECK_FUNCTION_EXISTS (glXGetProcAddressARB HAVE_GLXGETPROCADDRESSARB)
-  set (CMAKE_REQUIRED_LIBRARIES ${TEMP_REQUIRED_LIBRARIES})
-  unset (TEMP_REQUIRED_LIBRARIES)
+  if (NOT APPLE OR OPTION_APPLE_X11)
+    # check if function glXGetProcAddressARB exists
+    set (TEMP_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})
+    set (CMAKE_REQUIRED_LIBRARIES ${OPENGL_LIBRARIES})
+    CHECK_FUNCTION_EXISTS (glXGetProcAddressARB HAVE_GLXGETPROCADDRESSARB)
+    set (CMAKE_REQUIRED_LIBRARIES ${TEMP_REQUIRED_LIBRARIES})
+    unset (TEMP_REQUIRED_LIBRARIES)
+  endif()
 
   set (FLTK_GL_FOUND TRUE)
 else ()
diff --git b/orig.CMakeLists.txt a/CMakeLists.txt
index 5bf958b..16c9cbc 100644
--- b/orig.CMakeLists.txt
+++ a/CMakeLists.txt
@@ -47,7 +47,11 @@ set (OpenGL_GL_PREFERENCE LEGACY)
 # define the FLTK project and version
 #######################################################################
 
-project (FLTK VERSION 1.3.8)
+if (APPLE)
+  project (FLTK VERSION 1.3.8 LANGUAGES C CXX OBJCXX)
+else()
+  project (FLTK VERSION 1.3.8)
+endif()
 
 #######################################################################
 # include macro definitions of generally used macros
