# -*- Mode: Tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           github 1.0
PortGroup           cmake 1.1
set use_cmake       yes
PortGroup           LTO 1.0

name                portaudio
categories          audio devel
platforms           darwin macosx linux
maintainers         {ra1nb0w @ra1nb0w} openmaintainer
license             MIT

description         PortAudio is a free, cross platform, open-source, audio I/O library.

long_description    PortAudio is a free, cross platform, open-source, audio I/O library. \
                    It lets you write simple audio programs in 'C' or C++ that will \
                    compile and run on many platforms including Windows, \
                    Macintosh OS X, and Unix (OSS/ALSA). \
                    It is intended to promote the exchange of audio \
                    software between developers on different platforms. \
                    Many applications use PortAudio for Audio I/O.

homepage            http://www.portaudio.com/

github.setup        Portaudio portaudio 09b77314a48da8b0b48dacd91c6850a3f926c42f
# version             20210401-[string range ${github.version} 0 7]
# RC(1) = 99; RC2 = 999 etc.
version             19.7.0.999.164
epoch               230518
fetch.type          git
distname            ${name}-git

if {${os.platform} eq "darwin" && ${os.major} >= 18} {
    configure.universal_archs i386 x86_64 arm64
} else {
    configure.universal_archs i386 x86_64
}

# By default, PortAudio is built as a universal binary.
# To build a non-universal library for the host architecture,
# simply use the --disable-mac-universal option with configure.
# http://www.portaudio.com/trac/wiki/TutorialDir/Compile/MacintoshCoreAudio
if {${use_cmake}} {
    # TODO: The cmake buildsystem makes libportaudiocpp a standalone subproject; add a subport for it.
    cmake.save_configure_cmd "install log"
    configure.args-append \
                    -DPA_BUILD_SHARED_LIBS=ON \
                    -DPA_USE_ALSA=OFF \
                    -DPA_USE_JACK=OFF \
                    -DPA_USE_COREAUDIO=ON \
                    -DPA_USE_OSS=OFF \
                    -DPA_USE_DS=OFF \
                    -DPA_USE_PULSEAUDIO=OFF
} else {
    configure.save_configure_cmd "install log"
    configure.args  --enable-mac-universal=no \
                    --enable-cxx \
                    --enable-option-checking \
                    --without-alsa \
                    --without-jack \
                    --without-oss \
                    --without-asihpi \
                    --without-winapi \
                    --without-pulseaudio
}

platform linux {
    if {${use_cmake}} {
        configure.args-replace \
                    -DPA_USE_ALSA=OFF \
                    -DPA_USE_ALSA=ON
        configure.args-replace \
                    -DPA_USE_COREAUDIO=ON \
                    -DPA_USE_COREAUDIO=OFF
    } else {
        configure.args-delete \
                    --without-asihpi
        configure.args-replace \
                    --without-alsa \
                    --with-alsa
    }
}

# use_parallel_build  no

patchfiles          patch-ltmain.sh.diff \
                    patch-src__common__pa_types.h.diff \
                    patch-audacity-portmixer.diff
# don't bail when a subset (>=1) of the "host APIs" (devices) fail to initialise
# but just provide access to whatever APIs do work.
patchfiles-append   patch-allow-individual-initapi-errors.diff

# patch the CMake file so that it generates the main dylib with the same compatibility_version
# as the configure script does (3.0.0 currently). And allow using PulseAudio on all platforms.
patchfiles-append   patch-cmake-darwin.diff

pre-configure {
    use_autoreconf [expr ![file exists ${worksrcpath}/config.log]]
    autoreconf.args -fvi
    # autoreconf can remove a needed script, somehow
    if {[file exists ${worksrcpath}/depcomp] && ![file exists ${workpath}/depcomp.bak]} {
        xinstall -m 755 ${worksrcpath}/depcomp ${workpath}/depcomp.bak
    }
}
post-configure {
    # restore the required script, if necessary
    if {![file exists ${worksrcpath}/depcomp] && [file exists ${workpath}/depcomp.bak]} {
        xinstall -m 755 ${workpath}/depcomp.bak ${worksrcpath}/depcomp
    }
}
        
if {${os.platform} eq "darwin"} {
    variant pulse conflicts pulse64 description {Enable PulseAudio support} {}

    # "clever" hack that makes it possible to have PulseAudio support in universal builds but only in
    # the slice corresponding to the native architecture. Thus PulseAudio and all its dependents don't
    # need to be installed +universal too.
    variant pulse64 conflicts pulse requires universal description {Hack: enable PulseAudio support in +universal builds but only in the native arch. slice. Non-universal builds can use the +pulse variant.} {}
} else {
    variant pulse description {Enable PulseAudio support} {}
    default_variants-append +pulse
}
if {[variant_isset pulse]} {
    depends_lib-append \
                    port:pulseaudio
    if {${use_cmake}} {
        configure.args-replace \
                    -DPA_USE_PULSEAUDIO=OFF \
                    -DPA_USE_PULSEAUDIO=ON
    } else {
        configure.args-replace \
                    --without-pulseaudio \
                    --with-pulseaudio
    }
}

if {[variant_exists pulse64] && [variant_isset pulse64]} {
    PortGroup muniversal 1.0
    depends_lib-append \
                        port:pulseaudio
    depends_skip_archcheck-append \
                        pulseaudio
    if {${use_cmake}} {
        configure.args-delete \
                        -DPA_USE_PULSEAUDIO=OFF
        set merger_configure_args(${build_arch}) \
                        -DPA_USE_PULSEAUDIO=ON
        } else {
            configure.args-delete \
                        --without-pulseaudio
        set merger_configure_args(${build_arch}) \
                        --with-pulseaudio
# TODO: post-build hack for portaudio-2.0.pc?
    }
}

variant jack description {Enable JACK support} {
    if {${os.platform} eq "darwin"} {
        depends_lib-append \
                    port:jack
    } else {
        depends_lib-append \
                    bin:jack_test:jack
    }
    if {${use_cmake}} {
        configure.args-replace \
                    -DPA_USE_JACK=OFF \
                    -DPA_USE_JACK=ON
    } else {
        configure.args-replace \
                    --without-jack \
                    --with-jack
    }
}

variant tools description {Install the example and test utilities to ${prefix}/libexec/${name}} {
    if {${use_cmake}} {
        configure.args-append \
                    -DPA_BUILD_TESTS=ON \
                    -DPA_BUILD_EXAMPLES=ON
    }
    post-destroot {
        set utildir ${destroot}${prefix}/libexec/${name}
        xinstall -m 755 -d ${utildir}
        # avoid installing any .dSYM directories that might have been created
        if {${use_cmake}} {
            if {[variant_exists pulse64] && [variant_isset pulse64]} {
                xinstall -m 755 {*}[glob -type f ${build.dir}-${build_arch}/test/pa*] ${utildir}
                xinstall -m 755 {*}[glob -type f ${build.dir}-${build_arch}/examples/pa*] ${utildir}
            } else {
                xinstall -m 755 {*}[glob -type f ${build.dir}/test/pa*] ${utildir}
                xinstall -m 755 {*}[glob -type f ${build.dir}/examples/pa*] ${utildir}
            }
        } else {
            xinstall -m 755 {*}[glob -type f ${build.dir}/bin/.libs/pa*] ${utildir}
        }
    }
}

post-destroot {
    xinstall -d ${destroot}${prefix}/share/doc/${name}
    xinstall -m 644 -W ${worksrcpath} \
        README.md \
        LICENSE.txt \
        ${destroot}${prefix}/share/doc/${name}
    # The build of PyAudio requires pa_mac_core.h.
    xinstall -m 644 ${worksrcpath}/include/pa_mac_core.h \
        ${destroot}${prefix}/include
}
