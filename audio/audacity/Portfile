# -*- coding: utf-8; mode: tcl; tab-width: 4; truncate-lines: t; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:et:sw=4:ts=4:sts=4

PortSystem          1.0

PortGroup           github 1.0

name                audacity
conflicts           audacity-gtk

set aud_app_path    ${applications_dir}/Audacity.app

# The manual subport is defined first since it doesn't require a lot of setting up
subport "${name}-manual" {}
if {${subport} eq "${name}-manual"} {
    description     The manual for audacity
    long_description ${description}
    github.setup    audacity audacity-manual edac2a9165b10e655e945378209139b4c45986a5
    version         2.3.3
    homepage        https://manual.audacityteam.org/
    checksums       rmd160  c927446959eff59fd123ff5c6f87750e6d503465 \
                    sha256  7beab399feb0d93bd40af28be2bf5a0201bd99196624edbed25c6a302a1c5a97
#                     size    13691059
    depends_run     path:bin/audacity:audacity
    use_configure   no
    build           {}
    destroot {
        platform darwin {
            xinstall -m 755 -d ${destroot}${aud_app_path}/Contents/help
            file copy ${worksrcpath}/manual ${destroot}${aud_app_path}/Contents/help
        }
        platform linux {
            xinstall -m 755 -d ${destroot}${prefix}/share/audacity/help
            file copy ${worksrcpath}/manual ${destroot}${prefix}/share/audacity/help
        }
    }
    return          0
}

# PortGroups for the main ports
PortGroup           wxWidgets 1.0
PortGroup           active_variants 1.1
PortGroup           compress_workdir 1.0
PortGroup           LTO 1.0

platform darwin {
    if {${os.major} < 13} {
        PortGroup   cxx11 1.1
    }
}
description         A Free, Cross-Platform Digital Audio Editor.
long_description    Audacity is a free, easy-to-use, multi-track audio editor and recorder \
                    for Windows, Mac OS X, GNU/Linux and other operating systems. The interface is translated \
                    into many languages. You can use Audacity to: \n\
                    Record live audio. \n\
                    Record computer playback on any Windows Vista or later machine. \n\
                    Convert tapes and records into digital recordings or CDs. \n\
                    Edit WAV, AIFF, FLAC, MP2, MP3 or Ogg Vorbis sound files. \n\
                    AC3, M4A/M4R (AAC), WMA and other formats supported using optional libraries. \n\
                    Cut, copy, splice or mix sounds together. \n\
                    Numerous effects including change the speed or pitch of a recording. \n\
                    And more!

subport             audacity-devel {
    long_description A port of the Audacity audio editor aimed at development purposes.
}


if {${subport} eq "${name}"} {
    conflicts       "${name}-devel"
    # get the source tarball from github because it contains all required external libs
    # incl. those not in MacPorts.
    #github.setup    audacity audacity 2.3.0 Audacity-
    # exceptionally we ship the same version as the devel port
    github.setup    audacity audacity 2.3.3 Audacity-
    checksums       rmd160  699e7444ccf4e671a4504e7ffb2b541ca9ff1d61 \
                    sha256  ce0b0a314186896435bc6d1c6249ba4844f3522efa27dd1487b0054f68ad2cec
#                     size    62099035
    set PPREFIX     ./

    # remember to bump this to 2014 for the next release and to remove
    # the corresponding require_active_variants expression below!
    compiler.cxx_standard 2011
} else {
    PortGroup       cmake 1.1
    conflicts       "${name}"
    # git describe --tags : Audacity-2.4.2-543-g9e53df0c4
    # NB: check c67842f525095f100aa662ff59be421545d8bfc4!
    github.setup    audacity audacity 9e53df0c47495f520f94472d61762da24c9651eb
    version         2.4.2.543
    # this port is intended to facilitate development efforts shared with "upstreams"
    # so using git instead of a tarball fetch type is more appropriate.
    fetch.type      git
    distname        audacity-git
    set PPREFIX     devel/

    livecheck.type  none

    compiler.cxx_standard 2014

    pre-build {
        # register the exact source version in the build:
        if {[file exists ${worksrcpath}/mac/scripts/get_gitident.sh]} {
            system -W ${worksrcpath}/mac "scripts/get_gitident.sh"
            system "echo '#define GIT_DESC \"${version}\"' >> ${worksrcpath}/src/RevisionIdent.h"
        } else {
            system "echo '#define GIT_DESC \"${version}\"' >> ${worksrcpath}/src/GitDesc.h"
        }
    }
    build.post_args-append -k
    cmake.generator Ninja
    cmake.save_configure_cmd "log too"
}

proc add_patchfile_ifexists {args} {
    global PPREFIX filespath
    foreach fname ${args} {
        if {[file exists ${filespath}/${fname}]} {
            patchfiles-append ${fname}
        }
    }
}

categories          audio

platforms           darwin
license             GPL-2+
maintainers         gmail.com:rjvbertin openmaintainer
universal_variant   no
use_parallel_build  yes

homepage            http://www.audacityteam.org/

# we want to use the temporary wxWidgets-3.1 "Audacity-special" port!
variant qt description {build against wxQt-3.2 (experimental!!)} {}
if {[variant_isset qt]} {
    wxWidgets.use   wxQt-3.2
} else {
    wxWidgets.use   wxWidgets-3.1
}

depends_lib-append  port:${wxWidgets.port}

# if {![catch {set wxw_stdlib [active_variants ${wxWidgets.port} stdlib]} err]} {
#     if {${wxw_stdlib}} {
#         long_description-append "This port needs ${wxWidgets.port} without the +stdlib variant."
#         pre-fetch {
#             ui_error "This port needs ${wxWidgets.port} without the +stdlib variant."
#             return -code error "reinstall port:${wxWidgets.port} without the +stdlib variant"
#         }
#     }
# }

if {${subport} eq "${name}"} {
    # use 2 require expressions instead of a combined so the user gets
    # feedback which actually installed variant(s) is/are unwanted
    # instead of the whole list.
    require_active_variants ${wxWidgets.port} "" stdlib
    require_active_variants ${wxWidgets.port} "" cxx14
} else {
    require_active_variants ${wxWidgets.port} cxx14 stdlib
}

depends_build-append \
                    port:pkgconfig
if {${subport} eq "${name}"} {
    depends_build-append \
                    port:python27
    set python_bin ${prefix}/bin/python2.7
} else {
    depends_build-append \
                    port:python37
    set python_bin ${prefix}/bin/python3.7
#     depends_lib-append \
#                     port:sqlite3
}
# depends_lib-append  port:freetype \
#                     port:harfbuzz \
#                     port:libid3tag \
#                     port:soxr \
#                     port:twolame
depends_lib-append  port:expat \
                    path:lib/libavcodec.dylib:ffmpeg \
                    port:flac \
                    port:lame \
                    port:libogg \
                    port:libsndfile \
                    port:libvorbis \
                    port:libmad \
                    port:soundtouch
# audacity could use port:lv2 and port:lilv but would also require a port:suil for that to be possible.

patch.pre_args      -Np1

# address issues in the build system:
# - build and link VSTControlOSX.mm instead of the GTk interface
# - address a visibility issue with the slider_array variable in libnyquist
# - make the AudioUnits plugin support build; on 64bit and also include AUControl.mm
platform darwin {
    depends_build-append \
                    port:nasm

    if {${subport} eq "${name}"} {
        patchfiles-append \
                    fix-minsrc-autoreconf.patch \
                    libvamp-Makefile-for-osx.diff \
                    src-Makefile-for-osx.diff
    }
    patchfiles-append \
                    portaudio-no-universal-build.diff                       \
                    ${PPREFIX}buildinfo-clarify-no-gstreamer.diff           \
                    ${PPREFIX}patch-aboutdlg-compiler.diff                  \
                    ${PPREFIX}add_enGB_translation.diff                     \
                    ${PPREFIX}patch-more-decent-font-sizes.diff             \
                    ${PPREFIX}patch-python.diff                             \
                    patch-libnyquist-symbol-visibility.diff \
                    patch-skip-gcc-version-test.diff
    if {${subport} eq "${name}"} {
        patchfiles-append \
                    patch-fix-audiounits.diff \
                    patch-WindowMenus-objcxx.diff
    }
    # use lame from MacPorts (partial revert of ae431bc5)
    # load ffmpeg libs from MacPorts (reverts of 1d40f33e)
    patchfiles-append \
                    ${PPREFIX}patch-use-MPlame.diff \
                    ${PPREFIX}patch-use-MPffmpeg.diff
#     if {${subport} eq "${name}"} {
#         # reported upstream, patch accepted as the proper fix:
#         patchfiles-append \
#                     patch-unordered_map-fixes.diff
#     }
    # for building against wxWidgets 3.0.3 and up:
    add_patchfile_ifexists \
                    ${PPREFIX}patch-wxw-303.diff
    # work around a missing implementation in wxCocoa's wxSound class
    patchfiles-append \
                    patch-implement-progdial=beep.diff
    patchfiles-append \
                    patch-WindowMenus-objcxx.diff
}
platform linux {
#     # this is likely to be true as long as we use the host's wxWidgets:
#     conflicts_build-append \
#                     tiff-dev
    if {${subport} eq "${name}"} {
        patchfiles-append \
                    fix-minsrc-autoreconf.patch \
                    libvamp-Makefile-for-linux.diff
    }
    patchfiles-append \
                    ${PPREFIX}buildinfo-clarify-no-gstreamer.diff                     \
                    ${PPREFIX}patch-aboutdlg-compiler.diff                            \
                    add_enGB_translation.diff                               \
                    patch-avoid-clang-choke-on-confbase.diff                \
                    patch-rearrange-control-buttons.diff                    \
                    ${PPREFIX}patch-python-linux.diff                                 \
                    patch-libnyquist-symbol-visibility.diff \
                    patch-skip-gcc-version-test.diff
    if {${subport} eq "${name}"} {
        patchfiles-append \
                    patch-fix-audiounits.diff
    }
    # use lame from MacPorts (partial revert of ae431bc5)
    # load ffmpeg libs from MacPorts (reverts of 1d40f33e)
    patchfiles-append \
                    ${PPREFIX}patch-use-MPlame.diff \
                    ${PPREFIX}patch-use-MPffmpeg.diff
    # for building against wxWidgets 3.0.3:
    add_patchfile_ifexists \
                    ${PPREFIX}patch-wxw-303.diff
#     set wxWidgets.wxconfig /usr/bin/wx-config
}
if {${subport} eq "${name}"} {
    patchfiles-append \
                    patch-no-libatomic.diff
}
add_patchfile_ifexists \
                    ${PPREFIX}patch-wxw-31x.diff \
                    ${PPREFIX}patch-enable-compact-menu.diff

if {${subport} eq "${name}-devel"} {
    patchfiles-append \
                    patch-cmakefiles.diff
    add_patchfile_ifexists \
                    ${PPREFIX}patch-temp-fixes.diff
}

if {[variant_isset qt]} {
    patchfiles-append \
                    patch-for-wxqt.diff
}

# pre-configure {
#     use_autoreconf  [expr ![file exists ${worksrcpath}/config.status]]
#     autoreconf.args -fvi --no-recursive
# }
# quelch a huge number of warnings
configure.cxxflags-append \
                    -Wno-inconsistent-missing-override \
                    -Wno-overloaded-virtual

if {${subport} eq "${name}"} {
    configure.args-append \
                    --disable-dependency-tracking \
                    --disable-quicktime \
                    --disable-static \
                    --disable-universal_binary \
                    --disable-audiounits \
                    --enable-shared \
                    --enable-sse \
                    --with-ffmpeg \
                    --with-lame \
                    --with-libflac \
                    --with-libmad \
                    --with-libsoxr \
                    --with-libvamp=local \
                    --with-libvorbis \
                    --with-lv2=local \
                    --with-portmixer \
                    --with-sbsms=local \
                    --with-soundtouch \
                    --with-twolame \
                    --with-widgetextra=local \
                    --with-portmidi=system \
                    WX_CONFIG=${wxWidgets.wxconfig}
    platform darwin {
        # Since version 2.2.0 we need to use the embedded (modified) Portaudio version.
        configure.args-append \
                    --with-portaudio=local
    }
} else {
    set _OPT "audacity_"
    configure.args-append \
                    -DwxWidgets_CONFIG_EXECUTABLE=${wxWidgets.wxconfig} \
                    -D${_OPT}lib_preference=system \
                    -D${_OPT}use_audiounits=off \
                    -D${_OPT}use_pa_jack=off \
                    -D${_OPT}use_wxwidgets=system \
                    -D${_OPT}use_ffmpeg=linked \
                    -D${_OPT}use_lame=system \
                    -D${_OPT}use_flac=system \
                    -D${_OPT}use_mad=system \
                    -D${_OPT}use_soxr=system \
                    -D${_OPT}use_vamp=local \
                    -D${_OPT}use_ogg=system \
                    -D${_OPT}use_vorbis=system \
                    -D${_OPT}use_lv2=local \
                    -D${_OPT}use_sbsms=local \
                    -D${_OPT}use_soundtouch=system \
                    -D${_OPT}use_twolame=system \
                    -D${_OPT}use_midi=system
    # using port:sqlite3 leads to unstable behaviour?!
    configure.args-append \
                    -D${_OPT}use_sqlite=local
    configure.env-append \
                    WX_CONFIG=${wxWidgets.wxconfig}
    platform darwin {
        # Since version 2.2.0 we need to use the embedded (modified) Portaudio version.
        configure.args-append \
                    -Daudacity_use_portaudio=local
    }
}
platform darwin {
    configure.env-append \
                    PORTMIDI_CFLAGS=-I${prefix}/include \
                    PORTMIDI_LIBS=${prefix}/lib/libportmidi.dylib
}
depends_lib-append \
                    port:portmidi
platform linux {
    configure.env-append \
                    PORTMIDI_CFLAGS=-I${prefix}/include \
                    PORTMIDI_LIBS=${prefix}/lib/libportmidi.so
#     if {[string match *clang* ${configure.cxx}]} {
#         variant libcxx description {highly experimental and probably broken option to build against libc++. \
#                 Requires using clang and an independently provided libc++ installation.} {
#             configure.cxx_stdlib \
#                             libc++
#             configure.cxxflags-replace \
#                         -stdlib=libstdc++ \
#                         -stdlib=libc++
#             configure.cxxflags-append \
#                         -DHAVE_TYPE_TRAITS
#         }
#     }

#     configure.args-append \
#                     --with-midi \
#                     LIBS=-ltiff
    configure.args-append \
                    --with-midi \
                    --with-portaudio=local
    configure.cppflags-append \
                    -I${prefix}/include -DUSE_AQUA_THEME
#     configure.cxxflags-append \
#                     -std=gnu++11
#     # as long as we use the host's wxWidgets. We use the static library
#     # because otherwise we might still be getting MacPorts' libtiff
#     # which lacks the version symbols required by the host's wxWidgets libraries.
#     configure.ldflags-append \
#                     /usr/lib/x86_64-linux-gnu/libtiff.a
    configure.env-replace \
                    PORTMIDI_LIBS=${prefix}/lib/libportmidi.dylib \
                    PORTMIDI_LIBS=${prefix}/lib/libportmidi.so
}

# make sure the C++ stdlib argument is added to the LDFLAGS too
if {${configure.cxx_stdlib} ne "" && [string match *clang* ${configure.cxx}]} {
    configure.ldflags-append \
                    -stdlib=${configure.cxx_stdlib}
}

pre-configure {
    configure.args-append \
                    "CPPFLAGS=\"${configure.cppflags}\""
}

if {${build.cmd} ne "ninja"} {
    build.args-append   V=1 VERBOSE=1
}

# with everything defined/declared as intended we can now
# handle the post-patch step with its reinplace statements.
post-patch {
    if {${subport} eq "${name}"} {
        reinplace -W ${worksrcpath} "s|@@PYTHON@@|${python_bin}|g" \
                                    lib-src/lv2/build
    }
    reinplace -W ${worksrcpath} "s|@@PYTHON@@|${python_bin}|g" \
                                lib-src/lv2/configure
    reinplace -W ${worksrcpath} "s|/usr/local|${prefix}|g" \
                                src/effects/ladspa/LadspaEffect.cpp \
                                src/effects/VST/VSTEffect.cpp \
                                src/export/ExportMP3.cpp \
                                lib-src/lv2/lilv/wscript \
                                lib-src/lv2/lilv/test/lilv_test.c
    reinplace -W ${worksrcpath} "s|/Library/Audio/Plug-Ins/Vamp|/Library/Audio/Plug-Ins/Vamp:${prefix}/lib/vamp|g" \
                                lib-src/libvamp/src/vamp-hostsdk/PluginHostAdapter.cpp
    reinplace -W ${worksrcpath} "s|/Library/Application Support/audacity/libs|${prefix}/lib|g" \
                                src/FFmpeg.h
    reinplace -W ${worksrcpath} "s| -Werror||g" \
                                lib-src/portaudio-v19/configure.in \
                                lib-src/portaudio-v19/configure
    if {${subport} eq "${name}"} {
        reinplace -W ${worksrcpath} "s|@LDFLAGS@|${configure.ldflags}|g" \
                                lib-src/libvamp/Makefile.in
    }
    platform darwin {
        # audacity contains C++ files that include system SDK headers and ObjC code on OS X;
        # they must thus be built as ObjC++
        set make_objcpp { \
            {CommandManager src/commands    {src/Makefile.in src/Makefile.am}} \
            {Effect         src/effects     {src/Makefile.in src/Makefile.am}} \
            {LV2Effect      src/effects/lv2 {src/Makefile.in src/Makefile.am}} \
            {KeyboardCapture src            {src/Makefile.in src/Makefile.am}} \
        }
        foreach mm ${make_objcpp} {
            set f  [lindex ${mm} 0]
            set d  [lindex ${mm} 1]
            set mk [lindex ${mm} 2]
            foreach m ${mk} {
                if {${subport} eq "${name}"} {
                    if {${d} eq "src"} {
                        reinplace -W ${worksrcpath} "s|${f}.cpp|${f}.mm|g" ${m}
                    } else {
                        reinplace -W ${worksrcpath} "s|/${f}.cpp|/${f}.mm|g" ${m}
                    }
                }
            }
            # it's easiest to symlink f.mm to f.cpp; clang++ will do the rest.
            if {![file exists ${worksrcpath}/${d}/${f}.mm]} {
                ln -s ${f}.cpp ${worksrcpath}/${d}/${f}.mm
            }
        }
        if {${subport} eq "${name}"} {
            reinplace -W ${worksrcpath} "s|/VSTControlGTK.cpp|/VSTControlOSX.mm|g" \
                src/Makefile.in src/Makefile.am
        }
        if {[file exists ${worksrcpath}/src/menus/WindowMenus.cpp] && ![file exists ${worksrcpath}/src/menus/WindowMenus.mm]} {
            ln -s WindowMenus.cpp ${worksrcpath}/src/menus/WindowMenus.mm
        }
    }
}

platform darwin {

    post-destroot {
        if {${subport} eq "${name}"} {
            destroot.keepdirs   ${destroot}${aud_app_path}/Contents/Resources/en.lproj
            # create the app bundle infrastructure
            xinstall -m 755 -d ${destroot}${aud_app_path}/Contents/MacOS
            xinstall -m 755 -d ${destroot}${aud_app_path}/Contents/Resources
            # the BundleExec:
            file rename ${destroot}${prefix}/bin/audacity ${destroot}${aud_app_path}/Contents/MacOS/Audacity
            # install the Info.plist provided by Audacity
            xinstall -m 644 ${worksrcpath}/mac/Info.plist ${destroot}${aud_app_path}/Contents/
            # adapt the provided Info.plist
            reinplace "s|AUDACITY_EXECUTABLE|Audacity|g" ${destroot}${aud_app_path}/Contents/Info.plist
            reinplace "s|AUDACITY_INFO_VERSION|${version} (MacPorts)|g" ${destroot}${aud_app_path}/Contents/Info.plist
            # install the provided icons into the Resources directory
            foreach r [glob -nocomplain ${worksrcpath}/mac/Resources/*.icns] {
                xinstall -m 644 ${r} ${destroot}${aud_app_path}/Contents/Resources/
            }
            # install translation resources
            foreach l [glob -nocomplain ${destroot}${prefix}/share/locale/*] {
                set lang [file tail ${l}]
                xinstall -m 755 -d ${destroot}${aud_app_path}/Contents/Resources/${lang}.lproj
                ln -s ${prefix}/share/locale/${lang}/LC_MESSAGES/audacity.mo ${destroot}${aud_app_path}/Contents/Resources/${lang}.lproj/
            }
            # install a wrapper script in ${prefix}/bin
            system "echo \"#!/bin/sh\nexec \\\"${aud_app_path}/Contents/MacOS/Audacity\\\" \\\"\\\$\@\\\"\" > ${destroot}${prefix}/bin/audacity"
            system "chmod 755 ${destroot}${prefix}/bin/audacity"
        } else {
            file rename ${destroot}${prefix}/Audacity.app ${destroot}${aud_app_path}
            xinstall -m 755 -d ${destroot}${prefix}/share/audacity
            ln -s ${aud_app_path}/Contents/Resources/EQDefaultCurves.xml ${destroot}${prefix}/share/audacity/
            ln -s ${aud_app_path}/Contents/plug-ins ${destroot}${prefix}/share/audacity/
            xinstall -m 755 -d ${destroot}${prefix}/share/mime/packages/
            xinstall -m 755 ${worksrcpath}/src/audacity.xml ${destroot}${prefix}/share/mime/packages/audacity.xml
            # install a wrapper script in ${prefix}/bin
            system "echo \"#!/bin/sh\nexec \\\"${aud_app_path}/Contents/MacOS/Wrapper\\\" \\\"\\\$\@\\\"\" > ${destroot}${prefix}/bin/audacity"
            system "chmod 755 ${destroot}${prefix}/bin/audacity"
        }
        foreach l [glob -nocomplain ${wxWidgets.prefix}/share/locale/*] {
            set lang [file tail ${l}]
            xinstall -m 755 -d ${destroot}${aud_app_path}/Contents/Resources/${lang}.lproj
            ln -s ${l}/LC_MESSAGES/wxstd.mo ${destroot}${aud_app_path}/Contents/Resources/${lang}.lproj/
        }
        # allow the application to find certain things where it expects them on OS X (= inside the app bundle)
        foreach r [glob -nocomplain ${destroot}${prefix}/share/audacity/*] {
            set f [file tail ${r}]
            if {![file exists ${destroot}${aud_app_path}/Contents/Resources/${f}]} {
                ln -s ${prefix}/share/audacity/${f} ${destroot}${aud_app_path}/Contents/Resources
            }
        }
    }
}

post-destroot {
    if {${subport} eq "${name}" || ${os.platform} ne "darwin"} {
        xinstall -m 755 ${filespath}/vocalremover.ny ${destroot}${prefix}/share/audacity/plug-ins/
    } else {
        xinstall -m 755 ${filespath}/vocalremover.ny ${destroot}${aud_app_path}/Contents/plug-ins/
    }
}

notes "
    In case Audacity complains about finding FFmpeg or Lame, please locate these libraries\
    under ${prefix}/lib in the Libraries section of the Preferences dialog (see\
    http://manual.audacityteam.org/man/installing_and_updating_audacity_on_linux.html#locate)
"

# kate: backspace-indents true; indent-pasted-text true; indent-width 4; keep-extra-spaces true; remove-trailing-spaces modified; replace-tabs true; replace-tabs-save true; syntax Tcl/Tk; tab-indents true; tab-width 4;
PortGroup           locale_select 1.0
platform darwin {
    langselect_lproj_dir-append \
                    ${destroot}${aud_app_path}/Contents/Resources
}
