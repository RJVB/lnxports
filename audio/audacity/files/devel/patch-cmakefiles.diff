diff --git a/CMakeLists.txt b/CMakeLists.txt
index a85373670..60aa0c775 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -78,7 +78,7 @@ cmake_policy( SET CMP0075 NEW )
 
 # Definitions that must happen before the project() command
 if( APPLE )
-   set( MIN_MACOS_VERSION 10.9 )
+   set( MIN_MACOS_VERSION 10.7 )
    set( TARGET_MACOS_VERSION 10.13 )
    # Generate schema files
    set( CMAKE_XCODE_GENERATE_SCHEME ON )
@@ -86,14 +86,14 @@ if( APPLE )
    # Define the OSX compatibility parameters
    set( CMAKE_OSX_ARCHITECTURES x86_64 CACHE INTERNAL "" )
    set( CMAKE_OSX_DEPLOYMENT_TARGET ${MIN_MACOS_VERSION} CACHE INTERNAL "" )
-   set( CMAKE_OSX_SYSROOT macosx CACHE INTERNAL "" )
+#    set( CMAKE_OSX_SYSROOT macosx CACHE INTERNAL "" )
    set( CMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY "" CACHE INTERNAL "" )
 
    # This prevents a link error when building with the 10.9 or older SDKs
    set( CMAKE_XCODE_ATTRIBUTE_CLANG_LINK_OBJC_RUNTIME OFF )
 
    # Shouldn't cmake do this???
-   string( APPEND CMAKE_CXX_FLAGS " -stdlib=libc++" )
+#    string( APPEND CMAKE_CXX_FLAGS " -stdlib=libc++" )
 endif()
 
 # Add our module path
@@ -108,12 +108,14 @@ set( CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake-proxies/cmake-modules)
 set( CMAKE_CXX_STANDARD 14 )
 set( CMAKE_CXX_STANDARD_REQUIRED ON )
 
-# Use ccache if available
-find_program( CCACHE_PROGRAM ccache )
-mark_as_advanced( FORCE CCACHE_PROGRAM )
+# Use ccache if requested
+if( ${CMAKE_CXX_COMPILER_LAUNCHER} MATCHES "ccache" )
+    set( CCACHE_PROGRAM "${CMAKE_CXX_COMPILER_LAUNCHER}" )
+    mark_as_advanced( FORCE CCACHE_PROGRAM )
 
-if( CCACHE_PROGRAM )
-   set_property( GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}" )
+#     if( CCACHE_PROGRAM )
+#        set_property( GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}" )
+#     endif()
 endif()
 
 # Our very own project
@@ -135,7 +137,8 @@ cmd_option( ${_OPT}obey_system_dependencies
             Off
 )
 
-include( AudacityDependencies )
+# spurious commit:
+# include( AudacityDependencies )
 
 # Pull all the modules we'll need
 include( CheckCXXCompilerFlag )
@@ -252,6 +255,7 @@ if( CMAKE_CONFIGURATION_TYPES )
 else()
    set( _DESTDIR "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_BUILD_TYPE}" )
 endif()
+set( _DESTDIR "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}" )
 
 set( _DEST "${_DESTDIR}" )
 set( _PREFIX "${CMAKE_INSTALL_PREFIX}" )
diff --git a/cmake-proxies/wxWidgets/CMakeLists.txt b/cmake-proxies/wxWidgets/CMakeLists.txt
index 47b6bd0ee..e957ee666 100644
--- a/cmake-proxies/wxWidgets/CMakeLists.txt
+++ b/cmake-proxies/wxWidgets/CMakeLists.txt
@@ -240,10 +240,10 @@ file(
 
 string( REGEX MATCHALL "\".+(Audacity).+\"" ours "${output}")
 if( NOT ours )
-   message( FATAL_ERROR
+   message( WARNING
       "\n########################################################################\n"
-      "Audacity version 3.0.0 or higher requires use of a customized version of "
-      "wxWidgets.  For details:\n"
+      "Audacity version 3.0.0 or higher recommends the use of a customised version "
+      "of wxWidgets.  For details:\n"
       "  https://wiki.audacityteam.org/wiki/Building_for_Distros\n"
       "########################################################################\n"
    )
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index e6dd6cf03..d2d8387cf 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1081,6 +1081,11 @@ list( APPEND LIBRARIES
       $<$<PLATFORM_ID:Linux,FreeBSD,OpenBSD,NetBSD,CYGWIN>:z>
       $<$<PLATFORM_ID:Linux,FreeBSD,OpenBSD,NetBSD,CYGWIN>:pthread>
 )
+if( CMAKE_SYSTEM_NAME MATCHES "Linux" )
+    list( APPEND LIBRARIES
+       PRIVATE
+        $<$<CXX_COMPILER_ID:Clang>:atomic>)
+endif()
 
 set( BUILDING_AUDACITY YES )
 set( INSTALL_PREFIX "${_PREFIX}" )
@@ -1206,6 +1211,9 @@ elseif( CMAKE_SYSTEM_NAME MATCHES "Darwin" )
          "-framework AudioUnit"
          "-framework CoreAudio"
          "-framework CoreAudioKit"
+         "-framework AudioToolbox"
+         "-framework Cocoa"
+         "-framework Carbon"
    )
 
    # Use the Aqua theme
@@ -1317,6 +1325,13 @@ list( APPEND DEFINES PRIVATE "${export_symbol}" INTERFACE "${import_symbol}" )
 
 target_sources( ${TARGET} PRIVATE ${HEADERS} ${SOURCES} ${RESOURCES} ${MAC_RESOURCES} ${WIN_RESOURCES} )
 target_compile_definitions( ${TARGET} PRIVATE ${DEFINES} )
+
+set_property(SOURCE effects/VST/VSTEffect.cpp APPEND PROPERTY COMPILE_DEFINITIONS LIBDIR="${CMAKE_INSTALL_FULL_LIBDIR}")
+set_property(SOURCE effects/ladspa/LadspaEffect.cpp APPEND PROPERTY COMPILE_DEFINITIONS LIBDIR="${CMAKE_INSTALL_FULL_LIBDIR}")
+set_property(SOURCE effects/lv2/LoadLV2.cpp APPEND PROPERTY COMPILE_DEFINITIONS LIBDIR="${CMAKE_INSTALL_FULL_LIBDIR}")
+set_property(SOURCE effects/lv2/LoadLV2.cpp APPEND PROPERTY COMPILE_DEFINITIONS PKGLIBDIR="${PKGLIBDIR}")
+set_property(SOURCE export/ExportMP3.cpp APPEND PROPERTY COMPILE_DEFINITIONS LIBDIR="${CMAKE_INSTALL_FULL_LIBDIR}")
+
 target_compile_options( ${TARGET} PRIVATE ${OPTIONS} )
 target_include_directories( ${TARGET} PRIVATE ${INCLUDES} )
 target_link_options( ${TARGET} PRIVATE ${LDFLAGS} )
