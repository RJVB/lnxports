diff --git a/src/AttachedVirtualFunction.h b/src/AttachedVirtualFunction.h
index bc6554a98..68f5a80a5 100644
--- a/src/AttachedVirtualFunction.h
+++ b/src/AttachedVirtualFunction.h
@@ -17,8 +17,21 @@ Paul Licameli
 #include <mutex>
 #include <type_traits>
 #include <utility>
+#include <atomic>
 #include "InconsistencyException.h"
 
+// from https://codereview.stackexchange.com/questions/4422/macro-to-run-code-once-during-the-lifetime-of-the-program/49168#49168?newreg=7b41175fe9cc43e68dbc59d046c98d48
+#define RUN_ONCE                                       \
+    for (static std::atomic<int> _run_already_(false); \
+         !_run_already_.fetch_or(true);)    /***/
+// based on the std::call_once implementation from mutex.h:
+template<typename _Callable>
+void run_once(_Callable&& __f)
+{
+    RUN_ONCE __f();
+}
+#undef RUN_ONCE
+
 //! Class template generates single-dispatch, open method registry tables
 /*!
 Defines a "virtual" function with multiple bodies chosen by type-switch
@@ -175,8 +188,9 @@ public:
     /*! (There will be others if there are any overrides.) */
    AttachedVirtualFunction()
    {
-      static std::once_flag flag;
-      std::call_once( flag, []{ Register<This>( Implementation() ); } );
+//       static std::once_flag flag;
+//       std::call_once( flag, []{ Register<This>( Implementation() ); } );
+       run_once( []{ Register<This>( Implementation() ); } );
    }
 
    //! For defining overrides of the method
@@ -212,8 +226,8 @@ public:
       /*! (There will be others if there are any further overrides.) */
       Override()
       {
-         static std::once_flag flag;
-         std::call_once( flag, []{
+//          static std::once_flag flag;
+         run_once( []{
             // Register in the table an adaptor thunk that downcasts the object
             auto implementation = Implementation();
             Register< Subclass >( [=]( This &obj, Arguments &&...arguments ){
@@ -285,6 +299,7 @@ private:
       static Registry registry;
       return registry;
    }
+
 };
 
 #endif
diff --git a/src/AudacityLogger.cpp b/src/AudacityLogger.cpp
index 5e2e22f65..11a33393e 100644
--- a/src/AudacityLogger.cpp
+++ b/src/AudacityLogger.cpp
@@ -23,7 +23,7 @@ Provides thread-safe logging based on the wxWidgets log facility.
 #include "Internat.h"
 #include "ShuttleGui.h"
 
-#include <mutex>
+// #include <mutex>
 #include <wx/filedlg.h>
 #include <wx/log.h>
 #include <wx/ffile.h>
@@ -36,6 +36,18 @@ Provides thread-safe logging based on the wxWidgets log facility.
 #include "../images/AudacityLogoAlpha.xpm"
 #include "widgets/AudacityMessageBox.h"
 
+#include <atomic>
+// from https://codereview.stackexchange.com/questions/4422/macro-to-run-code-once-during-the-lifetime-of-the-program/49168#49168?newreg=7b41175fe9cc43e68dbc59d046c98d48
+#define RUN_ONCE                                       \
+    for (static std::atomic<int> _run_already_(false); \
+         !_run_already_.fetch_or(true);)    /***/
+// based on the std::call_once implementation from mutex.h:
+template<typename _Callable>
+void run_once(_Callable&& __f)
+{
+    RUN_ONCE (*__f)();
+}
+
 //
 // AudacityLogger class
 //
@@ -57,8 +69,8 @@ enum
 
 AudacityLogger *AudacityLogger::Get()
 {
-   static std::once_flag flag;
-   std::call_once( flag, []{
+//    static std::once_flag flag;
+   run_once( []{
       // wxWidgets will clean up the logger for the main thread, so we can say
       // safenew.  See:
       // http://docs.wxwidgets.org/3.0/classwx_log.html#a2525bf54fa3f31dc50e6e3cd8651e71d
diff --git a/src/FFmpeg.h b/src/FFmpeg.h
index af03ef1da..d6d512487 100644
--- a/src/FFmpeg.h
+++ b/src/FFmpeg.h
@@ -286,7 +286,7 @@ public:
 
    wxString GetLibAVFormatPath()
    {
-      return wxT("/Library/Application Support/audacity/libs");
+      return wxT("/opt/local/lib");
    }
 
    wxString GetLibAVFormatName()
diff --git a/src/ProjectSerializer.cpp b/src/ProjectSerializer.cpp
index ce2f3c518..f85d023d6 100644
--- a/src/ProjectSerializer.cpp
+++ b/src/ProjectSerializer.cpp
@@ -18,9 +18,21 @@
 
 #include <algorithm>
 #include <cstdint>
-#include <mutex>
+// #include <mutex>
 #include <wx/ustring.h>
 
+#include <atomic>
+// from https://codereview.stackexchange.com/questions/4422/macro-to-run-code-once-during-the-lifetime-of-the-program/49168#49168?newreg=7b41175fe9cc43e68dbc59d046c98d48
+#define RUN_ONCE                                       \
+    for (static std::atomic<int> _run_already_(false); \
+         !_run_already_.fetch_or(true);)    /***/
+// based on the std::call_once implementation from mutex.h:
+template<typename _Callable>
+void run_once(_Callable&& __f)
+{
+    RUN_ONCE (*__f)();
+}
+
 ///
 /// ProjectSerializer class
 ///
@@ -202,8 +214,8 @@ ProjectSerializer::ProjectSerializer(size_t allocSize)
    mDict.SetBufSize(allocSize);
    mBuffer.SetBufSize(allocSize);
 
-   static std::once_flag flag;
-   std::call_once(flag, []{
+//    static std::once_flag flag;
+   run_once( []{
       // Just once per run, store header information in the unique static
       // dictionary that will be written into each project that is saved.
       // Store the size of "wxStringCharType" so we can convert during recovery
diff --git a/src/commands/ScreenshotCommand.cpp b/src/commands/ScreenshotCommand.cpp
index 4e2a5e942..8c532d813 100644
--- a/src/commands/ScreenshotCommand.cpp
+++ b/src/commands/ScreenshotCommand.cpp
@@ -20,7 +20,7 @@ small calculations of rectangles.
 
 #include "ScreenshotCommand.h"
 
-#include <mutex>
+// #include <mutex>
 
 #include "LoadCommands.h"
 #include "../Project.h"
@@ -44,6 +44,18 @@ small calculations of rectangles.
 #include "CommandContext.h"
 #include "CommandManager.h"
 
+#include <atomic>
+// from https://codereview.stackexchange.com/questions/4422/macro-to-run-code-once-during-the-lifetime-of-the-program/49168#49168?newreg=7b41175fe9cc43e68dbc59d046c98d48
+#define RUN_ONCE                                       \
+    for (static std::atomic<int> _run_already_(false); \
+         !_run_already_.fetch_or(true);)    /***/
+// based on the std::call_once implementation from mutex.h:
+template<typename _Callable>
+void run_once(_Callable&& __f)
+{
+    RUN_ONCE (*__f)();
+}
+
 const ComponentInterfaceSymbol ScreenshotCommand::Symbol
 { XO("Screenshot") };
 
@@ -105,8 +117,8 @@ ScreenshotCommand::ScreenshotCommand()
    mbBringToTop=true;
    mIgnore=NULL;
    
-   static std::once_flag flag;
-   std::call_once( flag, []{
+//    static std::once_flag flag;
+   run_once( []{
       AudacityCommand::SetVetoDialogHook( MayCapture );
       Effect::SetVetoDialogHook( MayCapture );
    });
diff --git a/src/prefs/PrefsPanel.cpp b/src/prefs/PrefsPanel.cpp
index e4df7904b..25d9bf9b0 100644
--- a/src/prefs/PrefsPanel.cpp
+++ b/src/prefs/PrefsPanel.cpp
@@ -9,7 +9,19 @@ Paul Licameli split from PrefsDialog.cpp
 **********************************************************************/
 
 #include "PrefsPanel.h"
-#include <mutex>
+// #include <mutex>
+
+#include <atomic>
+// from https://codereview.stackexchange.com/questions/4422/macro-to-run-code-once-during-the-lifetime-of-the-program/49168#49168?newreg=7b41175fe9cc43e68dbc59d046c98d48
+#define RUN_ONCE                                       \
+    for (static std::atomic<int> _run_already_(false); \
+         !_run_already_.fetch_or(true);)    /***/
+// based on the std::call_once implementation from mutex.h:
+template<typename _Callable>
+void run_once(_Callable&& __f)
+{
+    RUN_ONCE (*__f)();
+}
 
 namespace {
 const auto PathStart = wxT("Preferences");
@@ -122,9 +134,9 @@ PrefsPanel::Factories
    };
 
    static Factories factories;
-   static std::once_flag flag;
+//    static std::once_flag flag;
 
-   std::call_once( flag, []{
+   run_once( []{
       PrefsItemVisitor visitor{ factories };
       Registry::TransparentGroupItem<> top{ PathStart };
       Registry::Visit( visitor, &top, &sRegistry() );
diff --git a/src/tracks/playabletrack/notetrack/ui/NoteTrackControls.cpp b/src/tracks/playabletrack/notetrack/ui/NoteTrackControls.cpp
index 675ef97a6..fa9f9ac11 100644
--- a/src/tracks/playabletrack/notetrack/ui/NoteTrackControls.cpp
+++ b/src/tracks/playabletrack/notetrack/ui/NoteTrackControls.cpp
@@ -28,7 +28,7 @@ Paul Licameli split from TrackPanel.cpp
 #include "../../../../RefreshCode.h"
 #include "../../../../prefs/ThemePrefs.h"
 
-#include <mutex>
+// #include <mutex>
 #include <wx/frame.h>
 
 ///////////////////////////////////////////////////////////////////////////////
@@ -276,8 +276,8 @@ namespace {
 LWSlider * NoteTrackControls::VelocitySlider
 (const wxRect &sliderRect, const NoteTrack *t, bool captured, wxWindow *pParent)
 {
-   static std::once_flag flag;
-   std::call_once( flag, [] {
+//    static std::once_flag flag;
+   run_once( [] {
       wxCommandEvent dummy;
       ReCreateVelocitySlider( dummy );
       wxTheApp->Bind(EVT_THEME_CHANGE, ReCreateVelocitySlider);
diff --git a/src/tracks/playabletrack/ui/PlayableTrackControls.cpp b/src/tracks/playabletrack/ui/PlayableTrackControls.cpp
index 62df97070..79adfd351 100644
--- a/src/tracks/playabletrack/ui/PlayableTrackControls.cpp
+++ b/src/tracks/playabletrack/ui/PlayableTrackControls.cpp
@@ -194,12 +194,12 @@ void PlayableTrackControls::GetMuteSoloRect
 }
 
 
-#include <mutex>
+// #include <mutex>
 const TCPLines& PlayableTrackControls::StaticTCPLines()
 {
    static TCPLines playableTrackTCPLines;
-   static std::once_flag flag;
-   std::call_once( flag, []{
+//    static std::once_flag flag;
+   run_once([]{
       playableTrackTCPLines = CommonTrackControls::StaticTCPLines();
       playableTrackTCPLines.insert( playableTrackTCPLines.end(), {
    #ifdef EXPERIMENTAL_DA
@@ -212,7 +212,6 @@ const TCPLines& PlayableTrackControls::StaticTCPLines()
          { TCPLine::kItemMute | TCPLine::kItemSolo, kTrackInfoBtnSize + 1, 0,
            MuteAndSoloDrawFunction },
    #endif
-
       } );
    } );
    return playableTrackTCPLines;
diff --git a/src/tracks/playabletrack/wavetrack/ui/WaveTrackControls.cpp b/src/tracks/playabletrack/wavetrack/ui/WaveTrackControls.cpp
index af2bc13ab..e7d19cdf9 100644
--- a/src/tracks/playabletrack/wavetrack/ui/WaveTrackControls.cpp
+++ b/src/tracks/playabletrack/wavetrack/ui/WaveTrackControls.cpp
@@ -1152,8 +1152,8 @@ LWSlider *WaveTrackControls::GainSlider(
 LWSlider * WaveTrackControls::GainSlider
 (const wxRect &sliderRect, const WaveTrack *t, bool captured, wxWindow *pParent)
 {
-   static std::once_flag flag;
-   std::call_once( flag, [] {
+//    static std::once_flag flag;
+   run_once( [] {
       wxCommandEvent dummy;
       ReCreateGainSlider( dummy );
       wxTheApp->Bind(EVT_THEME_CHANGE, ReCreateGainSlider);
@@ -1208,8 +1208,8 @@ LWSlider *WaveTrackControls::PanSlider(
 LWSlider * WaveTrackControls::PanSlider
 (const wxRect &sliderRect, const WaveTrack *t, bool captured, wxWindow *pParent)
 {
-   static std::once_flag flag;
-   std::call_once( flag, [] {
+//    static std::once_flag flag;
+   run_once( [] {
       wxCommandEvent dummy;
       ReCreatePanSlider( dummy );
       wxTheApp->Bind(EVT_THEME_CHANGE, ReCreatePanSlider);
diff --git a/src/tracks/playabletrack/wavetrack/ui/WaveformView.cpp b/src/tracks/playabletrack/wavetrack/ui/WaveformView.cpp
index 68c0c0063..7f05c9bf2 100644
--- a/src/tracks/playabletrack/wavetrack/ui/WaveformView.cpp
+++ b/src/tracks/playabletrack/wavetrack/ui/WaveformView.cpp
@@ -1047,7 +1047,7 @@ static const WaveTrackSubViews::RegisteredFactory key{
 // menu.  It is appropriate only to waveform view and so is kept in this
 // source file with the rest of the waveform view implementation.
 
-#include <mutex> // for std::call_once
+// #include <mutex> // for std::call_once
 #include "WaveTrackControls.h"
 #include "../../../../widgets/PopupMenuTable.h"
 #include "../../../../ProjectAudioIO.h"
@@ -1110,8 +1110,8 @@ BEGIN_POPUP_MENU(WaveColorMenuTable)
       menu.Enable( id, !unsafe );
    };
 
-   static std::once_flag flag;
-   std::call_once( flag, [this]{
+//    static std::once_flag flag;
+   run_once( [this]{
       auto &hostTable = GetWaveTrackMenuTable();
       OnInstrument1ID = hostTable.ReserveId();
       OnInstrument2ID = hostTable.ReserveId();
diff --git a/src/widgets/FileHistory.cpp b/src/widgets/FileHistory.cpp
index 997260d22..ae136db85 100644
--- a/src/widgets/FileHistory.cpp
+++ b/src/widgets/FileHistory.cpp
@@ -22,7 +22,19 @@
 #include "../Internat.h"
 #include "../Prefs.h"
 
-#include <mutex>
+// #include <mutex>
+
+#include <atomic>
+// from https://codereview.stackexchange.com/questions/4422/macro-to-run-code-once-during-the-lifetime-of-the-program/49168#49168?newreg=7b41175fe9cc43e68dbc59d046c98d48
+#define RUN_ONCE                                       \
+    for (static std::atomic<int> _run_already_(false); \
+         !_run_already_.fetch_or(true);)    /***/
+// based on the std::call_once implementation from mutex.h:
+template<typename _Callable>
+void run_once(_Callable&& __f)
+{
+    RUN_ONCE __f();
+}
 
 FileHistory::FileHistory(size_t maxfiles, wxWindowID base)
 {
@@ -39,8 +51,8 @@ FileHistory &FileHistory::Global()
    // TODO - read the number of files to store in history from preferences
    static FileHistory history{
       ID_RECENT_LAST - ID_RECENT_FIRST + 1, ID_RECENT_CLEAR };
-   static std::once_flag flag;
-   std::call_once( flag, [&]{
+//    static std::once_flag flag;
+   run_once([&]{
       history.Load(*gPrefs, wxT("RecentFiles"));
    });
 
