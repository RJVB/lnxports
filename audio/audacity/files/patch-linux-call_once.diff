diff --git a/libraries/lib-files/AudacityLogger.cpp b/libraries/lib-files/AudacityLogger.cpp
index b17b3783..bfa962d0 100644
--- a/libraries/lib-files/AudacityLogger.cpp
+++ b/libraries/lib-files/AudacityLogger.cpp
@@ -25,6 +25,18 @@ Provides thread-safe logging based on the wxWidgets log facility.
 #include <wx/log.h>
 #include <wx/tokenzr.h>
 
+#include <atomic>
+// from https://codereview.stackexchange.com/questions/4422/macro-to-run-code-once-during-the-lifetime-of-the-program/49168#49168?newreg=7b41175fe9cc43e68dbc59d046c98d48
+#define RUN_ONCE                                       \
+    for (static std::atomic<int> _run_already_(false); \
+         !_run_already_.fetch_or(true);)    /***/
+// based on the std::call_once implementation from mutex.h:
+template<typename _Callable>
+void run_once(_Callable&& __f)
+{
+    RUN_ONCE (*__f)();
+}
+
 //
 // AudacityLogger class
 //
@@ -34,8 +46,8 @@ Provides thread-safe logging based on the wxWidgets log facility.
 
 AudacityLogger *AudacityLogger::Get()
 {
-   static std::once_flag flag;
-   std::call_once( flag, []{
+//    static std::once_flag flag;
+   run_once( []{
       // wxWidgets will clean up the logger for the main thread, so we can say
       // safenew.  See:
       // http://docs.wxwidgets.org/3.0/classwx_log.html#a2525bf54fa3f31dc50e6e3cd8651e71d
diff --git a/libraries/lib-project-file-io/ProjectSerializer.cpp b/libraries/lib-project-file-io/ProjectSerializer.cpp
index 8c94efe9..610c80cd 100644
--- a/libraries/lib-project-file-io/ProjectSerializer.cpp
+++ b/libraries/lib-project-file-io/ProjectSerializer.cpp
@@ -17,7 +17,7 @@
 
 #include <algorithm>
 #include <cstdint>
-#include <mutex>
+// #include <mutex>
 #include <wx/ustring.h>
 #include <codecvt>
 #include <locale>
@@ -27,6 +27,18 @@
 
 #include "BufferedStreamReader.h"
 
+#include <atomic>
+// from https://codereview.stackexchange.com/questions/4422/macro-to-run-code-once-during-the-lifetime-of-the-program/49168#49168?newreg=7b41175fe9cc43e68dbc59d046c98d48
+#define RUN_ONCE                                       \
+    for (static std::atomic<int> _run_already_(false); \
+         !_run_already_.fetch_or(true);)    /***/
+// based on the std::call_once implementation from mutex.h:
+template<typename _Callable>
+void run_once(_Callable&& __f)
+{
+    RUN_ONCE (*__f)();
+}
+
 ///
 /// ProjectSerializer class
 ///
@@ -355,8 +367,8 @@ std::string FastStringConvert(const void* bytes, int bytesCount)
 
 ProjectSerializer::ProjectSerializer(size_t allocSize)
 {
-   static std::once_flag flag;
-   std::call_once(flag, []{
+//    static std::once_flag flag;
+   run_once([]{
       // Just once per run, store header information in the unique static
       // dictionary that will be written into each project that is saved.
       // Store the size of "wxStringCharType" so we can convert during recovery
diff --git a/libraries/lib-registries/AttachedVirtualFunction.h b/libraries/lib-registries/AttachedVirtualFunction.h
index c7685f3b..5a968c47 100644
--- a/libraries/lib-registries/AttachedVirtualFunction.h
+++ b/libraries/lib-registries/AttachedVirtualFunction.h
@@ -17,8 +17,21 @@ Paul Licameli
 #include <mutex>
 #include <type_traits>
 #include <utility>
+#include <atomic>
 #include "InconsistencyException.h"
 
+// from https://codereview.stackexchange.com/questions/4422/macro-to-run-code-once-during-the-lifetime-of-the-program/49168#49168?newreg=7b41175fe9cc43e68dbc59d046c98d48
+#define RUN_ONCE                                       \
+    for (static std::atomic<int> _run_already_(false); \
+         !_run_already_.fetch_or(true);)    /***/
+// based on the std::call_once implementation from mutex.h:
+template<typename _Callable>
+void run_once(_Callable&& __f)
+{
+    RUN_ONCE __f();
+}
+#undef RUN_ONCE
+
 //! Class template generates single-dispatch, open method registry tables
 /*!
 Defines a "virtual" function with multiple bodies chosen by type-switch
@@ -206,8 +219,8 @@ public:
       /*! (There will be others if there are any further overrides.) */
       Override()
       {
-         static std::once_flag flag;
-         std::call_once( flag, []{
+//          static std::once_flag flag;
+         run_once( []{
             // Register in the table an adaptor thunk that downcasts the object
             auto implementation = Implementation();
             Register< Subclass >( [=]( This &obj, Arguments &&...arguments ){
@@ -287,8 +300,7 @@ private:
 #define DEFINE_ATTACHED_VIRTUAL(Name)                          \
    template<> Name::AttachedVirtualFunction()                  \
    {                                                           \
-      static std::once_flag flag;                              \
-      std::call_once( flag, []{ Register<Object>( Implementation() ); } ); \
+      run_once( []{ Register<Object>( Implementation() ); } ); \
    }                                                           \
    template<> auto Name::GetRegistry() -> Registry &           \
    {                                                           \
diff --git a/src/JournalEvents.cpp b/src/JournalEvents.cpp
index a9198975..9f20c647 100644
--- a/src/JournalEvents.cpp
+++ b/src/JournalEvents.cpp
@@ -15,7 +15,7 @@
 #include "JournalWindowPaths.h"
 
 #include <map>
-#include <mutex>
+// #include <mutex>
 #include <optional>
 #include <unordered_map>
 
@@ -31,6 +31,18 @@
 #include "Identifier.h"
 #include "wxArrayStringEx.h"
 
+#include <atomic>
+// from https://codereview.stackexchange.com/questions/4422/macro-to-run-code-once-during-the-lifetime-of-the-program/49168#49168?newreg=7b41175fe9cc43e68dbc59d046c98d48
+#define RUN_ONCE                                       \
+    for (static std::atomic<int> _run_already_(false); \
+         !_run_already_.fetch_or(true);)    /***/
+// based on the std::call_once implementation from mutex.h:
+template<typename _Callable>
+void run_once(_Callable&& __f)
+{
+    RUN_ONCE (*__f)();
+}
+
 namespace Journal {
 
 namespace Events {
@@ -356,9 +368,9 @@ const Types &TypeCatalog()
 
 static const ByTypeMap &ByType()
 {
-   static std::once_flag flag;
+//    static std::once_flag flag;
    static ByTypeMap result;
-   std::call_once( flag, []{
+   run_once( []{
       for ( const auto &type : TypeCatalog() )
          result.emplace( type.type, type );
    } );
@@ -367,9 +379,9 @@ static const ByTypeMap &ByType()
 
 static const ByCodeMap &ByCode()
 {
-   static std::once_flag flag;
+//    static std::once_flag flag;
    static ByCodeMap result;
-   std::call_once( flag, []{
+   run_once( []{
       for ( const auto &type : TypeCatalog() )
          result.emplace( type.code, type );
    } );
diff --git a/src/prefs/PrefsPanel.cpp b/src/prefs/PrefsPanel.cpp
index 290cd934..3eaff3fb 100644
--- a/src/prefs/PrefsPanel.cpp
+++ b/src/prefs/PrefsPanel.cpp
@@ -9,7 +9,19 @@ Paul Licameli split from PrefsDialog.cpp
 **********************************************************************/
 
 #include "PrefsPanel.h"
-#include <mutex>
+// #include <mutex>
+
+#include <atomic>
+// from https://codereview.stackexchange.com/questions/4422/macro-to-run-code-once-during-the-lifetime-of-the-program/49168#49168?newreg=7b41175fe9cc43e68dbc59d046c98d48
+#define RUN_ONCE                                       \
+    for (static std::atomic<int> _run_already_(false); \
+         !_run_already_.fetch_or(true);)    /***/
+// based on the std::call_once implementation from mutex.h:
+template<typename _Callable>
+void run_once(_Callable&& __f)
+{
+    RUN_ONCE (*__f)();
+}
 
 static const auto PathStart = L"Preferences";
 
@@ -115,9 +127,9 @@ PrefsPanel::Factories
    };
 
    static Factories factories;
-   static std::once_flag flag;
+//    static std::once_flag flag;
 
-   std::call_once( flag, []{
+   run_once( []{
       PrefsItem::Visitor visitor{ factories };
       Registry::TransparentGroupItem<> top{ PathStart };
       Registry::Visit( visitor, &top, &PrefsItem::Registry() );
diff --git a/src/tracks/playabletrack/notetrack/ui/NoteTrackControls.cpp b/src/tracks/playabletrack/notetrack/ui/NoteTrackControls.cpp
index ac65d0be..64d4cf2b 100644
--- a/src/tracks/playabletrack/notetrack/ui/NoteTrackControls.cpp
+++ b/src/tracks/playabletrack/notetrack/ui/NoteTrackControls.cpp
@@ -31,10 +31,22 @@ Paul Licameli split from TrackPanel.cpp
 #include "../../../../RefreshCode.h"
 #include "../../../../prefs/ThemePrefs.h"
 
-#include <mutex>
+// #include <mutex>
 #include <wx/app.h>
 #include <wx/frame.h>
 
+#include <atomic>
+// from https://codereview.stackexchange.com/questions/4422/macro-to-run-code-once-during-the-lifetime-of-the-program/49168#49168?newreg=7b41175fe9cc43e68dbc59d046c98d48
+#define RUN_ONCE                                       \
+    for (static std::atomic<int> _run_already_(false); \
+         !_run_already_.fetch_or(true);)    /***/
+// based on the std::call_once implementation from mutex.h:
+template<typename _Callable>
+void run_once(_Callable&& __f)
+{
+    RUN_ONCE (*__f)();
+}
+
 ///////////////////////////////////////////////////////////////////////////////
 NoteTrackControls::~NoteTrackControls()
 {
@@ -275,8 +287,8 @@ namespace {
 LWSlider * NoteTrackControls::VelocitySlider
 (const wxRect &sliderRect, const NoteTrack *t, bool captured, wxWindow *pParent)
 {
-   static std::once_flag flag;
-   std::call_once( flag, []{ ReCreateVelocitySlider({}); });
+//    static std::once_flag flag;
+   run_once( []{ ReCreateVelocitySlider({}); });
    static auto subscription = theTheme.Subscribe(ReCreateVelocitySlider);
 
    wxPoint pos = sliderRect.GetPosition();
diff --git a/src/tracks/playabletrack/ui/PlayableTrackControls.cpp b/src/tracks/playabletrack/ui/PlayableTrackControls.cpp
index 1f96bb48..f8667d29 100644
--- a/src/tracks/playabletrack/ui/PlayableTrackControls.cpp
+++ b/src/tracks/playabletrack/ui/PlayableTrackControls.cpp
@@ -256,8 +256,8 @@ void PlayableTrackControls::GetEffectsRect
 const TCPLines& PlayableTrackControls::StaticNoteTCPLines()
 {
    static TCPLines playableTrackTCPLines;
-   static std::once_flag flag;
-   std::call_once( flag, []{
+//    static std::once_flag flag;
+   run_once( []{
       playableTrackTCPLines = CommonTrackControls::StaticTCPLines();
       playableTrackTCPLines.insert( playableTrackTCPLines.end(), {
       { TCPLine::kItemMute | TCPLine::kItemSolo, kTrackInfoBtnSize + 1, 0,
@@ -270,8 +270,8 @@ const TCPLines& PlayableTrackControls::StaticNoteTCPLines()
 const TCPLines& PlayableTrackControls::StaticWaveTCPLines()
 {
    static TCPLines playableTrackTCPLines;
-   static std::once_flag flag;
-   std::call_once( flag, []{
+//    static std::once_flag flag;
+   run_once( []{
       playableTrackTCPLines = CommonTrackControls::StaticTCPLines();
       playableTrackTCPLines.insert( playableTrackTCPLines.end(), {
       { TCPLine::kItemMute | TCPLine::kItemSolo, kTrackInfoBtnSize + 1, 0,
diff --git a/src/tracks/playabletrack/wavetrack/ui/WaveTrackControls.cpp b/src/tracks/playabletrack/wavetrack/ui/WaveTrackControls.cpp
index 647e1614..73c0cf90 100644
--- a/src/tracks/playabletrack/wavetrack/ui/WaveTrackControls.cpp
+++ b/src/tracks/playabletrack/wavetrack/ui/WaveTrackControls.cpp
@@ -1142,8 +1142,8 @@ LWSlider *WaveTrackControls::GainSlider(
 LWSlider * WaveTrackControls::GainSlider
 (const wxRect &sliderRect, const WaveTrack *t, bool captured, wxWindow *pParent)
 {
-   static std::once_flag flag;
-   std::call_once( flag, []{ ReCreateGainSlider({}); });
+//    static std::once_flag flag;
+   run_once( []{ ReCreateGainSlider({}); });
    static auto subscription = theTheme.Subscribe(ReCreateGainSlider);
 
    wxPoint pos = sliderRect.GetPosition();
@@ -1195,8 +1195,8 @@ LWSlider *WaveTrackControls::PanSlider(
 LWSlider * WaveTrackControls::PanSlider
 (const wxRect &sliderRect, const WaveTrack *t, bool captured, wxWindow *pParent)
 {
-   static std::once_flag flag;
-   std::call_once( flag, []{ ReCreatePanSlider({}); });
+//    static std::once_flag flag;
+   run_once( []{ ReCreatePanSlider({}); });
    static auto subscription = theTheme.Subscribe(ReCreatePanSlider);
 
    wxPoint pos = sliderRect.GetPosition();
diff --git a/src/tracks/playabletrack/wavetrack/ui/WaveformView.cpp b/src/tracks/playabletrack/wavetrack/ui/WaveformView.cpp
index 26c0fb46..c6b5c962 100644
--- a/src/tracks/playabletrack/wavetrack/ui/WaveformView.cpp
+++ b/src/tracks/playabletrack/wavetrack/ui/WaveformView.cpp
@@ -1082,7 +1082,7 @@ static const WaveTrackSubViews::RegisteredFactory key{
 // menu.  It is appropriate only to waveform view and so is kept in this
 // source file with the rest of the waveform view implementation.
 
-#include <mutex> // for std::call_once
+// #include <mutex> // for std::call_once
 #include "WaveTrackControls.h"
 #include "../../../../widgets/PopupMenuTable.h"
 #include "ProjectAudioIO.h"
@@ -1140,8 +1140,8 @@ BEGIN_POPUP_MENU(WaveColorMenuTable)
       menu.Enable( id, !unsafe );
    };
 
-   static std::once_flag flag;
-   std::call_once( flag, [this]{
+//    static std::once_flag flag;
+   run_once( [this]{
       auto &hostTable = GetWaveTrackMenuTable();
       OnInstrument1ID = hostTable.ReserveId();
       OnInstrument2ID = hostTable.ReserveId();
diff --git a/src/update/UpdateManager.cpp b/src/update/UpdateManager.cpp
index 80b2b3d6..6e44b52f 100644
--- a/src/update/UpdateManager.cpp
+++ b/src/update/UpdateManager.cpp
@@ -29,6 +29,18 @@
 
 #define UPDATE_LOCAL_TESTING 0
 
+#include <atomic>
+// from https://codereview.stackexchange.com/questions/4422/macro-to-run-code-once-during-the-lifetime-of-the-program/49168#49168?newreg=7b41175fe9cc43e68dbc59d046c98d48
+#define RUN_ONCE                                       \
+    for (static std::atomic<int> _run_already_(false); \
+         !_run_already_.fetch_or(true);)    /***/
+// based on the std::call_once implementation from mutex.h:
+template<typename _Callable>
+void run_once(_Callable&& __f)
+{
+    RUN_ONCE (*__f)();
+}
+
 static const char* prefsUpdateScheduledTime = "/Update/UpdateScheduledTime";
 
 static BoolSetting
@@ -77,8 +89,8 @@ void UpdateManager::Start(bool suppressModal)
         gPrefs->Flush();
     }
 
-    static std::once_flag flag;
-    std::call_once(flag, [&instance] {
+//     static std::once_flag flag;
+    run_once([&instance] {
         instance.mTimer.SetOwner(&instance, ID_TIMER);
         instance.mTimer.StartOnce(1);
         });
diff --git a/src/widgets/FileHistory.cpp b/src/widgets/FileHistory.cpp
index 14a5fbf9..a8c43ff2 100644
--- a/src/widgets/FileHistory.cpp
+++ b/src/widgets/FileHistory.cpp
@@ -22,7 +22,19 @@
 #include "Internat.h"
 #include "Prefs.h"
 
-#include <mutex>
+// #include <mutex>
+
+#include <atomic>
+// from https://codereview.stackexchange.com/questions/4422/macro-to-run-code-once-during-the-lifetime-of-the-program/49168#49168?newreg=7b41175fe9cc43e68dbc59d046c98d48
+#define RUN_ONCE                                       \
+    for (static std::atomic<int> _run_already_(false); \
+         !_run_already_.fetch_or(true);)    /***/
+// based on the std::call_once implementation from mutex.h:
+template<typename _Callable>
+void run_once(_Callable&& __f)
+{
+    RUN_ONCE __f();
+}
 
 FileHistory::FileHistory(size_t maxfiles, wxWindowID base)
 {
@@ -39,8 +51,8 @@ FileHistory &FileHistory::Global()
    // TODO - read the number of files to store in history from preferences
    static FileHistory history{
       ID_RECENT_LAST - ID_RECENT_FIRST + 1, ID_RECENT_CLEAR };
-   static std::once_flag flag;
-   std::call_once( flag, [&]{
+//    static std::once_flag flag;
+   run_once([&]{
       history.Load(*gPrefs, wxT("RecentFiles"));
    });
 
