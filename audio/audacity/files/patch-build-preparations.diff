commit e1b1de0b7e2232139f741ed486059f3129bb3920
Author: bertin <macportsuser@macports.org>
Date:   Fri Oct 10 19:03:36 2025 +0200

    /opt/local/linux-ports/audio/audacity/files/patch-build-preparations.diff

diff --git a/CMakeLists.txt b/CMakeLists.txt
index ea0eb7069..75d7c6691 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -679,18 +679,18 @@ else()
    configure_file( src/audacity_config.h.in src/private/configunix.h )
 endif()
 
-# Generate a picture of module dependencies
-string( JOIN "\n" GRAPH_EDGES ${GRAPH_EDGES} )
-# Choose edge attributes making it easy to hover at either end of edge
-# and see a tooltip describing the edge, in svg image
-file( WRITE "${CMAKE_CURRENT_BINARY_DIR}/modules.dot" "digraph {
-   graph [rankdir=LR newrank=true] edge [dir=both,arrowtail=inv] \n"
-   "${GRAPH_SUBGRAPHS}\n"
-   "${GRAPH_EDGES}"
-   "\n}\n"
-)
-execute_process( COMMAND
-   dot -O -Tsvg "${CMAKE_CURRENT_BINARY_DIR}/modules.dot" )
+# # Generate a picture of module dependencies
+# string( JOIN "\n" GRAPH_EDGES ${GRAPH_EDGES} )
+# # Choose edge attributes making it easy to hover at either end of edge
+# # and see a tooltip describing the edge, in svg image
+# file( WRITE "${CMAKE_CURRENT_BINARY_DIR}/modules.dot" "digraph {
+#    graph [rankdir=LR newrank=true] edge [dir=both,arrowtail=inv] \n"
+#    "${GRAPH_SUBGRAPHS}\n"
+#    "${GRAPH_EDGES}"
+#    "\n}\n"
+# )
+# execute_process( COMMAND
+#    dot -O -Tsvg "${CMAKE_CURRENT_BINARY_DIR}/modules.dot" )
 
 #
 # Code signing
diff --git a/cmake-proxies/cmake-modules/AudacityDependencies.cmake b/cmake-proxies/cmake-modules/AudacityDependencies.cmake
index 182cbb4d5..5e8c35172 100644
--- a/cmake-proxies/cmake-modules/AudacityDependencies.cmake
+++ b/cmake-proxies/cmake-modules/AudacityDependencies.cmake
@@ -139,6 +139,9 @@ include (DependenciesList)
 
 # If conan is enabled, run conan_runner.py
 if( ${_OPT}conan_enabled )
+   ## RJVB: cache the MacPorts build type because conan no likey
+   set(CBT ${CMAKE_BUILD_TYPE})
+   set(CMAKE_BUILD_TYPE Release)
    # Deduce the build type
    get_property(is_multi_config GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
 
@@ -207,9 +210,13 @@ if( ${_OPT}conan_enabled )
 
    if( conan_result )
       message( FATAL_ERROR "Conan failed to install dependencies (${conan_result}) ${PYTHON}" )
+   else()
+      message( STATUS "conan_runner.py completed successfully")
    endif()
 
    set(CMAKE_FIND_PACKAGE_PREFER_CONFIG TRUE)
+   ## RJVB: restore the MacPorts build type
+   set(CMAKE_BUILD_TYPE ${CBT})
 endif()
 
 if( ${_OPT}conan_enabled )
