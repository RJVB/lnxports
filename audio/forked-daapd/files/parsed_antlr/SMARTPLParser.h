/** \file
 *  This C header file was generated by $ANTLR version 3.2 debian-7ubuntu3
 *
 *     -  From the grammar source file : SMARTPL.g
 *     -                            On : 2020-05-28 00:12:27
 *     -                for the parser : SMARTPLParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser SMARTPLParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pSMARTPLParser, which is returned from a call to SMARTPLParserNew().
 *
 * The methods in pSMARTPLParser are  as follows:
 *
 *  - SMARTPLParser_playlist_return      pSMARTPLParser->playlist(pSMARTPLParser)
 *  - SMARTPLParser_expression_return      pSMARTPLParser->expression(pSMARTPLParser)
 *  - SMARTPLParser_orderexpr_return      pSMARTPLParser->orderexpr(pSMARTPLParser)
 *  - SMARTPLParser_ordertag_return      pSMARTPLParser->ordertag(pSMARTPLParser)
 *  - SMARTPLParser_limitexpr_return      pSMARTPLParser->limitexpr(pSMARTPLParser)
 *  - SMARTPLParser_aexpr_return      pSMARTPLParser->aexpr(pSMARTPLParser)
 *  - SMARTPLParser_nexpr_return      pSMARTPLParser->nexpr(pSMARTPLParser)
 *  - SMARTPLParser_crit_return      pSMARTPLParser->crit(pSMARTPLParser)
 *  - SMARTPLParser_dateval_return      pSMARTPLParser->dateval(pSMARTPLParser)
 *  - SMARTPLParser_interval_return      pSMARTPLParser->interval(pSMARTPLParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_SMARTPLParser_H
#define _SMARTPLParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct SMARTPLParser_Ctx_struct SMARTPLParser, * pSMARTPLParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct SMARTPLParser_playlist_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    SMARTPLParser_playlist_return;

typedef struct SMARTPLParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    SMARTPLParser_expression_return;

typedef struct SMARTPLParser_orderexpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    SMARTPLParser_orderexpr_return;

typedef struct SMARTPLParser_ordertag_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    SMARTPLParser_ordertag_return;

typedef struct SMARTPLParser_limitexpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    SMARTPLParser_limitexpr_return;

typedef struct SMARTPLParser_aexpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    SMARTPLParser_aexpr_return;

typedef struct SMARTPLParser_nexpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    SMARTPLParser_nexpr_return;

typedef struct SMARTPLParser_crit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    SMARTPLParser_crit_return;

typedef struct SMARTPLParser_dateval_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    SMARTPLParser_dateval_return;

typedef struct SMARTPLParser_interval_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    SMARTPLParser_interval_return;



/** Context tracking structure for SMARTPLParser
 */
struct SMARTPLParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     SMARTPLParser_playlist_return (*playlist)	(struct SMARTPLParser_Ctx_struct * ctx);
     SMARTPLParser_expression_return (*expression)	(struct SMARTPLParser_Ctx_struct * ctx);
     SMARTPLParser_orderexpr_return (*orderexpr)	(struct SMARTPLParser_Ctx_struct * ctx);
     SMARTPLParser_ordertag_return (*ordertag)	(struct SMARTPLParser_Ctx_struct * ctx);
     SMARTPLParser_limitexpr_return (*limitexpr)	(struct SMARTPLParser_Ctx_struct * ctx);
     SMARTPLParser_aexpr_return (*aexpr)	(struct SMARTPLParser_Ctx_struct * ctx);
     SMARTPLParser_nexpr_return (*nexpr)	(struct SMARTPLParser_Ctx_struct * ctx);
     SMARTPLParser_crit_return (*crit)	(struct SMARTPLParser_Ctx_struct * ctx);
     SMARTPLParser_dateval_return (*dateval)	(struct SMARTPLParser_Ctx_struct * ctx);
     SMARTPLParser_interval_return (*interval)	(struct SMARTPLParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct SMARTPLParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pSMARTPLParser SMARTPLParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pSMARTPLParser SMARTPLParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define INTBOOL      24
#define STRTAG      10
#define SORTDIR      9
#define LIMIT      8
#define AGO      30
#define WHITESPACE      37
#define GREATEREQUAL      33
#define BEFORE      26
#define DATETAG      12
#define GROUPTAG      28
#define HAVING      6
#define INT      16
#define ORDERBY      7
#define NeverUsedRule      15
#define NOT      18
#define AFTER      25
#define AND      17
#define EOF      -1
#define INCLUDES      21
#define STR      4
#define GREATER      32
#define LPAR      19
#define T__38      38
#define ENUMTAG      13
#define IS      22
#define T__39      39
#define ENUMVAL      27
#define EQUAL      36
#define STARTSWITH      23
#define OR      5
#define LESS      34
#define RPAR      20
#define XXX      14
#define DATE      29
#define LESSEQUAL      35
#define DATINTERVAL      31
#define INTTAG      11
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for SMARTPLParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
