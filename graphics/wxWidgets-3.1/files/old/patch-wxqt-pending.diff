diff --git Makefile.in Makefile.in
index cf90105..1ced905 100644
--- Makefile.in
+++ Makefile.in
@@ -5023,6 +5023,7 @@ COND_TOOLKIT_QT___LOWLEVEL_SRC_OBJECTS =  \
 	monodll_qt_msgdlg.o \
 	monodll_qt_notebook.o \
 	monodll_qt_palette.o \
+	monodll_qt_nonownedwnd.o \
 	monodll_qt_pen.o \
 	monodll_qt_popupwin.o \
 	monodll_qt_printdlg.o \
@@ -5729,6 +5730,7 @@ COND_TOOLKIT_QT___LOWLEVEL_SRC_OBJECTS_1 =  \
 	monodll_qt_msgdlg.o \
 	monodll_qt_notebook.o \
 	monodll_qt_palette.o \
+	monodll_qt_nonownedwnd.o \
 	monodll_qt_pen.o \
 	monodll_qt_popupwin.o \
 	monodll_qt_printdlg.o \
@@ -7044,6 +7046,7 @@ COND_TOOLKIT_QT___LOWLEVEL_SRC_OBJECTS_2 =  \
 	monolib_qt_msgdlg.o \
 	monolib_qt_notebook.o \
 	monolib_qt_palette.o \
+	monolib_qt_nonownedwnd.o \
 	monolib_qt_pen.o \
 	monolib_qt_popupwin.o \
 	monolib_qt_printdlg.o \
@@ -7750,6 +7753,7 @@ COND_TOOLKIT_QT___LOWLEVEL_SRC_OBJECTS_3 =  \
 	monolib_qt_msgdlg.o \
 	monolib_qt_notebook.o \
 	monolib_qt_palette.o \
+	monolib_qt_nonownedwnd.o \
 	monolib_qt_pen.o \
 	monolib_qt_popupwin.o \
 	monolib_qt_printdlg.o \
@@ -9209,6 +9213,7 @@ COND_TOOLKIT_QT___LOWLEVEL_SRC_OBJECTS_4 =  \
 	coredll_qt_msgdlg.o \
 	coredll_qt_notebook.o \
 	coredll_qt_palette.o \
+	coredll_qt_nonownedwnd.o \
 	coredll_qt_pen.o \
 	coredll_qt_popupwin.o \
 	coredll_qt_printdlg.o \
@@ -9915,6 +9920,7 @@ COND_TOOLKIT_QT___LOWLEVEL_SRC_OBJECTS_5 =  \
 	coredll_qt_msgdlg.o \
 	coredll_qt_notebook.o \
 	coredll_qt_palette.o \
+	coredll_qt_nonownedwnd.o \
 	coredll_qt_pen.o \
 	coredll_qt_popupwin.o \
 	coredll_qt_printdlg.o \
@@ -10682,6 +10688,7 @@ COND_TOOLKIT_QT___LOWLEVEL_SRC_OBJECTS_6 =  \
 	corelib_qt_msgdlg.o \
 	corelib_qt_notebook.o \
 	corelib_qt_palette.o \
+	corelib_qt_nonownedwnd.o \
 	corelib_qt_pen.o \
 	corelib_qt_popupwin.o \
 	corelib_qt_printdlg.o \
@@ -11388,6 +11395,7 @@ COND_TOOLKIT_QT___LOWLEVEL_SRC_OBJECTS_7 =  \
 	corelib_qt_msgdlg.o \
 	corelib_qt_notebook.o \
 	corelib_qt_palette.o \
+	corelib_qt_nonownedwnd.o \
 	corelib_qt_pen.o \
 	corelib_qt_popupwin.o \
 	corelib_qt_printdlg.o \
@@ -18672,6 +18680,9 @@ monodll_sound_sdl.o: $(srcdir)/src/unix/sound_sdl.cpp $(MONODLL_ODEP)
 @COND_TOOLKIT_QT_USE_GUI_1@monodll_qt_palette.o: $(srcdir)/src/qt/palette.cpp $(MONODLL_ODEP)
 @COND_TOOLKIT_QT_USE_GUI_1@	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/qt/palette.cpp
 
+@COND_TOOLKIT_QT_USE_GUI_1@monodll_qt_nonownedwnd.o: $(srcdir)/src/qt/nonownedwnd.cpp $(MONODLL_ODEP)
+@COND_TOOLKIT_QT_USE_GUI_1@	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/qt/nonownedwnd.cpp
+
 @COND_TOOLKIT_QT_USE_GUI_1@monodll_qt_pen.o: $(srcdir)/src/qt/pen.cpp $(MONODLL_ODEP)
 @COND_TOOLKIT_QT_USE_GUI_1@	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/qt/pen.cpp
 
@@ -23520,6 +23531,9 @@ monolib_sound_sdl.o: $(srcdir)/src/unix/sound_sdl.cpp $(MONOLIB_ODEP)
 @COND_TOOLKIT_QT_USE_GUI_1@monolib_qt_palette.o: $(srcdir)/src/qt/palette.cpp $(MONOLIB_ODEP)
 @COND_TOOLKIT_QT_USE_GUI_1@	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/qt/palette.cpp
 
+@COND_TOOLKIT_QT_USE_GUI_1@monolib_qt_nonownedwnd.o: $(srcdir)/src/qt/nonownedwnd.cpp $(MONOLIB_ODEP)
+@COND_TOOLKIT_QT_USE_GUI_1@	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/qt/nonownedwnd.cpp
+
 @COND_TOOLKIT_QT_USE_GUI_1@monolib_qt_pen.o: $(srcdir)/src/qt/pen.cpp $(MONOLIB_ODEP)
 @COND_TOOLKIT_QT_USE_GUI_1@	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/qt/pen.cpp
 
@@ -28437,6 +28451,9 @@ coredll_win32.o: $(srcdir)/src/univ/themes/win32.cpp $(COREDLL_ODEP)
 @COND_TOOLKIT_QT_USE_GUI_1@coredll_qt_palette.o: $(srcdir)/src/qt/palette.cpp $(COREDLL_ODEP)
 @COND_TOOLKIT_QT_USE_GUI_1@	$(CXXC) -c -o $@ $(COREDLL_CXXFLAGS) $(srcdir)/src/qt/palette.cpp
 
+@COND_TOOLKIT_QT_USE_GUI_1@coredll_qt_nonownedwnd.o: $(srcdir)/src/qt/nonownedwnd.cpp $(COREDLL_ODEP)
+@COND_TOOLKIT_QT_USE_GUI_1@	$(CXXC) -c -o $@ $(COREDLL_CXXFLAGS) $(srcdir)/src/qt/nonownedwnd.cpp
+
 @COND_TOOLKIT_QT_USE_GUI_1@coredll_qt_pen.o: $(srcdir)/src/qt/pen.cpp $(COREDLL_ODEP)
 @COND_TOOLKIT_QT_USE_GUI_1@	$(CXXC) -c -o $@ $(COREDLL_CXXFLAGS) $(srcdir)/src/qt/pen.cpp
 
@@ -31830,6 +31847,9 @@ corelib_win32.o: $(srcdir)/src/univ/themes/win32.cpp $(CORELIB_ODEP)
 @COND_TOOLKIT_QT_USE_GUI_1@corelib_qt_palette.o: $(srcdir)/src/qt/palette.cpp $(CORELIB_ODEP)
 @COND_TOOLKIT_QT_USE_GUI_1@	$(CXXC) -c -o $@ $(CORELIB_CXXFLAGS) $(srcdir)/src/qt/palette.cpp
 
+@COND_TOOLKIT_QT_USE_GUI_1@corelib_qt_nonownedwnd.o: $(srcdir)/src/qt/nonownedwnd.cpp $(CORELIB_ODEP)
+@COND_TOOLKIT_QT_USE_GUI_1@	$(CXXC) -c -o $@ $(CORELIB_CXXFLAGS) $(srcdir)/src/qt/nonownedwnd.cpp
+
 @COND_TOOLKIT_QT_USE_GUI_1@corelib_qt_pen.o: $(srcdir)/src/qt/pen.cpp $(CORELIB_ODEP)
 @COND_TOOLKIT_QT_USE_GUI_1@	$(CXXC) -c -o $@ $(CORELIB_CXXFLAGS) $(srcdir)/src/qt/pen.cpp
 
diff --git build/bakefiles/files.bkl build/bakefiles/files.bkl
index 609ede4..4006e18 100644
--- build/bakefiles/files.bkl
+++ build/bakefiles/files.bkl
@@ -379,6 +379,7 @@ IMPORTANT: please read docs/tech/tn0016.txt before modifying this file!
     src/qt/msgdlg.cpp
     src/qt/notebook.cpp
     src/qt/palette.cpp
+    src/qt/nonownedwnd.cpp
     src/qt/pen.cpp
     src/qt/popupwin.cpp
     src/qt/printdlg.cpp
diff --git configure configure
index fb8476a..69f38ac 100755
--- configure
+++ configure
@@ -24376,7 +24376,7 @@ $as_echo "yes" >&6; }
                 GUI_TK_LIBRARY="${GUI_TK_LIBRARY} ${QT5_LIBS}"
                 if `pkg-config --variable qt_config Qt5Core | grep "reduce_relocations" >/dev/null`; then
                                         SAMPLES_CXXFLAGS="-fPIC $SAMPLES_CXXFLAGS"
-                    WXCONFIG_CXXFLAGS="-fPIC $WXCONFIG_CXXFLAGS $TOOLKIT_INCLUDE"
+                    WXCONFIG_CXXFLAGS="-fPIC $WXCONFIG_CXXFLAGS"
                 fi
 
 fi
diff --git configure.in configure.in
index 15b9539..a0acc3d 100644
--- configure.in
+++ configure.in
@@ -3305,7 +3305,7 @@ libraries returned by 'pkg-config gtk+-2.0 --libs' or 'gtk-config
                 if `pkg-config --variable qt_config Qt5Core | grep "reduce_relocations" >/dev/null`; then
                     dnl build with position independent code if Qt needs it
                     SAMPLES_CXXFLAGS="-fPIC $SAMPLES_CXXFLAGS"
-                    WXCONFIG_CXXFLAGS="-fPIC $WXCONFIG_CXXFLAGS $TOOLKIT_INCLUDE"
+                    WXCONFIG_CXXFLAGS="-fPIC $WXCONFIG_CXXFLAGS"
                 fi
             ],
             [
diff --git include/wx/colour.h include/wx/colour.h
index 1651f63..9cacecc 100644
--- include/wx/colour.h
+++ include/wx/colour.h
@@ -65,7 +65,7 @@ DECLARE_VARIANT_OBJECT_EXPORTED(wxColour,WXDLLIMPEXP_CORE)
     not need the wxGDIObject machinery to handle colors, please add it to the
     list of ports which do not need it.
  */
-#if defined( __WXMAC__ ) || defined( __WXMSW__ )
+#if defined( __WXMAC__ ) || defined( __WXMSW__ ) || defined( __WXQT__ )
 #define wxCOLOUR_IS_GDIOBJECT 0
 #else
 #define wxCOLOUR_IS_GDIOBJECT 1
diff --git include/wx/nonownedwnd.h include/wx/nonownedwnd.h
index 9beb00d..d8bfca3 100644
--- include/wx/nonownedwnd.h
+++ include/wx/nonownedwnd.h
@@ -102,6 +102,8 @@ protected:
     #include "wx/osx/nonownedwnd.h"
 #elif defined(__WXMSW__)
     #include "wx/msw/nonownedwnd.h"
+#elif defined(__WXQT__)
+    #include "wx/qt/nonownedwnd.h"
 #else
     // No special class needed in other ports, they can derive both wxTLW and
     // wxPopupWindow directly from wxWindow and don't implement SetShape().
diff --git include/wx/qt/accel.h include/wx/qt/accel.h
index be25cd1..a710f7f 100644
--- include/wx/qt/accel.h
+++ include/wx/qt/accel.h
@@ -9,9 +9,6 @@
 #ifndef _WX_QT_ACCEL_H_
 #define _WX_QT_ACCEL_H_
 
-#include <QtCore/QList>
-#include <QtWidgets/QShortcut>
-
 /* wxQt accelerators implementation:
  *
  * Storing:
@@ -36,6 +33,9 @@
  * QShortcut. This handler will finally create and send the appropriate wx
  * event to the window. */
 
+class QShortcut;
+template < class T > class QList;
+
 class WXDLLIMPEXP_CORE wxAcceleratorTable : public wxObject
 {
 public:
@@ -43,7 +43,7 @@ public:
     wxAcceleratorTable(int n, const wxAcceleratorEntry entries[]);
 
     // Implementation
-    QList< QShortcut* > ConvertShortcutTable( QWidget *parent ) const;
+    QList < QShortcut* > *ConvertShortcutTable( QWidget *parent ) const;
 
     bool Ok() const { return IsOk(); }
     bool IsOk() const;
diff --git include/wx/qt/anybutton.h include/wx/qt/anybutton.h
index 975ffae..1d07bc5 100644
--- include/wx/qt/anybutton.h
+++ include/wx/qt/anybutton.h
@@ -9,7 +9,7 @@
 #ifndef _WX_QT_ANYBUTTON_H_
 #define _WX_QT_ANYBUTTON_H_
 
-#include <QtWidgets/QPushButton>
+class QPushButton;
 
 //-----------------------------------------------------------------------------
 // wxAnyButton
@@ -28,7 +28,7 @@ public:
     virtual void SetLabel( const wxString &label );
     virtual void DoSetBitmap(const wxBitmap& bitmap, State which);
 
-    virtual QPushButton *GetHandle() const;
+    virtual QWidget *GetHandle() const;
 
 protected:
 
diff --git include/wx/qt/app.h include/wx/qt/app.h
index 55cee83..80bda3a 100644
--- include/wx/qt/app.h
+++ include/wx/qt/app.h
@@ -9,8 +9,7 @@
 #ifndef _WX_QT_APP_H_
 #define _WX_QT_APP_H_
 
-#include <QtWidgets/QApplication>
-
+class QApplication;
 class WXDLLIMPEXP_CORE wxApp : public wxAppBase
 {
 public:
diff --git include/wx/qt/bitmap.h include/wx/qt/bitmap.h
index b804551..ba4195c 100644
--- include/wx/qt/bitmap.h
+++ include/wx/qt/bitmap.h
@@ -86,13 +86,14 @@ protected:
     wxDECLARE_DYNAMIC_CLASS(wxBitmap);
 };
 
-class WXDLLIMPEXP_CORE wxMask : public wxObject
+class WXDLLIMPEXP_CORE wxMask : public wxMaskBase
 {
 public:
     wxMask();
 
     // Copy constructor
     wxMask(const wxMask &mask);
+    wxMask& operator=(const wxMask &mask);
 
     // Construct a mask from a bitmap and a colour indicating the transparent
     // area
@@ -104,20 +105,21 @@ public:
 
     // Construct a mask from a mono bitmap (copies the bitmap).
     wxMask(const wxBitmap& bitmap);
-
-
     virtual ~wxMask();
 
-    bool Create(const wxBitmap& bitmap, const wxColour& colour);
-    bool Create(const wxBitmap& bitmap, int paletteIndex);
-    bool Create(const wxBitmap& bitmap);
-
-    wxBitmap GetBitmap() const;
-
     // Implementation
     QBitmap *GetHandle() const;
 
 protected:
+    // this function is called from Create() to free the existing mask data
+    void FreeData();
+    // by the public wrappers
+    bool InitFromColour(const wxBitmap& bitmap, const wxColour& colour);
+    bool InitFromMonoBitmap(const wxBitmap& bitmap);
+
+    wxBitmap GetBitmap() const;
+
+protected:
     wxDECLARE_DYNAMIC_CLASS(wxMask);
 
 private:
diff --git include/wx/qt/brush.h include/wx/qt/brush.h
index a3f0fd0..7dfe38e 100644
--- include/wx/qt/brush.h
+++ include/wx/qt/brush.h
@@ -8,8 +8,6 @@
 #ifndef _WX_QT_BRUSH_H_
 #define _WX_QT_BRUSH_H_
 
-#include <QtCore/Qt>
-
 class QBrush;
 
 class WXDLLIMPEXP_CORE wxBrush : public wxBrushBase
diff --git include/wx/qt/calctrl.h include/wx/qt/calctrl.h
index cf40ccc..c8c7595 100644
--- include/wx/qt/calctrl.h
+++ include/wx/qt/calctrl.h
@@ -11,7 +11,7 @@
 #define _WX_QT_CALCTRL_H_
 
 #include "wx/calctrl.h"
-#include <QtWidgets/QCalendarWidget>
+class QCalendarWidget;
 
 class WXDLLIMPEXP_ADV wxCalendarCtrl : public wxCalendarCtrlBase
 {
@@ -70,7 +70,7 @@ public:
 
     using wxCalendarCtrlBase::GenerateAllChangeEvents;
 
-    virtual QCalendarWidget *GetHandle() const;
+    virtual QWidget *GetHandle() const;
 
 protected:
     virtual void RefreshHolidays();
diff --git include/wx/qt/checkbox.h include/wx/qt/checkbox.h
index adf2c2a..6bb328d 100644
--- include/wx/qt/checkbox.h
+++ include/wx/qt/checkbox.h
@@ -8,7 +8,7 @@
 #ifndef _WX_QT_CHECKBOX_H_
 #define _WX_QT_CHECKBOX_H_
 
-#include <QtWidgets/QCheckBox>
+class QCheckBox;
 
 class WXDLLIMPEXP_CORE wxCheckBox : public wxCheckBoxBase
 {
@@ -32,7 +32,7 @@ public:
     virtual void SetValue(bool value);
     virtual bool GetValue() const;
 
-    virtual QCheckBox *GetHandle() const;
+    virtual QWidget *GetHandle() const;
 
 protected:
     virtual void DoSet3StateValue(wxCheckBoxState state);
diff --git include/wx/qt/choice.h include/wx/qt/choice.h
index 8ab1811..06602b9 100644
--- include/wx/qt/choice.h
+++ include/wx/qt/choice.h
@@ -8,7 +8,7 @@
 #ifndef _WX_QT_CHOICE_H_
 #define _WX_QT_CHOICE_H_
 
-#include <QtWidgets/QComboBox>
+class QComboBox;
 
 class WXDLLIMPEXP_CORE wxChoice : public wxChoiceBase
 {
@@ -56,7 +56,7 @@ public:
     virtual void SetSelection(int n);
     virtual int GetSelection() const;
 
-    virtual QComboBox *GetHandle() const;
+    virtual QWidget *GetHandle() const;
 
 protected:
     virtual int DoInsertItems(const wxArrayStringsAdapter & items,
diff --git include/wx/qt/colordlg.h include/wx/qt/colordlg.h
index 3e65349..fec19d7 100644
--- include/wx/qt/colordlg.h
+++ include/wx/qt/colordlg.h
@@ -10,7 +10,7 @@
 
 #include "wx/dialog.h"
 
-#include <QtWidgets/QColorDialog>
+class QColorDialog;
 
 class WXDLLIMPEXP_CORE wxColourDialog : public wxDialog
 {
@@ -23,9 +23,8 @@ public:
 
     wxColourData &GetColourData();
 
-    QColorDialog *GetHandle() const { return static_cast<QColorDialog *>(m_qtWindow); }
-
 private:
+    QColorDialog *GetQColorDialog() const;
 
     wxColourData m_data;
 };
diff --git include/wx/qt/colour.h include/wx/qt/colour.h
index 8629217..52018c5 100644
--- include/wx/qt/colour.h
+++ include/wx/qt/colour.h
@@ -10,37 +10,35 @@
 #ifndef _WX_QT_COLOUR_H_
 #define _WX_QT_COLOUR_H_
 
-#include <QtGui/QColor>
+class QColor;
 
 class WXDLLIMPEXP_CORE wxColour : public wxColourBase
 {
 public:
     DEFINE_STD_WXCOLOUR_CONSTRUCTORS
-    wxColour(const QColor& color) : m_qtColor(color) {}
+    wxColour(const QColor& color);
 
-    virtual bool IsOk() const { return m_qtColor.isValid(); }
+    virtual bool IsOk() const { return m_valid; }
 
-    unsigned char Red() const { return m_qtColor.red();   }
-    unsigned char Green() const { return m_qtColor.green(); }
-    unsigned char Blue()  const { return m_qtColor.blue();  }
-    unsigned char Alpha() const { return m_qtColor.alpha(); }
+    ChannelType Red() const   { return m_red;   }
+    ChannelType Green() const { return m_green; }
+    ChannelType Blue()  const { return m_blue;  }
+    ChannelType Alpha() const { return m_alpha; }
 
-    bool operator==(const wxColour& color) const
-        { return m_qtColor == color.m_qtColor; }
-    bool operator!=(const wxColour& color) const
-        { return m_qtColor != color.m_qtColor; }
+    bool operator==(const wxColour& color) const;
+    bool operator!=(const wxColour& color) const;
 
     int GetPixel() const;
 
-    QColor GetHandle() const { return m_qtColor; };
+    QColor GetQColor() const;
 
 protected:
-    virtual void
-    InitRGBA(ChannelType r, ChannelType g, ChannelType b, ChannelType a)
-        { m_qtColor.setRgb(r, g, b, a); }
+    void Init();
+    virtual void InitRGBA(ChannelType r, ChannelType g, ChannelType b, ChannelType a);
 
 private:
-    QColor m_qtColor;
+    ChannelType m_red, m_green, m_blue, m_alpha;
+    bool m_valid;
 
     wxDECLARE_DYNAMIC_CLASS(wxColour);
 };
diff --git include/wx/qt/combobox.h include/wx/qt/combobox.h
index 3b0169f..1f80df5 100644
--- include/wx/qt/combobox.h
+++ include/wx/qt/combobox.h
@@ -9,7 +9,7 @@
 #define _WX_QT_COMBOBOX_H_
 
 #include "wx/choice.h"
-#include <QtWidgets/QComboBox>
+class QComboBox;
 
 class WXDLLIMPEXP_CORE wxComboBox : public wxChoice, public wxTextEntry
 {
@@ -52,18 +52,18 @@ public:
                 const wxValidator& validator = wxDefaultValidator,
                 const wxString& name = wxComboBoxNameStr);
 
-    virtual void SetSelection(int n) { wxChoice::SetSelection(n); }
-    virtual void SetSelection(long from, long to);
+    virtual void SetSelection(int n) wxOVERRIDE { wxChoice::SetSelection(n); }
+    virtual void SetSelection(long from, long to) wxOVERRIDE;
 
-    virtual int GetSelection() const { return wxChoice::GetSelection(); }
-    virtual void GetSelection(long *from, long *to) const;
+    virtual int GetSelection() const wxOVERRIDE { return wxChoice::GetSelection(); }
+    virtual void GetSelection(long *from, long *to) const wxOVERRIDE;
 
-    virtual wxString GetStringSelection() const
+    virtual wxString GetStringSelection() const wxOVERRIDE
     {
         return wxItemContainer::GetStringSelection();
     }
 
-    virtual void Clear()
+    virtual void Clear() wxOVERRIDE
     {
         wxTextEntry::Clear();
         wxItemContainer::Clear();
@@ -79,7 +79,7 @@ public:
 protected:
 
     // From wxTextEntry:
-    virtual wxString DoGetValue() const;
+    virtual wxString DoGetValue() const wxOVERRIDE;
 
 private:
 
diff --git include/wx/qt/cursor.h include/wx/qt/cursor.h
index 0db3402..b57f770 100644
--- include/wx/qt/cursor.h
+++ include/wx/qt/cursor.h
@@ -10,13 +10,12 @@
 
 #include "wx/image.h"
 
-#include <QtGui/QCursor>
+class QCursor;
 
 class WXDLLIMPEXP_CORE wxCursor : public wxCursorBase
 {
 public:
     wxCursor() { }
-    wxCursor( const wxCursor & );
     wxCursor(wxStockCursor id) { InitFromStock(id); }
 #if WXWIN_COMPATIBILITY_2_8
     wxCursor(int id) { InitFromStock((wxStockCursor)id); }
@@ -28,15 +27,17 @@ public:
              int hotSpotX = 0, int hotSpotY = 0);
 #endif
 
-    QCursor m_qtCursor;
-
+    virtual wxPoint GetHotSpot() const;
+    QCursor &GetHandle() const;
+    
 protected:
     void InitFromStock( wxStockCursor cursorId );
 #if wxUSE_IMAGE
     void InitFromImage( const wxImage & image );
 #endif
 
-protected:
+private:
+    void Init();
     virtual wxGDIRefData *CreateGDIRefData() const;
     virtual wxGDIRefData *CloneGDIRefData(const wxGDIRefData *data) const;
 
diff --git include/wx/qt/dataform.h include/wx/qt/dataform.h
index 612903a..b6f5c30 100644
--- include/wx/qt/dataform.h
+++ include/wx/qt/dataform.h
@@ -8,6 +8,8 @@
 #ifndef _WX_QT_DATAFORM_H_
 #define _WX_QT_DATAFORM_H_
 
+class QString;
+
 class WXDLLIMPEXP_CORE wxDataFormat
 {
 public:
@@ -33,7 +35,7 @@ public:
     wxDataFormatId GetType() const;
     void SetType( wxDataFormatId type );
 
-    QString m_MimeType;
+    wxString m_MimeType;
 };
 
 #endif // _WX_QT_DATAFORM_H_
diff --git include/wx/qt/dataobj.h include/wx/qt/dataobj.h
index 8ccc190..002de9c 100644
--- include/wx/qt/dataobj.h
+++ include/wx/qt/dataobj.h
@@ -8,12 +8,13 @@
 #ifndef _WX_QT_DATAOBJ_H_
 #define _WX_QT_DATAOBJ_H_
 
-#include <QMimeData>
+class QMimeData;
 
 class WXDLLIMPEXP_CORE wxDataObject : public wxDataObjectBase
 {
 public:
-    wxDataObject() {}
+    wxDataObject();
+    ~wxDataObject();
     
     virtual bool IsSupportedFormat(const wxDataFormat& format, Direction dir) const;
     virtual wxDataFormat GetPreferredFormat(Direction dir = Get) const;
@@ -24,7 +25,7 @@ public:
     virtual bool SetData(const wxDataFormat& format, size_t len, const void * buf);
 
 private:
-    QMimeData m_qtMimeData; // to handle formats that have no helper classes
+    QMimeData *m_qtMimeData; // to handle formats that have no helper classes
 };
 
 #endif // _WX_QT_DATAOBJ_H_
diff --git include/wx/qt/dc.h include/wx/qt/dc.h
index adb0fac..94623e4 100644
--- include/wx/qt/dc.h
+++ include/wx/qt/dc.h
@@ -8,8 +8,7 @@
 #ifndef _WX_QT_DC_H_
 #define _WX_QT_DC_H_
 
-#include <QtGui/QPainter>
-
+class QPainter;
 class QImage;
 
 class WXDLLIMPEXP_FWD_CORE wxRegion;
@@ -112,6 +111,8 @@ public:
     virtual void* GetHandle() const { return (void*) m_qtPainter; }
 
 protected:
+    virtual QImage *GetQImage() { return m_qtImage; }
+    
     QPainter *m_qtPainter;
     QImage *m_qtImage;
 
@@ -125,8 +126,8 @@ private:
         wxQtINVERT
     };
     wxQtRasterColourOp m_rasterColourOp;
-    QColor m_qtPenColor;
-    QColor m_qtBrushColor;
+    QColor *m_qtPenColor;
+    QColor *m_qtBrushColor;
     void ApplyRasterColourOp();
     
 };
diff --git include/wx/qt/dcclient.h include/wx/qt/dcclient.h
index 12f9220..23d6d8c 100644
--- include/wx/qt/dcclient.h
+++ include/wx/qt/dcclient.h
@@ -20,9 +20,6 @@ public:
 
 protected:
     wxWindow *m_window;
-
-private:
-
 };
 
 
diff --git include/wx/qt/dcmemory.h include/wx/qt/dcmemory.h
index e9306f4..8ed5773 100644
--- include/wx/qt/dcmemory.h
+++ include/wx/qt/dcmemory.h
@@ -18,13 +18,12 @@ public:
     wxMemoryDCImpl( wxMemoryDC *owner, wxDC *dc );
     ~wxMemoryDCImpl();
 
+    virtual wxBitmap DoGetAsBitmap(const wxRect *subrect) const;
     virtual void DoSelect(const wxBitmap& bitmap);
 
     virtual const wxBitmap& GetSelectedBitmap() const;
     virtual wxBitmap& GetSelectedBitmap();
 
-protected:
-
 private:
     wxBitmap m_selected;
 };
diff --git include/wx/qt/dcscreen.h include/wx/qt/dcscreen.h
index baa996f..c6c19b4 100644
--- include/wx/qt/dcscreen.h
+++ include/wx/qt/dcscreen.h
@@ -17,9 +17,11 @@ public:
 
     ~wxScreenDCImpl();
 
+protected:
     virtual void DoGetSize(int *width, int *height) const wxOVERRIDE;
+    virtual bool DoGetPixel(wxCoord x, wxCoord y, wxColour *col) const;
 
-private:
+    virtual QImage *GetQImage();
 
     wxDECLARE_ABSTRACT_CLASS(wxScreenDCImpl);
 };
diff --git include/wx/qt/dialog.h include/wx/qt/dialog.h
index 3a85730..5ae3b04 100644
--- include/wx/qt/dialog.h
+++ include/wx/qt/dialog.h
@@ -9,7 +9,7 @@
 #define _WX_QT_DIALOG_H_
 
 #include "wx/dialog.h"
-#include <QtWidgets/QDialog>
+class QDialog;
 
 class WXDLLIMPEXP_CORE wxDialog : public wxDialogBase
 {
@@ -35,7 +35,7 @@ public:
     virtual void EndModal(int retCode);
     virtual bool IsModal() const;
 
-    virtual QDialog *GetHandle() const;
+    QDialog *GetDialogHandle() const;
 
 private:
 
diff --git include/wx/qt/dirdlg.h include/wx/qt/dirdlg.h
index f7bc38a..17d8dfc 100644
--- include/wx/qt/dirdlg.h
+++ include/wx/qt/dirdlg.h
@@ -8,7 +8,7 @@
 #ifndef _WX_QT_DIRDLG_H_
 #define _WX_QT_DIRDLG_H_
 
-#include <QtWidgets/QFileDialog>
+class QFileDialog;
 
 class WXDLLIMPEXP_CORE wxDirDialog : public wxDirDialogBase
 {
@@ -36,10 +36,10 @@ public:     // overrides from wxGenericDirDialog
     wxString GetPath() const wxOVERRIDE;
     void SetPath(const wxString& path) wxOVERRIDE;
 
-    virtual QFileDialog *GetHandle() const;
-
 private:
 
+    virtual QFileDialog *GetQFileDialog() const;
+
     wxDECLARE_DYNAMIC_CLASS(wxDirDialog);
 };
 
diff --git include/wx/qt/evtloop.h include/wx/qt/evtloop.h
index d46609f..6034a80 100644
--- include/wx/qt/evtloop.h
+++ include/wx/qt/evtloop.h
@@ -8,7 +8,7 @@
 #ifndef _WX_QT_EVTLOOP_H_
 #define _WX_QT_EVTLOOP_H_
 
-#include <QtCore/QTimer>
+class QTimer;
 
 class WXDLLIMPEXP_BASE wxQtEventLoopBase : public wxEventLoopBase
 {
@@ -58,21 +58,4 @@ public:
 
 #endif // wxUSE_GUI
 
-
-class wxQtEventLoopBase;
-
-class wxQtIdleTimer : public QTimer
-{
-
-public:
-    wxQtIdleTimer( wxQtEventLoopBase *eventLoop );
-    virtual bool eventFilter( QObject * watched, QEvent * event  );
-
-private:
-    void idle();
-
-private:
-    wxQtEventLoopBase *m_eventLoop;
-};
-
 #endif // _WX_QT_EVTLOOP_H_
diff --git include/wx/qt/filedlg.h include/wx/qt/filedlg.h
index 47ce43f..4c907ae 100644
--- include/wx/qt/filedlg.h
+++ include/wx/qt/filedlg.h
@@ -8,7 +8,7 @@
 #ifndef _WX_QT_FILEDLG_H_
 #define _WX_QT_FILEDLG_H_
 
-#include <QtWidgets/QFileDialog>
+class QFileDialog;
 
 class WXDLLIMPEXP_CORE wxFileDialog : public wxFileDialogBase
 {
@@ -48,7 +48,7 @@ public:
 
     virtual bool SupportsExtraControl() const wxOVERRIDE { return true; }
 
-    virtual QFileDialog *GetHandle() const;
+    virtual QFileDialog *GetQFileDialog() const;
 
 private:
 
diff --git include/wx/qt/fontdlg.h include/wx/qt/fontdlg.h
index b1d6346..df739d3 100644
--- include/wx/qt/fontdlg.h
+++ include/wx/qt/fontdlg.h
@@ -8,7 +8,7 @@
 #ifndef _WX_QT_FONTDLG_H_
 #define _WX_QT_FONTDLG_H_
 
-#include <QtWidgets/QFontDialog>
+class QFontDialog;
 
 class WXDLLIMPEXP_CORE wxFontDialog : public wxFontDialogBase
 {
@@ -17,8 +17,6 @@ public:
     wxFontDialog(wxWindow *parent) { Create(parent); }
     wxFontDialog(wxWindow *parent, const wxFontData& data) { Create(parent, data); }
     
-    virtual QFontDialog *GetHandle() const { return static_cast<QFontDialog *>(m_qtWindow); }
-
 protected:
     bool DoCreate(wxWindow *parent);
     
diff --git include/wx/qt/frame.h include/wx/qt/frame.h
index aaf0541..35a7f39 100644
--- include/wx/qt/frame.h
+++ include/wx/qt/frame.h
@@ -12,8 +12,9 @@
 #define _WX_QT_FRAME_H_
 
 #include "wx/frame.h"
-#include <QtWidgets/QMainWindow>
-#include <QtWidgets/QScrollArea>
+
+class QMainWindow;
+class QScrollArea;
 
 class WXDLLIMPEXP_CORE wxFrame : public wxFrameBase
 {
@@ -45,12 +46,8 @@ public:
     virtual void AddChild( wxWindowBase *child );
     virtual void RemoveChild( wxWindowBase *child );
 
-    virtual QMainWindow *GetHandle() const
-    {
-        return static_cast<QMainWindow*>(m_qtWindow);
-    }
-
-    virtual QAbstractScrollArea *QtGetScrollBarsContainer() const;
+    QMainWindow *GetQMainWindow() const;
+    virtual QScrollArea *QtGetScrollBarsContainer() const;
 
 protected:
     virtual void DoGetClientSize(int *width, int *height) const;
diff --git include/wx/qt/gauge.h include/wx/qt/gauge.h
index 4a21c47..fc59deb 100644
--- include/wx/qt/gauge.h
+++ include/wx/qt/gauge.h
@@ -8,7 +8,7 @@
 #ifndef _WX_QT_GAUGE_H_
 #define _WX_QT_GAUGE_H_
 
-#include <QtWidgets/QProgressBar>
+class QProgressBar;
 
 class WXDLLIMPEXP_CORE wxGauge : public wxGaugeBase
 {
@@ -33,7 +33,7 @@ public:
                 const wxValidator& validator = wxDefaultValidator,
                 const wxString& name = wxGaugeNameStr);
 
-    virtual QProgressBar *GetHandle() const;
+    virtual QWidget *GetHandle() const;
 
     // set/get the control range
     virtual void SetRange(int range);
diff --git include/wx/qt/glcanvas.h include/wx/qt/glcanvas.h
index 73c5b54..2c41e68 100644
--- include/wx/qt/glcanvas.h
+++ include/wx/qt/glcanvas.h
@@ -8,7 +8,11 @@
 #ifndef _WX_GLCANVAS_H_
 #define _WX_GLCANVAS_H_
 
-#include <QtOpenGL/QGLWidget>
+#include <GL/gl.h>
+
+class QGLWidget;
+class QGLContext;
+class QGLFormat;
 
 class WXDLLIMPEXP_GL wxGLContext : public wxGLContextBase
 {
@@ -54,8 +58,6 @@ public:
 
     static bool ConvertWXAttrsToQtGL(const int *wxattrs, QGLFormat &format);
 
-    virtual QGLWidget *GetHandle() const { return static_cast<QGLWidget *>(m_qtWindow); }
-
 private:
 
 //    wxDECLARE_EVENT_TABLE();
diff --git include/wx/qt/listbox.h include/wx/qt/listbox.h
index 59e5822..dc0c761 100644
--- include/wx/qt/listbox.h
+++ include/wx/qt/listbox.h
@@ -8,7 +8,9 @@
 #ifndef _WX_QT_LISTBOX_H_
 #define _WX_QT_LISTBOX_H_
 
-#include <QtWidgets/QListWidget>
+class QListWidget;
+class QModelIndex;
+class QScrollArea;
 
 class WXDLLIMPEXP_CORE wxListBox : public wxListBoxBase
 {
@@ -54,10 +56,9 @@ public:
     virtual wxString GetString(unsigned int n) const;
     virtual void SetString(unsigned int n, const wxString& s);
     
-    virtual void SetSelection(int n);
     virtual int GetSelection() const;
 
-    virtual QListWidget *GetHandle() const;
+    virtual QWidget *GetHandle() const;
 
     void QtSendEvent(wxEventType evtType, const QModelIndex &index, bool selected);
 
diff --git include/wx/qt/listctrl.h include/wx/qt/listctrl.h
index 3b08104..17637de 100644
--- include/wx/qt/listctrl.h
+++ include/wx/qt/listctrl.h
@@ -9,7 +9,9 @@
 #define _WX_QT_LISTCTRL_H_
 
 #include "wx/textctrl.h"
-#include <QtWidgets/QTreeWidget>
+
+class QTreeWidget;
+class QTreeWidgetItem;
 
 class WXDLLIMPEXP_FWD_CORE wxImageList;
 
@@ -284,7 +286,7 @@ public:
         return OnGetItemAttr(item);
     }
 
-    virtual QTreeWidget *GetHandle() const;
+    virtual QWidget *GetHandle() const;
 
 protected:
     void Init();
diff --git include/wx/qt/menu.h include/wx/qt/menu.h
index b45f3ca..b8d5abc 100644
--- include/wx/qt/menu.h
+++ include/wx/qt/menu.h
@@ -8,8 +8,8 @@
 #ifndef _WX_QT_MENU_H_
 #define _WX_QT_MENU_H_
 
-#include <QtWidgets/QMenu>
-#include <QtWidgets/QMenuBar>
+class QMenu;
+class QMenuBar;
 
 class WXDLLIMPEXP_CORE wxMenu : public wxMenuBase
 {
@@ -48,7 +48,8 @@ public:
     virtual void SetMenuLabel(size_t pos, const wxString& label);
     virtual wxString GetMenuLabel(size_t pos) const;
 
-    virtual QMenuBar *GetHandle() const;
+    QMenuBar *GetQMenuBar() const { return m_qtMenuBar; }
+    virtual QWidget *GetHandle() const;
 
     virtual void Attach(wxFrame *frame);
     virtual void Detach();
diff --git include/wx/qt/menuitem.h include/wx/qt/menuitem.h
index 0a07c55..158007f 100644
--- include/wx/qt/menuitem.h
+++ include/wx/qt/menuitem.h
@@ -9,7 +9,7 @@
 #define _WX_QT_MENUITEM_H_
 
 #include "wx/menuitem.h"
-#include <QtWidgets/QAction>
+class QAction;
 
 class WXDLLIMPEXP_FWD_CORE wxBitmap;
 class WXDLLIMPEXP_FWD_CORE wxMenu;
diff --git include/wx/qt/msgdlg.h include/wx/qt/msgdlg.h
index 447dd60..6f1acdc 100644
--- include/wx/qt/msgdlg.h
+++ include/wx/qt/msgdlg.h
@@ -10,7 +10,7 @@
 
 #include "wx/msgdlg.h"
 
-#include <QtWidgets/QMessageBox>
+class QMessageBox;
 
 class WXDLLIMPEXP_CORE wxMessageDialog : public wxMessageDialogBase
 {
@@ -23,9 +23,6 @@ public:
 
     // Reimplemented to translate return codes from Qt to wx
     virtual int ShowModal();
-    
-    virtual QMessageBox *GetHandle() const;
-
 };
 
 #endif // _WX_QT_MSGDLG_H_
diff --git include/wx/qt/nonownedwnd.h include/wx/qt/nonownedwnd.h
new file mode 100644
index 0000000..87df501
--- /dev/null
+++ include/wx/qt/nonownedwnd.h
@@ -0,0 +1,30 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/qt/nonownedwnd.h
+// Author:      Sean D'Epagnier
+// Copyright:   (c) 2016 wxWidgets dev team
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_QT_NONOWNEDWND_H_
+#define _WX_QT_NONOWNEDWND_H_
+
+// ----------------------------------------------------------------------------
+// wxNonOwnedWindow contains code common to wx{Popup,TopLevel}Window in wxQT.
+// ----------------------------------------------------------------------------
+
+class WXDLLIMPEXP_CORE wxNonOwnedWindow : public wxNonOwnedWindowBase
+{
+public:
+    wxNonOwnedWindow();
+
+protected:
+    virtual bool DoClearShape() wxOVERRIDE;
+    virtual bool DoSetRegionShape(const wxRegion& region) wxOVERRIDE;
+#if wxUSE_GRAPHICS_CONTEXT
+    virtual bool DoSetPathShape(const wxGraphicsPath& path) wxOVERRIDE;
+#endif // wxUSE_GRAPHICS_CONTEXT
+
+    wxDECLARE_NO_COPY_CLASS(wxNonOwnedWindow);
+};
+
+#endif // _WX_QT_NONOWNEDWND_H_
diff --git include/wx/qt/notebook.h include/wx/qt/notebook.h
index c62fb4e..288d0d9 100644
--- include/wx/qt/notebook.h
+++ include/wx/qt/notebook.h
@@ -8,7 +8,7 @@
 #ifndef _WX_QT_NOTEBOOK_H_
 #define _WX_QT_NOTEBOOK_H_
 
-#include <QtWidgets/QTabWidget>
+class QTabWidget;
 
 class WXDLLIMPEXP_CORE wxNotebook : public wxNotebookBase
 {
@@ -45,7 +45,7 @@ public:
     int SetSelection(size_t nPage) { return DoSetSelection(nPage, SetSelection_SendEvent); }
     int ChangeSelection(size_t nPage) { return DoSetSelection(nPage); }
 
-    virtual QTabWidget *GetHandle() const;
+    virtual QWidget *GetHandle() const;
 
 protected:
     virtual wxWindow *DoRemovePage(size_t page);
diff --git include/wx/qt/pen.h include/wx/qt/pen.h
index bbaad08..42c57a5 100644
--- include/wx/qt/pen.h
+++ include/wx/qt/pen.h
@@ -8,8 +8,6 @@
 #ifndef _WX_QT_PEN_H_
 #define _WX_QT_PEN_H_
 
-#include <QtCore/Qt>
-
 class QPen;
 
 class WXDLLIMPEXP_CORE wxPen : public wxPenBase
diff --git include/wx/qt/timer.h include/wx/qt/private/timer.h
similarity index 98%
rename from include/wx/qt/timer.h
rename to include/wx/qt/private/timer.h
index cfb875f..21ce2f7 100644
--- include/wx/qt/timer.h
+++ include/wx/qt/private/timer.h
@@ -10,14 +10,14 @@
 
 #if wxUSE_TIMER
 
-#include "wx/private/timer.h"
-
 #include <QtCore/QObject>
+#include "wx/private/timer.h"
 
 //-----------------------------------------------------------------------------
 // wxTimer
 //-----------------------------------------------------------------------------
 
+class QTimerEvent;
 class WXDLLIMPEXP_CORE wxQtTimerImpl : public wxTimerImpl, QObject
 {
 public:
diff --git include/wx/qt/private/winevent.h include/wx/qt/private/winevent.h
index cbda1cc..40ea85e 100644
--- include/wx/qt/private/winevent.h
+++ include/wx/qt/private/winevent.h
@@ -11,13 +11,15 @@
 #ifndef _WX_QT_EVENTSIGNALFORWARDER_H_
 #define _WX_QT_EVENTSIGNALFORWARDER_H_
 
+#include <QtCore/QEvent>
+#include <QtGui/QCloseEvent>
+
 #include "wx/log.h"
 #include "wx/window.h"
 #include "wx/qt/private/converter.h"
 #include "wx/qt/private/utils.h"
 
-#include <QtCore/QEvent>
-#include <QtGui/QPaintEvent>
+class QPaintEvent;
 
 template< typename Handler >
 class wxQtSignalHandler
diff --git include/wx/qt/radiobox.h include/wx/qt/radiobox.h
index 62ea5a5..f858a57 100644
--- include/wx/qt/radiobox.h
+++ include/wx/qt/radiobox.h
@@ -8,9 +8,9 @@
 #ifndef _WX_QT_RADIOBOX_H_
 #define _WX_QT_RADIOBOX_H_
 
-#include <QtWidgets/QGroupBox>
-#include <QtWidgets/QButtonGroup>
-#include <QtWidgets/QVBoxLayout>
+class QGroupBox;
+class QButtonGroup;
+class QBoxLayout;
 
 class WXDLLIMPEXP_CORE wxRadioBox : public wxControl, public wxRadioBoxBase
 {
@@ -77,7 +77,7 @@ public:
     virtual void SetSelection(int n);
     virtual int GetSelection() const;
 
-    virtual QGroupBox *GetHandle() const;
+    virtual QWidget *GetHandle() const;
 
 private:
     // The 'visual' group box:
diff --git include/wx/qt/radiobut.h include/wx/qt/radiobut.h
index 164a0c3..6679be6 100644
--- include/wx/qt/radiobut.h
+++ include/wx/qt/radiobut.h
@@ -8,7 +8,7 @@
 #ifndef _WX_QT_RADIOBUT_H_
 #define _WX_QT_RADIOBUT_H_
 
-#include <QtWidgets/QRadioButton>
+class QRadioButton;
 
 class WXDLLIMPEXP_CORE wxRadioButton : public wxControl
 {
@@ -35,7 +35,7 @@ public:
     virtual void SetValue(bool value);
     virtual bool GetValue() const;
 
-    virtual QRadioButton *GetHandle() const;
+    virtual QWidget *GetHandle() const;
 
 protected:
 
diff --git include/wx/qt/region.h include/wx/qt/region.h
index c5ffb69..17840ea 100644
--- include/wx/qt/region.h
+++ include/wx/qt/region.h
@@ -9,7 +9,9 @@
 #ifndef _WX_QT_REGION_H_
 #define _WX_QT_REGION_H_
 
-#include <QtGui/QRegion>
+class QRegion;
+class QRect;
+template<class T> class QVector;
 
 class WXDLLIMPEXP_CORE wxRegion : public wxRegionBase
 {
@@ -25,7 +27,7 @@ public:
     virtual bool IsEmpty() const;
     virtual void Clear();
 
-    virtual QRegion GetHandle() const;
+    virtual const QRegion &GetHandle() const;
     virtual void QtSetRegion(QRegion region); // Hangs on to this region
 
 protected:
@@ -45,8 +47,6 @@ protected:
     virtual bool DoIntersect(const wxRegion& region);
     virtual bool DoSubtract(const wxRegion& region);
     virtual bool DoXor(const wxRegion& region);
-    
-private:
 };
 
 
@@ -79,7 +79,7 @@ public:
     wxRect GetRect() const;
     
 private:
-    QVector< QRect > *m_qtRects;
+    QVector < QRect > *m_qtRects;
     int m_pos;
 };
 
diff --git include/wx/qt/scrolbar.h include/wx/qt/scrolbar.h
index 2efa3dd..e1ea3eb 100644
--- include/wx/qt/scrolbar.h
+++ include/wx/qt/scrolbar.h
@@ -10,7 +10,7 @@
 
 #include "wx/scrolbar.h"
 
-#include <QtWidgets/QScrollBar>
+class QScrollBar;
 
 class WXDLLIMPEXP_FWD_CORE wxQtScrollBar;
 
@@ -42,7 +42,8 @@ public:
                               int range, int pageSize,
                               bool refresh = true);
 
-    virtual QScrollBar* GetHandle() const;
+    QScrollBar *GetQScrollBar() const { return m_qtScrollBar; }
+    QWidget *GetHandle() const;
 
 private:
     QScrollBar *m_qtScrollBar;
diff --git include/wx/qt/slider.h include/wx/qt/slider.h
index 1c103d0..0a183f8 100644
--- include/wx/qt/slider.h
+++ include/wx/qt/slider.h
@@ -8,7 +8,7 @@
 #ifndef _WX_QT_SLIDER_H_
 #define _WX_QT_SLIDER_H_
 
-#include <QtWidgets/QSlider>
+class QSlider;
 
 class WXDLLIMPEXP_CORE wxSlider : public wxSliderBase
 {
@@ -50,7 +50,7 @@ public:
     virtual void SetThumbLength(int lenPixels);
     virtual int GetThumbLength() const;
 
-    virtual QSlider *GetHandle() const;
+    virtual QWidget *GetHandle() const;
 
 private:
     QSlider *m_qtSlider;
diff --git include/wx/qt/spinbutt.h include/wx/qt/spinbutt.h
index 96a3294..6df8957 100644
--- include/wx/qt/spinbutt.h
+++ include/wx/qt/spinbutt.h
@@ -9,7 +9,7 @@
 #define _WX_QT_SPINBUTT_H_
 
 #include "wx/spinbutt.h"
-#include <QtWidgets/QSpinBox>
+class QSpinBox;
 
 class WXDLLIMPEXP_CORE wxSpinButton : public wxSpinButtonBase
 {
@@ -32,7 +32,7 @@ public:
     virtual int GetValue() const;
     virtual void SetValue(int val);
 
-    virtual QSpinBox *GetHandle() const;
+    virtual QWidget *GetHandle() const;
 
 private:
     QSpinBox *m_qtSpinBox;
diff --git include/wx/qt/spinctrl.h include/wx/qt/spinctrl.h
index 6d016eb..e938736b 100644
--- include/wx/qt/spinctrl.h
+++ include/wx/qt/spinctrl.h
@@ -8,8 +8,8 @@
 #ifndef _WX_QT_SPINCTRL_H_
 #define _WX_QT_SPINCTRL_H_
 
-#include <QtWidgets/QSpinBox>
-#include <QtWidgets/QDoubleSpinBox>
+class QSpinBox;
+class QDoubleSpinBox;
 
 // Take advantage of the Qt compile time polymorphy and use a template to avoid
 // copy&paste code for the usage of QSpinBox/QDoubleSpinBox.
@@ -45,7 +45,7 @@ public:
     T GetMax() const;
     T GetIncrement() const;
 
-    virtual Widget *GetHandle() const;
+    virtual QWidget *GetHandle() const;
 
 protected:
     Widget *m_qtSpinBox;
diff --git include/wx/qt/statbmp.h include/wx/qt/statbmp.h
index a4b8768..a61fb5e 100644
--- include/wx/qt/statbmp.h
+++ include/wx/qt/statbmp.h
@@ -8,7 +8,7 @@
 #ifndef _WX_QT_STATBMP_H_
 #define _WX_QT_STATBMP_H_
 
-#include <QtWidgets/QLabel>
+class QLabel;
 
 class WXDLLIMPEXP_CORE wxStaticBitmap : public wxStaticBitmapBase
 {
@@ -35,7 +35,7 @@ public:
     virtual wxBitmap GetBitmap() const;
     virtual wxIcon GetIcon() const;
 
-    virtual QLabel *GetHandle() const;
+    virtual QWidget *GetHandle() const;
 protected:
 
 private:
diff --git include/wx/qt/statbox.h include/wx/qt/statbox.h
index 4259f74..186146b 100644
--- include/wx/qt/statbox.h
+++ include/wx/qt/statbox.h
@@ -8,7 +8,7 @@
 #ifndef _WX_QT_STATBOX_H_
 #define _WX_QT_STATBOX_H_
 
-#include <QtWidgets/QGroupBox>
+class QGroupBox;
 
 class WXDLLIMPEXP_CORE wxStaticBox : public wxStaticBoxBase
 {
@@ -31,7 +31,7 @@ public:
 
     virtual void GetBordersForSizer(int *borderTop, int *borderOther) const;
 
-    virtual QGroupBox *GetHandle() const;
+    virtual QWidget *GetHandle() const;
 
 protected:
 
diff --git include/wx/qt/statline.h include/wx/qt/statline.h
index d65706b..aca385e 100644
--- include/wx/qt/statline.h
+++ include/wx/qt/statline.h
@@ -8,7 +8,7 @@
 #ifndef _WX_QT_STATLINE_H_
 #define _WX_QT_STATLINE_H_
 
-#include <QtWidgets/QFrame>
+class QFrame;
 
 class WXDLLIMPEXP_CORE wxStaticLine : public wxStaticLineBase
 {
@@ -29,7 +29,7 @@ public:
                  long style = wxLI_HORIZONTAL,
                  const wxString &name = wxStaticLineNameStr );
 
-    virtual QFrame *GetHandle() const;
+    virtual QWidget *GetHandle() const;
 
 private:
     QFrame *m_qtFrame;
diff --git include/wx/qt/stattext.h include/wx/qt/stattext.h
index 0aae47e..36f8628 100644
--- include/wx/qt/stattext.h
+++ include/wx/qt/stattext.h
@@ -8,7 +8,7 @@
 #ifndef _WX_QT_STATTEXT_H_
 #define _WX_QT_STATTEXT_H_
 
-#include <QtWidgets/QLabel>
+class QLabel;
 
 class WXDLLIMPEXP_CORE wxStaticText : public wxStaticTextBase
 {
@@ -32,7 +32,8 @@ public:
 
     void SetLabel(const wxString& label);
 
-    QLabel *GetHandle() const;
+    virtual QWidget *GetHandle() const;
+
 private:
     QLabel *m_qtLabel;
 
diff --git include/wx/qt/statusbar.h include/wx/qt/statusbar.h
index 233e506..0609d4b 100644
--- include/wx/qt/statusbar.h
+++ include/wx/qt/statusbar.h
@@ -10,13 +10,15 @@
 
 #include "wx/statusbr.h"
 
-#include <QtWidgets/QLabel>
-#include <QtWidgets/QStatusBar>
+class QLabel;
+class QStatusBar;
+
+template < class T > class QList;
 
 class WXDLLIMPEXP_CORE wxStatusBar : public wxStatusBarBase
 {
 public:
-    wxStatusBar() {}
+    wxStatusBar();
     wxStatusBar(wxWindow *parent, wxWindowID winid = wxID_ANY,
                 long style = wxSTB_DEFAULT_STYLE,
                 const wxString& name = wxStatusBarNameStr);
@@ -32,8 +34,9 @@ public:
     virtual void Refresh( bool eraseBackground = true,
                           const wxRect *rect = (const wxRect *) NULL );
 
-    virtual QStatusBar *GetHandle() const;
-
+    QStatusBar *GetQStatusBar() const { return m_qtStatusBar; }
+    QWidget *GetHandle() const;
+    
 protected:
     virtual void DoUpdateStatusText(int number);
 
@@ -42,7 +45,7 @@ private:
     void UpdateFields();
 
     QStatusBar *m_qtStatusBar;
-    QList< QLabel* > m_qtPanes;
+    QList< QLabel* > *m_qtPanes;
 
     wxDECLARE_DYNAMIC_CLASS(wxStatusBar);
 };
diff --git include/wx/qt/taskbar.h include/wx/qt/taskbar.h
index 6a29f93..5de2f08 100644
--- include/wx/qt/taskbar.h
+++ include/wx/qt/taskbar.h
@@ -8,12 +8,13 @@
 #ifndef _WX_QT_TASKBAR_H_
 #define _WX_QT_TASKBAR_H_
 
-#include <QtWidgets/QSystemTrayIcon>
+class QSystemTrayIcon;
 
 class WXDLLIMPEXP_CORE wxTaskBarIcon : public wxTaskBarIconBase
 {
 public:
     wxTaskBarIcon(wxTaskBarIconType iconType = wxTBI_DEFAULT_TYPE);
+    virtual ~wxTaskBarIcon();
 
     // Accessors
     bool IsOk() const { return false; }
@@ -26,7 +27,7 @@ public:
     virtual bool PopupMenu(wxMenu *menu);
 
 private:
-    QSystemTrayIcon m_qtSystemTrayIcon;
+    QSystemTrayIcon *m_qtSystemTrayIcon;
 
     wxDECLARE_DYNAMIC_CLASS_NO_COPY(wxTaskBarIcon);
 };
diff --git include/wx/qt/textctrl.h include/wx/qt/textctrl.h
index 864165c..fda2105 100644
--- include/wx/qt/textctrl.h
+++ include/wx/qt/textctrl.h
@@ -8,8 +8,9 @@
 #ifndef _WX_QT_TEXTCTRL_H_
 #define _WX_QT_TEXTCTRL_H_
 
-#include <QtWidgets/QLineEdit>
-#include <QtWidgets/QTextEdit>
+class QLineEdit;
+class QTextEdit;
+class QScrollArea;
 
 class WXDLLIMPEXP_CORE wxTextCtrl : public wxTextCtrlBase
 {
diff --git include/wx/qt/tglbtn.h include/wx/qt/tglbtn.h
index 1aee755..3eaa69e 100644
--- include/wx/qt/tglbtn.h
+++ include/wx/qt/tglbtn.h
@@ -36,7 +36,7 @@ public:
     virtual void SetValue(bool state);
     virtual bool GetValue() const;
 
-    virtual QPushButton *GetHandle() const;
+    virtual QWidget *GetHandle() const;
 
 private:
     wxDECLARE_DYNAMIC_CLASS(wxBitmapToggleButton);
@@ -69,7 +69,7 @@ public:
     virtual void SetValue(bool state);
     virtual bool GetValue() const;
 
-    virtual QPushButton *GetHandle() const;
+    virtual QWidget *GetHandle() const;
 
 private:
 
diff --git include/wx/qt/toolbar.h include/wx/qt/toolbar.h
index 0c9e450..10639b6 100644
--- include/wx/qt/toolbar.h
+++ include/wx/qt/toolbar.h
@@ -5,7 +5,7 @@
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
 
-#include <QtWidgets/QToolBar>
+class QToolBar;
 
 #ifndef _WX_QT_TOOLBAR_H_
 #define _WX_QT_TOOLBAR_H_
@@ -40,10 +40,10 @@ public:
                 long style = wxTB_DEFAULT_STYLE | wxNO_BORDER,
                 const wxString& name = wxToolBarNameStr);
 
-    virtual wxToolBarToolBase *FindToolForPosition(wxCoord x, wxCoord y) const;
-    virtual QToolBar *GetHandle() const;
+    virtual wxToolBarToolBase *FindToolForPosition(wxCoord x, wxCoord y) const wxOVERRIDE;
+    virtual QToolBar *GetQToolBar() const { return m_qtToolBar; }
 
-    virtual void SetWindowStyleFlag( long style );
+    virtual void SetWindowStyleFlag( long style ) wxOVERRIDE;
     virtual bool Realize() wxOVERRIDE;
 
     virtual wxToolBarToolBase *CreateTool(int toolid,
@@ -53,22 +53,23 @@ public:
                                           wxItemKind kind,
                                           wxObject *clientData,
                                           const wxString& shortHelp,
-                                          const wxString& longHelp);
+                                          const wxString& longHelp) wxOVERRIDE;
 
     virtual wxToolBarToolBase *CreateTool(wxControl *control,
-                                          const wxString& label);
+                                          const wxString& label) wxOVERRIDE;
+    QWidget *GetHandle() const wxOVERRIDE;
 
 protected:
 
     QActionGroup* GetActionGroup(size_t pos);
-    virtual bool DoInsertTool(size_t pos, wxToolBarToolBase *tool);
-    virtual bool DoDeleteTool(size_t pos, wxToolBarToolBase *tool);
-    virtual void DoEnableTool(wxToolBarToolBase *tool, bool enable);
-    virtual void DoToggleTool(wxToolBarToolBase *tool, bool toggle);
-    virtual void DoSetToggle(wxToolBarToolBase *tool, bool toggle);
+    virtual bool DoInsertTool(size_t pos, wxToolBarToolBase *tool) wxOVERRIDE;
+    virtual bool DoDeleteTool(size_t pos, wxToolBarToolBase *tool) wxOVERRIDE;
+    virtual void DoEnableTool(wxToolBarToolBase *tool, bool enable) wxOVERRIDE;
+    virtual void DoToggleTool(wxToolBarToolBase *tool, bool toggle) wxOVERRIDE;
+    virtual void DoSetToggle(wxToolBarToolBase *tool, bool toggle) wxOVERRIDE;
 
 private:
-    Qt::ToolButtonStyle GetButtonStyle();
+    long GetButtonStyle();
 
     QToolBar *m_qtToolBar;
 
diff --git include/wx/qt/tooltip.h include/wx/qt/tooltip.h
index 3d6a4a4..1f52f5b 100644
--- include/wx/qt/tooltip.h
+++ include/wx/qt/tooltip.h
@@ -10,6 +10,7 @@
 
 #include "wx/object.h"
 
+class wxWindow;
 class WXDLLIMPEXP_CORE wxToolTip : public wxObject
 {
 public:
diff --git include/wx/qt/treectrl.h include/wx/qt/treectrl.h
index af832c5..2abf2e17 100644
--- include/wx/qt/treectrl.h
+++ include/wx/qt/treectrl.h
@@ -8,7 +8,7 @@
 #ifndef _WX_QT_TREECTRL_H_
 #define _WX_QT_TREECTRL_H_
 
-#include <QtWidgets/QTreeWidget>
+class QTreeWidget;
 
 class WXDLLIMPEXP_CORE wxTreeCtrl : public wxTreeCtrlBase
 {
@@ -112,7 +112,7 @@ public:
 
     virtual bool GetBoundingRect(const wxTreeItemId& item, wxRect& rect, bool textOnly = false) const;
 
-    virtual QTreeWidget *GetHandle() const;
+    virtual QWidget *GetHandle() const;
 
 protected:
     virtual int DoGetItemState(const wxTreeItemId& item) const;
diff --git include/wx/qt/window.h include/wx/qt/window.h
index 3002740..76f8779 100644
--- include/wx/qt/window.h
+++ include/wx/qt/window.h
@@ -9,8 +9,27 @@
 #ifndef _WX_QT_WINDOW_H_
 #define _WX_QT_WINDOW_H_
 
-#include <QtWidgets/QWidget>
-#include <QtWidgets/QScrollArea>
+#include <list>
+
+class QWidget;
+class QScrollWindow;
+class QAbstractScrollArea;
+class QScrollArea;
+class QPicture;
+class QPainter;
+
+class QPaintEvent;
+class QResizeEvent;
+class QWheelEvent;
+class QKeyEvent;
+class QMouseEvent;
+class QEvent;
+class QMoveEvent;
+class QEvent;
+class QEvent;
+class QCloseEvent;
+class QContextMenuEvent;
+class QFocusEvent;
 
 class WXDLLIMPEXP_FWD_CORE wxScrollBar;
 class WXDLLIMPEXP_FWD_CORE wxQtShortcutHandler;
@@ -46,81 +65,82 @@ public:
                 const wxSize& size = wxDefaultSize,
                 long style = 0,
                 const wxString& name = wxPanelNameStr);
-    
+
     bool Create(wxWindowQt *parent,
                 wxWindowID id,
                 const wxPoint& pos = wxDefaultPosition,
                 const wxSize& size = wxDefaultSize,
                 long style = 0,
                 const wxString& name = wxPanelNameStr);
-    
+
     // Used by all window classes in the widget creation process.
     void PostCreation( bool generic = true );
 
-    void AddChild( wxWindowBase *child );
+    void AddChild( wxWindowBase *child ) wxOVERRIDE;
 
-    virtual bool Show( bool show = true );
+    virtual bool Show( bool show = true ) wxOVERRIDE;
 
-    virtual void SetLabel(const wxString& label);
-    virtual wxString GetLabel() const;
+    virtual void SetLabel(const wxString& label) wxOVERRIDE;
+    virtual wxString GetLabel() const wxOVERRIDE;
 
-    virtual void DoEnable( bool enable );
-    virtual void SetFocus();
+    virtual void DoEnable( bool enable ) wxOVERRIDE;
+    virtual void SetFocus() wxOVERRIDE;
 
     // Parent/Child:
     static void QtReparent( QWidget *child, QWidget *parent );
-    virtual bool Reparent( wxWindowBase *newParent );
-    
+    virtual bool Reparent( wxWindowBase *newParent ) wxOVERRIDE;
+
     // Z-order
-    virtual void Raise();
-    virtual void Lower();
-    
+    virtual void Raise() wxOVERRIDE;
+    virtual void Lower() wxOVERRIDE;
+
     // move the mouse to the specified position
-    virtual void WarpPointer(int x, int y);
+    virtual void WarpPointer(int x, int y) wxOVERRIDE;
 
-    virtual void Update();
+    virtual void Update() wxOVERRIDE;
     virtual void Refresh( bool eraseBackground = true,
-                          const wxRect *rect = (const wxRect *) NULL );
+                          const wxRect *rect = (const wxRect *) NULL ) wxOVERRIDE;
+
+    virtual bool SetCursor( const wxCursor &cursor ) wxOVERRIDE;
+    virtual bool SetFont(const wxFont& font) wxOVERRIDE;
 
-    virtual bool SetFont(const wxFont& font);
-    
     // get the (average) character size for the current font
-    virtual int GetCharHeight() const;
-    virtual int GetCharWidth() const;
-    
+    virtual int GetCharHeight() const wxOVERRIDE;
+    virtual int GetCharWidth() const wxOVERRIDE;
+
     virtual void SetScrollbar( int orient,
                                int pos,
                                int thumbvisible,
                                int range,
-                               bool refresh = true );
-    virtual void SetScrollPos( int orient, int pos, bool refresh = true );
-    virtual int GetScrollPos( int orient ) const;
-    virtual int GetScrollThumb( int orient ) const;
-    virtual int GetScrollRange( int orient ) const;
+                               bool refresh = true ) wxOVERRIDE;
+    virtual void SetScrollPos( int orient, int pos, bool refresh = true ) wxOVERRIDE;
+    virtual int GetScrollPos( int orient ) const wxOVERRIDE;
+    virtual int GetScrollThumb( int orient ) const wxOVERRIDE;
+    virtual int GetScrollRange( int orient ) const wxOVERRIDE;
 
         // scroll window to the specified position
     virtual void ScrollWindow( int dx, int dy,
-                               const wxRect* rect = NULL );
+                               const wxRect* rect = NULL ) wxOVERRIDE;
 
     // Styles
-    virtual void SetWindowStyleFlag( long style );
-    virtual void SetExtraStyle( long exStyle );
+    virtual void SetWindowStyleFlag( long style ) wxOVERRIDE;
+    virtual void SetExtraStyle( long exStyle ) wxOVERRIDE;
+
+    virtual bool SetBackgroundStyle(wxBackgroundStyle style) wxOVERRIDE;
+    virtual bool IsTransparentBackgroundSupported(wxString* reason = NULL) const wxOVERRIDE;
+    virtual bool SetTransparent(wxByte alpha) wxOVERRIDE;
+    virtual bool CanSetTransparent() wxOVERRIDE { return true; }
 
-    virtual bool SetBackgroundStyle(wxBackgroundStyle style);
-    virtual bool IsTransparentBackgroundSupported(wxString* reason = NULL) const;
-    virtual bool SetTransparent(wxByte alpha);
-    virtual bool CanSetTransparent() { return true; }
+    QWidget *GetHandle() const wxOVERRIDE;
 
-    virtual WXWidget GetHandle() const;
+    virtual void SetDropTarget( wxDropTarget *dropTarget ) wxOVERRIDE;
 
-    virtual void SetDropTarget( wxDropTarget *dropTarget );
-    
 #if wxUSE_ACCEL
     // accelerators
     // ------------
-    virtual void SetAcceleratorTable( const wxAcceleratorTable& accel );    
+    virtual void SetAcceleratorTable( const wxAcceleratorTable& accel ) wxOVERRIDE;
 #endif // wxUSE_ACCEL
-    
+
     // wxQt implementation internals:
 
     virtual QPicture *QtGetPicture() const;
@@ -147,41 +167,41 @@ public:
     virtual void QtHandleShortcut ( int command );
 #endif // wxUSE_ACCEL
 
-    virtual QAbstractScrollArea *QtGetScrollBarsContainer() const;
+    virtual QScrollArea *QtGetScrollBarsContainer() const;
 
 protected:
     virtual void DoGetTextExtent(const wxString& string,
                                  int *x, int *y,
                                  int *descent = NULL,
                                  int *externalLeading = NULL,
-                                 const wxFont *font = NULL) const;
+                                 const wxFont *font = NULL) const wxOVERRIDE;
 
     // coordinates translation
-    virtual void DoClientToScreen( int *x, int *y ) const;
-    virtual void DoScreenToClient( int *x, int *y ) const;
+    virtual void DoClientToScreen( int *x, int *y ) const wxOVERRIDE;
+    virtual void DoScreenToClient( int *x, int *y ) const wxOVERRIDE;
 
     // capture/release the mouse, used by Capture/ReleaseMouse()
-    virtual void DoCaptureMouse();
-    virtual void DoReleaseMouse();
+    virtual void DoCaptureMouse() wxOVERRIDE;
+    virtual void DoReleaseMouse() wxOVERRIDE;
 
     // retrieve the position/size of the window
-    virtual void DoGetPosition(int *x, int *y) const;
+    virtual void DoGetPosition(int *x, int *y) const wxOVERRIDE;
 
-    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags = wxSIZE_AUTO);
-    virtual void DoGetSize(int *width, int *height) const;
+    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags = wxSIZE_AUTO) wxOVERRIDE;
+    virtual void DoGetSize(int *width, int *height) const wxOVERRIDE;
 
     // same as DoSetSize() for the client size
-    virtual void DoSetClientSize(int width, int height);
-    virtual void DoGetClientSize(int *width, int *height) const;
+    virtual void DoSetClientSize(int width, int height) wxOVERRIDE;
+    virtual void DoGetClientSize(int *width, int *height) const wxOVERRIDE;
 
-    virtual void DoMoveWindow(int x, int y, int width, int height);
+    virtual void DoMoveWindow(int x, int y, int width, int height) wxOVERRIDE;
 
 #if wxUSE_TOOLTIPS
-    virtual void DoSetToolTip( wxToolTip *tip );
+    virtual void DoSetToolTip( wxToolTip *tip ) wxOVERRIDE;
 #endif // wxUSE_TOOLTIPS
 
 #if wxUSE_MENUS
-    virtual bool DoPopupMenu(wxMenu *menu, int x, int y);
+    virtual bool DoPopupMenu(wxMenu *menu, int x, int y) wxOVERRIDE;
 #endif // wxUSE_MENUS
 
     QWidget *m_qtWindow;
@@ -193,7 +213,7 @@ private:
     wxScrollBar *m_horzScrollBar;
     wxScrollBar *m_vertScrollBar;
     void QtOnScrollBarEvent( wxScrollEvent& event );
-    
+
     wxScrollBar *QtGetScrollBar( int orientation ) const;
     wxScrollBar *QtSetScrollBar( int orientation, wxScrollBar *scrollBar=NULL );
 
@@ -205,7 +225,7 @@ private:
     bool m_mouseInside;
 
 #if wxUSE_ACCEL
-    QList< QShortcut* > m_qtShortcuts;
+    QList< QShortcut* > *m_qtShortcuts;
     wxQtShortcutHandler *m_qtShortcutHandler;
     bool m_processingShortcut;
 #endif // wxUSE_ACCEL
diff --git src/generic/activityindicator.cpp src/generic/activityindicator.cpp
index 53c65e1..02ed29b 100644
--- src/generic/activityindicator.cpp
+++ src/generic/activityindicator.cpp
@@ -122,7 +122,7 @@ private:
     void OnPaint(wxPaintEvent& WXUNUSED(event))
     {
         wxPaintDC pdc(m_win);
-
+#if wxUSE_GRAPHICS_CONTEXT
         wxScopedPtr<wxGraphicsContext> const
             gc(wxGraphicsRenderer::GetDefaultRenderer()->CreateContext(pdc));
 
@@ -167,6 +167,7 @@ private:
             gc->FillPath(path);
             gc->Rotate(angle);
         }
+#endif        
     }
 
     AdvanceTimer m_timer;
diff --git src/qt/accel.cpp src/qt/accel.cpp
index 5b9b2f3..1ecb0c8 100644
--- src/qt/accel.cpp
+++ src/qt/accel.cpp
@@ -12,6 +12,7 @@
 #include "wx/list.h"
 #include "wx/qt/private/converter.h"
 #include <QtCore/QVariant>
+#include <QtWidgets/QShortcut>
 
 // ----------------------------------------------------------------------------
 // wxAccelList: a list of wxAcceleratorEntries
@@ -81,13 +82,13 @@ wxAcceleratorTable::wxAcceleratorTable(int n, const wxAcceleratorEntry entries[]
     }
 }
 
-QList< QShortcut* > wxAcceleratorTable::ConvertShortcutTable( QWidget *parent ) const
+QList< QShortcut* > *wxAcceleratorTable::ConvertShortcutTable( QWidget *parent ) const
 {   
-    QList< QShortcut* > qtList;
+    QList< QShortcut* > *qtList = new QList< QShortcut* >;
     
     for ( wxAccelList::Node *node = M_ACCELDATA->m_accels.GetFirst(); node; node = node->GetNext() )
     {
-        qtList << ConvertAccelerator( node->GetData(), parent );
+        qtList->push_back(ConvertAccelerator( node->GetData(), parent ));
     }
     
     return qtList;
diff --git src/qt/anybutton.cpp src/qt/anybutton.cpp
index f09c6ab..216b796 100644
--- src/qt/anybutton.cpp
+++ src/qt/anybutton.cpp
@@ -14,11 +14,12 @@
     #include "wx/anybutton.h"
 #endif
 
+#include <QtWidgets/QPushButton>
+
 #include "wx/bitmap.h"
 #include "wx/qt/private/utils.h"
 #include "wx/qt/private/winevent.h"
 
-
 class wxQtPushButton : public wxQtEventSignalHandler< QPushButton, wxAnyButton >
 {
 
@@ -64,7 +65,7 @@ void wxAnyButton::SetLabel( const wxString &label )
     m_qtPushButton->setText( wxQtConvertString( label ));
 }
 
-QPushButton *wxAnyButton::GetHandle() const
+QWidget *wxAnyButton::GetHandle() const
 {
     return m_qtPushButton;
 }
diff --git src/qt/app.cpp src/qt/app.cpp
index c732701..93f0ccd 100644
--- src/qt/app.cpp
+++ src/qt/app.cpp
@@ -13,6 +13,7 @@
 #include "wx/qt/private/utils.h"
 #include "wx/qt/private/converter.h"
 #include <QtCore/QStringList>
+#include <QtWidgets/QApplication>
 
 wxIMPLEMENT_DYNAMIC_CLASS(wxApp, wxAppBase);
 
diff --git src/qt/apptraits.cpp src/qt/apptraits.cpp
index 2f747d7..f196158 100644
--- src/qt/apptraits.cpp
+++ src/qt/apptraits.cpp
@@ -12,7 +12,8 @@
 #include "wx/stdpaths.h"
 #include "wx/evtloop.h"
 
-#include "wx/qt/timer.h"
+#include "wx/timer.h"
+#include "wx/qt/private/timer.h"
 
 #include <QtGlobal>
 
diff --git src/qt/bitmap.cpp src/qt/bitmap.cpp
index b451714..bcbde2e 100644
--- src/qt/bitmap.cpp
+++ src/qt/bitmap.cpp
@@ -24,6 +24,7 @@
 #include "wx/bitmap.h"
 #include "wx/cursor.h"
 #include "wx/rawbmp.h"
+#include "wx/qt/colour.h"
 #include "wx/qt/private/converter.h"
 #include "wx/qt/private/utils.h"
 
@@ -123,42 +124,31 @@ static QImage ConvertImage( const wxImage &image )
 class wxBitmapRefData: public wxGDIRefData
 {
     public:
-        wxBitmapRefData() : wxGDIRefData()
-        {
-            m_mask = NULL;
-            m_qtPixmap = new QPixmap();
-        }
-        
-        wxBitmapRefData( const wxBitmapRefData& data ) : wxGDIRefData()
-        {
-            m_mask = NULL;
-            m_qtPixmap = new QPixmap(data.m_qtPixmap->handle());
-        }
+        wxBitmapRefData() { m_mask = NULL; }
         
-        wxBitmapRefData( int width, int height, int depth ) : wxGDIRefData()
+        wxBitmapRefData( int width, int height, int depth )
         {
+            if (depth == 1)
+                m_qtPixmap = QBitmap( width, height );
+            else
+                m_qtPixmap = QPixmap( width, height );
             m_mask = NULL;
-            if (depth == 1) {
-                m_qtPixmap = new QBitmap( width, height );
-            } else {
-                m_qtPixmap = new QPixmap( width, height );
-            }
         }
         
-        wxBitmapRefData( QPixmap pix ) : wxGDIRefData()
+        wxBitmapRefData( QPixmap pix )
         {
+            m_qtPixmap = pix;
             m_mask = NULL;
-            m_qtPixmap = new QPixmap(pix);
         }
 
-        virtual ~wxBitmapRefData()
-        {
-            if (m_qtPixmap != NULL)
-                delete m_qtPixmap;
-        }
+        virtual ~wxBitmapRefData() { delete m_mask; }
 
-        QPixmap *m_qtPixmap;
+        QPixmap m_qtPixmap;
         wxMask *m_mask;
+
+private:
+    wxBitmapRefData(const wxBitmapRefData&other);
+    wxBitmapRefData& operator=(const wxBitmapRefData&other);
 };
 
 //-----------------------------------------------------------------------------
@@ -167,7 +157,8 @@ class wxBitmapRefData: public wxGDIRefData
 
 wxIMPLEMENT_DYNAMIC_CLASS(wxBitmap, wxObject);
 
-#define M_PIXDATA (*((wxBitmapRefData *)m_refData)->m_qtPixmap)
+#define M_PIXDATA ((wxBitmapRefData *)m_refData)->m_qtPixmap
+#define M_MASK ((wxBitmapRefData *)m_refData)->m_mask
 
 void wxBitmap::InitStandardHandlers()
 {
@@ -194,8 +185,7 @@ wxBitmap::wxBitmap(const char bits[], int width, int height, int depth )
     if (width > 0 && height > 0 && depth == 1)
     {
         m_refData = new wxBitmapRefData();
-        ((wxBitmapRefData *)m_refData)->m_qtPixmap =
-            new QBitmap(QBitmap::fromData(QSize(width, height), (const uchar*)bits));
+        M_PIXDATA = QBitmap(QBitmap::fromData(QSize(width, height), (const uchar*)bits));
     }
 }
 
@@ -213,7 +203,7 @@ wxBitmap::wxBitmap(const wxSize& sz, int depth )
 wxBitmap::wxBitmap(const char* const* bits)
 {
     m_refData = new wxBitmapRefData();
-    ((wxBitmapRefData *)m_refData)->m_qtPixmap = new QPixmap( bits );
+    M_PIXDATA = QPixmap( bits );
 }
 
 wxBitmap::wxBitmap(const wxString &filename, wxBitmapType type )
@@ -232,9 +222,7 @@ wxBitmap::wxBitmap(const wxImage& image, int depth, double WXUNUSED(scale) )
 wxBitmap::wxBitmap(const wxCursor& cursor)
 {
     // note that pixmap could be invalid if is not a pixmap cursor
-    // also, a wxCursor::GetHandle method could be implemented instead of 
-    // accessing the member variable directly  
-    QPixmap pix = cursor.m_qtCursor.pixmap();
+    QPixmap pix = cursor.GetHandle().pixmap();
     m_refData = new wxBitmapRefData(pix);
 }
 
@@ -275,29 +263,26 @@ int wxBitmap::GetDepth() const
 #if wxUSE_IMAGE
 wxImage wxBitmap::ConvertToImage() const
 {
-    return ConvertImage(M_PIXDATA.toImage());
+    QPixmap pixmap(M_PIXDATA);
+    if ( M_MASK && M_MASK->GetHandle() )
+        pixmap.setMask(*M_MASK->GetHandle());
+    return ConvertImage(pixmap.toImage());
 }
 
 #endif // wxUSE_IMAGE
 
 wxMask *wxBitmap::GetMask() const
 {
-    return ( ((wxBitmapRefData *)m_refData)->m_mask );
+    return M_MASK;
 }
 
 void wxBitmap::SetMask(wxMask *mask)
 {
-    wxMask *bitmapMask = ( ((wxBitmapRefData *)m_refData)->m_mask );
-
-    if (bitmapMask)
-        delete bitmapMask;
-
-    bitmapMask = mask;
-    ((wxBitmapRefData *)m_refData)->m_mask = mask;
-    M_PIXDATA.setMask( *mask->GetHandle() );
+    AllocExclusive();
+    delete M_MASK;
+    M_MASK = mask;
 }
 
-
 wxBitmap wxBitmap::GetSubBitmap(const wxRect& rect) const
 {
     return wxBitmap(M_PIXDATA.copy(wxQtConvertRect(rect)));
@@ -448,7 +433,7 @@ void wxBitmap::UngetRawData(wxPixelDataBase& WXUNUSED(data))
 
 QPixmap *wxBitmap::GetHandle() const
 {
-    return ( m_refData != NULL ) ? ((wxBitmapRefData *)m_refData)->m_qtPixmap : NULL;
+    return ( m_refData != NULL ) ? &M_PIXDATA : NULL;
 }
 
 wxGDIRefData *wxBitmap::CreateGDIRefData() const
@@ -458,7 +443,11 @@ wxGDIRefData *wxBitmap::CreateGDIRefData() const
 
 wxGDIRefData *wxBitmap::CloneGDIRefData(const wxGDIRefData *data) const
 {
-    return new wxBitmapRefData(*(wxBitmapRefData *)data);
+    const wxBitmapRefData* oldRef = static_cast<const wxBitmapRefData*>(data);
+    wxBitmapRefData *d = new wxBitmapRefData;
+    d->m_qtPixmap = oldRef->m_qtPixmap; //.copy();// copy not needed
+    d->m_mask = oldRef->m_mask ? new wxMask(*oldRef->m_mask) : NULL;
+    return d;
 }
 
 bool wxBitmap::HasAlpha() const
@@ -479,9 +468,18 @@ wxMask::wxMask()
 
 wxMask::wxMask(const wxMask &mask)
 {
-    m_qtBitmap = new QBitmap(*mask.GetHandle());
+    QBitmap *mask_bmp = mask.GetHandle();
+    m_qtBitmap = mask_bmp ? new QBitmap(*mask_bmp) : NULL;
 }
 
+wxMask& wxMask::operator=(const wxMask &mask)
+{
+    delete m_qtBitmap;
+    QBitmap *mask_bmp = mask.GetHandle();
+    m_qtBitmap = mask_bmp ? new QBitmap(*mask_bmp) : NULL;
+    return *this;
+}    
+
 wxMask::wxMask(const wxBitmap& bitmap, const wxColour& colour)
 {
     m_qtBitmap = NULL;
@@ -502,38 +500,36 @@ wxMask::wxMask(const wxBitmap& bitmap)
 
 wxMask::~wxMask()
 {
-    if (m_qtBitmap)
-        delete m_qtBitmap;
+    delete m_qtBitmap;
+}
+
+// this function is called from Create() to free the existing mask data
+void wxMask::FreeData()
+{
+    delete m_qtBitmap;
+    m_qtBitmap = NULL;
 }
 
-bool wxMask::Create(const wxBitmap& bitmap, const wxColour& colour)
+bool wxMask::InitFromColour(const wxBitmap& bitmap, const wxColour& colour)
 {
     if (!bitmap.IsOk())
         return false;
 
-    if (m_qtBitmap)
-        delete m_qtBitmap;
+    delete m_qtBitmap;
+    m_qtBitmap = new QBitmap(bitmap.GetHandle()->createMaskFromColor(colour.GetQColor()));
 
-    m_qtBitmap = new QBitmap(bitmap.GetHandle()->createMaskFromColor(colour.GetHandle()));
     return true;
 }
 
-bool wxMask::Create(const wxBitmap& WXUNUSED(bitmap), int WXUNUSED(paletteIndex))
-{
-    wxMISSING_IMPLEMENTATION( __FUNCTION__ );
-    return false;
-}
-
-bool wxMask::Create(const wxBitmap& bitmap)
+bool wxMask::InitFromMonoBitmap(const wxBitmap& bitmap)
 {
     //Only for mono bitmaps
     if (!bitmap.IsOk() || bitmap.GetDepth() != 1)
         return false;
 
-    if (m_qtBitmap)
-        delete m_qtBitmap;
-
+    delete m_qtBitmap;
     m_qtBitmap = new QBitmap(*bitmap.GetHandle());
+
     return true;
 }
 
diff --git src/qt/brush.cpp src/qt/brush.cpp
index 5f997c9..9c16a35 100644
--- src/qt/brush.cpp
+++ src/qt/brush.cpp
@@ -95,7 +95,7 @@ wxBrush::wxBrush()
 wxBrush::wxBrush(const wxColour& col, wxBrushStyle style )
 {
     m_refData = new wxBrushRefData();
-    M_BRUSHDATA.setColor(col.GetHandle());
+    M_BRUSHDATA.setColor(col.GetQColor());
     M_BRUSHDATA.setStyle(ConvertBrushStyle(style));
     M_STYLEDATA = style;
 }
@@ -103,7 +103,7 @@ wxBrush::wxBrush(const wxColour& col, wxBrushStyle style )
 wxBrush::wxBrush(const wxColour& col, int style)
 {
     m_refData = new wxBrushRefData();
-    M_BRUSHDATA.setColor(col.GetHandle());
+    M_BRUSHDATA.setColor(col.GetQColor());
     M_BRUSHDATA.setStyle(ConvertBrushStyle((wxBrushStyle)style));
     M_STYLEDATA = (wxBrushStyle)style;
 }
@@ -122,7 +122,7 @@ wxBrush::wxBrush(const wxBitmap& stipple)
 void wxBrush::SetColour(const wxColour& col)
 {
     AllocExclusive();
-    M_BRUSHDATA.setColor(col.GetHandle());
+    M_BRUSHDATA.setColor(col.GetQColor());
 }
 
 void wxBrush::SetColour(unsigned char r, unsigned char g, unsigned char b)
diff --git src/qt/button.cpp src/qt/button.cpp
index 382f126..7b7a2e9 100644
--- src/qt/button.cpp
+++ src/qt/button.cpp
@@ -21,6 +21,7 @@
 #include "wx/qt/private/utils.h"
 #include "wx/qt/private/winevent.h"
 
+#include <QtWidgets/QPushButton>
 
 wxButton::wxButton()
 {
diff --git src/qt/calctrl.cpp src/qt/calctrl.cpp
index d2fbd8f..8a5ee52 100644
--- src/qt/calctrl.cpp
+++ src/qt/calctrl.cpp
@@ -22,7 +22,7 @@
 #include "wx/qt/private/winevent.h"
 
 #include <QtGui/QTextCharFormat>
-
+#include <QtWidgets/QCalendarWidget>
 
 class wxQtCalendarWidget : public wxQtEventSignalHandler< QCalendarWidget, wxCalendarCtrl >
 {
@@ -229,7 +229,7 @@ void wxCalendarCtrl::SetHoliday(size_t day)
     date.setDate(date.year(), date.month(), day);
 
     QTextCharFormat format = m_qtCalendar->dateTextFormat(date);
-    format.setForeground(m_colHolidayFg.GetHandle());
+    format.setForeground(m_colHolidayFg.GetQColor());
     m_qtCalendar->setDateTextFormat(date, format);
 }
 
@@ -249,9 +249,9 @@ void wxCalendarCtrl::RefreshHolidays()
     if ( m_windowStyle & wxCAL_SHOW_HOLIDAYS )
     {
         if ( m_colHolidayFg.IsOk() )
-            format.setForeground(m_colHolidayFg.GetHandle());
+            format.setForeground(m_colHolidayFg.GetQColor());
         if ( m_colHolidayBg.IsOk() )
-            format.setBackground(m_colHolidayBg.GetHandle());
+            format.setBackground(m_colHolidayBg.GetQColor());
     }
     else
     {
@@ -278,9 +278,9 @@ void wxCalendarCtrl::SetHeaderColours(const wxColour& colFg, const wxColour& col
 
     QTextCharFormat format = m_qtCalendar->headerTextFormat();
     if ( m_colHeaderFg.IsOk() )
-        format.setForeground(m_colHeaderFg.GetHandle());
+        format.setForeground(m_colHeaderFg.GetQColor());
     if ( m_colHeaderBg.IsOk() )
-        format.setBackground(m_colHeaderBg.GetHandle());
+        format.setBackground(m_colHeaderBg.GetQColor());
     m_qtCalendar->setHeaderTextFormat(format);
 }
 
@@ -303,9 +303,9 @@ void wxCalendarCtrl::SetAttr(size_t day, wxCalendarDateAttr *attr)
 
     QTextCharFormat format = m_qtCalendar->dateTextFormat(date);
     if ( attr->HasTextColour() )
-        format.setForeground(attr->GetTextColour().GetHandle());
+        format.setForeground(attr->GetTextColour().GetQColor());
     if ( attr->HasBackgroundColour() )
-        format.setBackground(attr->GetBackgroundColour().GetHandle());
+        format.setBackground(attr->GetBackgroundColour().GetQColor());
 
     wxMISSING_IMPLEMENTATION( "Setting font" );
 
@@ -316,7 +316,7 @@ void wxCalendarCtrl::SetAttr(size_t day, wxCalendarDateAttr *attr)
     m_qtCalendar->setDateTextFormat(date, format);
 }
 
-QCalendarWidget *wxCalendarCtrl::GetHandle() const
+QWidget *wxCalendarCtrl::GetHandle() const
 {
     return m_qtCalendar;
 }
diff --git src/qt/checkbox.cpp src/qt/checkbox.cpp
index 5196b68..48baecf 100644
--- src/qt/checkbox.cpp
+++ src/qt/checkbox.cpp
@@ -13,6 +13,8 @@
 #include "wx/qt/private/converter.h"
 #include "wx/qt/private/winevent.h"
 
+#include <QtWidgets/QCheckBox>
+
 class wxQtCheckBox : public wxQtEventSignalHandler< QCheckBox, wxCheckBox >
 {
 public:
@@ -124,7 +126,7 @@ wxCheckBoxState wxCheckBox::DoGet3StateValue() const
     return wxCHK_UNDETERMINED;
 }
 
-QCheckBox *wxCheckBox::GetHandle() const
+QWidget *wxCheckBox::GetHandle() const
 {
     return m_qtCheckBox;
 }
diff --git src/qt/checklst.cpp src/qt/checklst.cpp
index df72f98..a1d336c 100644
--- src/qt/checklst.cpp
+++ src/qt/checklst.cpp
@@ -10,6 +10,8 @@
 
 #include "wx/checklst.h"
 
+#include <QtWidgets/QListWidgetItem>
+
 wxCheckListBox::wxCheckListBox()
 {
 }
diff --git src/qt/choice.cpp src/qt/choice.cpp
index 9656240..19d0742 100644
--- src/qt/choice.cpp
+++ src/qt/choice.cpp
@@ -74,7 +74,7 @@ bool wxChoice::Create( wxWindow *parent, wxWindowID id,
         const wxValidator& validator,
         const wxString& name )
 {
-    return Create( parent, id, pos, size, choices.size(), &choices[ 0 ], style,
+    return Create( parent, id, pos, size, choices.size(), choices.size() ? &choices[ 0 ] : NULL, style,
         validator, name );
 }
 
@@ -174,7 +174,7 @@ void wxChoice::DoDeleteOneItem(unsigned int pos)
     m_qtComboBox->removeItem(pos);
 }
 
-QComboBox *wxChoice::GetHandle() const
+QWidget *wxChoice::GetHandle() const
 {
     return m_qtComboBox;
 }
diff --git src/qt/clipbrd.cpp src/qt/clipbrd.cpp
index aa09e51..d692f66 100644
--- src/qt/clipbrd.cpp
+++ src/qt/clipbrd.cpp
@@ -20,6 +20,7 @@
 #include "wx/scopeguard.h"
 #include "wx/qt/private/converter.h"
 
+#include <QtCore/QMimeData>
 
 // ----------------------------------------------------------------------------
 // wxClipboard ctor/dtor
@@ -42,7 +43,7 @@ public:
 private:
     void changed( QClipboard::Mode mode)
     {
-        if(mode != m_clipboard->Mode() || !m_clipboard->m_sink)
+        if ( mode != m_clipboard->Mode() || !m_clipboard->m_sink )
             return;
 
         wxClipboardEvent *event = new wxClipboardEvent(wxEVT_CLIPBOARD_CHANGED);
@@ -108,7 +109,7 @@ bool wxClipboard::AddData( wxDataObject *data )
 
         QByteArray bytearray(size, 0);
         data->GetDataHere(format, bytearray.data());
-        MimeData->setData(format.m_MimeType, bytearray);
+        MimeData->setData(wxQtConvertString(format.m_MimeType), bytearray);
     }
 
     delete data;
@@ -143,15 +144,15 @@ bool wxClipboard::GetData( wxDataObject& data )
         const wxDataFormat format(formats[i]);
         
         // is this format supported by clipboard ?
-        if( !MimeData->hasFormat(format.m_MimeType) )
+        if( !MimeData->hasFormat(wxQtConvertString(format.m_MimeType)) )
             continue;
 
         wxTextDataObject *textdata = dynamic_cast<wxTextDataObject*>(&data);
-        if(textdata)
+        if ( textdata )
             textdata->SetText(wxQtConvertString(MimeData->text()));
         else
         {
-            QByteArray bytearray = MimeData->data( format.m_MimeType ).data();
+            QByteArray bytearray = MimeData->data( wxQtConvertString(format.m_MimeType) ).data();
             data.SetData(format, bytearray.size(), bytearray.constData());
         }
 
@@ -169,7 +170,7 @@ void wxClipboard::Clear()
 bool wxClipboard::IsSupported( const wxDataFormat& format )
 {
     const QMimeData *data = QtClipboard->mimeData( (QClipboard::Mode)Mode() );
-    return data->hasFormat(format.m_MimeType);
+    return data->hasFormat(wxQtConvertString(format.m_MimeType));
 }
 
 bool wxClipboard::IsSupportedAsync(wxEvtHandler *sink)
diff --git src/qt/colordlg.cpp src/qt/colordlg.cpp
index 3e4dda1..3138925 100644
--- src/qt/colordlg.cpp
+++ src/qt/colordlg.cpp
@@ -11,6 +11,8 @@
 #include "wx/qt/private/winevent.h"
 #include "wx/colordlg.h"
 
+#include <QtWidgets/QColorDialog>
+
 class wxQtColorDialog : public wxQtEventSignalHandler< QColorDialog, wxDialog >
 {
 public:
@@ -23,16 +25,16 @@ bool wxColourDialog::Create(wxWindow *parent, wxColourData *data )
 {
     m_qtWindow = new wxQtColorDialog( parent, this );
 
-    if(data)
+    if ( data )
         m_data = *data;
 
     if ( m_data.GetChooseFull() )
     {
         for (int i=0; i<wxColourData::NUM_CUSTOM; i++)
-            QColorDialog::setCustomColor(i, m_data.GetCustomColour(i).GetHandle());
+            QColorDialog::setCustomColor(i, m_data.GetCustomColour(i).GetQColor());
     }
 
-    GetHandle()->setCurrentColor(m_data.GetColour().GetHandle());
+    static_cast<QColorDialog*>(m_qtWindow)->setCurrentColor(m_data.GetColour().GetQColor());
 
     return wxTopLevelWindow::Create( parent, wxID_ANY, "");
 }
@@ -40,10 +42,14 @@ bool wxColourDialog::Create(wxWindow *parent, wxColourData *data )
 wxColourData &wxColourDialog::GetColourData()
 {
     for (int i=0; i<wxColourData::NUM_CUSTOM; i++)
-        m_data.SetCustomColour(i, GetHandle()->customColor(i));
+        m_data.SetCustomColour(i, GetQColorDialog()->customColor(i));
     
-    m_data.SetColour(GetHandle()->currentColor());
+    m_data.SetColour(GetQColorDialog()->currentColor());
     
     return m_data;
 }
 
+QColorDialog *wxColourDialog::GetQColorDialog() const
+{
+    return static_cast<QColorDialog *>(m_qtWindow);
+}
diff --git src/qt/colour.cpp src/qt/colour.cpp
index bad77af..4192179 100644
--- src/qt/colour.cpp
+++ src/qt/colour.cpp
@@ -18,8 +18,25 @@
     #include "wx/colour.h"
 #endif // WX_PRECOMP
 
+#include "wx/colour.h"
 #include "wx/qt/private/utils.h"
 
+#include <QtGui/QColor>
+
+wxColour::wxColour(const QColor& color)
+{
+    InitRGBA(color.red(), color.green(), color.blue(), color.alpha());
+}
+
+bool wxColour::operator==(const wxColour& color) const
+{
+    return m_red == color.m_red && m_green == color.m_green && m_blue == color.m_blue && m_alpha == color.m_alpha;
+}
+
+bool wxColour::operator!=(const wxColour& color) const
+{
+    return !(*this == color);
+}
 
 int wxColour::GetPixel() const
 {
@@ -27,4 +44,21 @@ int wxColour::GetPixel() const
     return 0;
 }
 
-#include "wx/colour.h"
+QColor wxColour::GetQColor() const
+{
+    if ( m_valid )
+        return QColor(m_red, m_green, m_blue, m_alpha);
+    return QColor();
+}
+
+void wxColour::Init()
+{
+    m_red = m_green = m_blue = m_alpha = 0;
+    m_valid = false;
+}
+
+void wxColour::InitRGBA(ChannelType r, ChannelType g, ChannelType b, ChannelType a)
+{
+    m_red = r, m_green = g, m_blue = b, m_alpha = a;
+    m_valid = true;
+}
diff --git src/qt/combobox.cpp src/qt/combobox.cpp
index aee4130..67757fd 100644
--- src/qt/combobox.cpp
+++ src/qt/combobox.cpp
@@ -12,7 +12,9 @@
 #include "wx/window.h"
 #include "wx/qt/private/converter.h"
 #include "wx/qt/private/winevent.h"
+
 #include <QtWidgets/QComboBox>
+#include <QtWidgets/QLineEdit>
 
 class wxQtComboBox : public wxQtEventSignalHandler< QComboBox, wxComboBox >
 {
@@ -123,12 +125,12 @@ wxString wxComboBox::DoGetValue() const
 
 void wxComboBox::Popup()
 {
-     GetHandle()->showPopup();
+    static_cast<QComboBox *>(GetHandle())->showPopup();
 }
 
 void wxComboBox::Dismiss()
 {
-    GetHandle()->hidePopup();
+    static_cast<QComboBox *>(GetHandle())->hidePopup();
 }
 
 void wxComboBox::SetSelection( long from, long to )
diff --git src/qt/control.cpp src/qt/control.cpp
index 5605fd0..eacb240 100644
--- src/qt/control.cpp
+++ src/qt/control.cpp
@@ -11,6 +11,8 @@
 #include "wx/control.h"
 #include "wx/qt/private/converter.h"
 
+#include <QtWidgets/QWidget>
+
 wxIMPLEMENT_DYNAMIC_CLASS(wxControl, wxWindow);
 
 wxControl::wxControl()
diff --git src/qt/cursor.cpp src/qt/cursor.cpp
index 85714af..442e250 100644
--- src/qt/cursor.cpp
+++ src/qt/cursor.cpp
@@ -20,19 +20,19 @@
 #endif // WX_PRECOMP
 
 #include "wx/cursor.h"
-
+#include "wx/qt/private/converter.h"
 
 void wxSetCursor(const wxCursor& cursor)
 {
-    if (cursor.m_qtCursor.shape() == Qt::ArrowCursor)
+    if (cursor.GetHandle().shape() == Qt::ArrowCursor)
         QApplication::restoreOverrideCursor();
     else
-        QApplication::setOverrideCursor(cursor.m_qtCursor);
+        QApplication::setOverrideCursor(cursor.GetHandle());
 }
 
 void wxBeginBusyCursor(const wxCursor *cursor)
 {
-    QApplication::setOverrideCursor(cursor->m_qtCursor);
+    QApplication::setOverrideCursor(cursor->GetHandle());
 }
 
 bool wxIsBusy()
@@ -45,13 +45,22 @@ void wxEndBusyCursor()
     QApplication::restoreOverrideCursor();
 }
 
+//-----------------------------------------------------------------------------
+// wxCursorRefData
+//-----------------------------------------------------------------------------
+
+class wxCursorRefData: public wxGDIRefData
+{
+public:
+    wxCursorRefData() {}
+    wxCursorRefData( const wxCursorRefData& data ) : m_qtCursor(data.m_qtCursor) {}
+    wxCursorRefData( QCursor &c ) : m_qtCursor(c) {}
+
+    QCursor m_qtCursor;
+};
 
 wxIMPLEMENT_DYNAMIC_CLASS(wxCursor, wxGDIObject);
 
-wxCursor::wxCursor( const wxCursor &cursor )
-{
-    m_qtCursor = cursor.m_qtCursor;
-}
 
 #if wxUSE_IMAGE
 wxCursor::wxCursor(const wxString& cursor_file,
@@ -77,14 +86,26 @@ wxCursor::wxCursor(const wxImage& img)
 }
 #endif
 
+wxPoint wxCursor::GetHotSpot() const
+{
+    return wxQtConvertPoint(GetHandle().hotSpot());
+}
+
+QCursor &wxCursor::GetHandle() const
+{
+    return static_cast<wxCursorRefData*>(m_refData)->m_qtCursor;
+}
+
 void wxCursor::InitFromStock( wxStockCursor cursorId )
 {
+    AllocExclusive();
+
     Qt::CursorShape qt_cur;
     switch (cursorId)
     {
     case wxCURSOR_BLANK:
     {
-        m_qtCursor = QBitmap();
+        GetHandle() = QBitmap();
         return;
     }
 //    case wxCURSOR_ARROW: 
@@ -125,28 +146,29 @@ void wxCursor::InitFromStock( wxStockCursor cursorId )
         break;
     }
 
-    m_qtCursor.setShape(qt_cur);
+    GetHandle().setShape(qt_cur);
 }
 
 #if wxUSE_IMAGE
 
 void wxCursor::InitFromImage( const wxImage & image )
 {
-    m_qtCursor = *wxBitmap(image).GetHandle();
+    AllocExclusive();
+    GetHandle() = QCursor(*wxBitmap(image).GetHandle(), 
+                           image.HasOption(wxIMAGE_OPTION_CUR_HOTSPOT_X) ?
+                           image.GetOptionInt(wxIMAGE_OPTION_CUR_HOTSPOT_X) : -1,
+                           image.HasOption(wxIMAGE_OPTION_CUR_HOTSPOT_Y) ?
+                           image.GetOptionInt(wxIMAGE_OPTION_CUR_HOTSPOT_Y) : -1);
 }
 
 #endif // wxUSE_IMAGE
 
 wxGDIRefData *wxCursor::CreateGDIRefData() const
 {
-    //return new wxCursorRefData;
-    return NULL;
+    return new wxCursorRefData;
 }
 
-wxGDIRefData *
-wxCursor::CloneGDIRefData(const wxGDIRefData * data) const
+wxGDIRefData *wxCursor::CloneGDIRefData(const wxGDIRefData *data) const
 {
-//    return new wxCursorRefData(data->bitmap());
-    return NULL;
-
+    return new wxCursorRefData(*(wxCursorRefData *)data);
 }
diff --git src/qt/dataobj.cpp src/qt/dataobj.cpp
index 8593578..040ad0a 100644
--- src/qt/dataobj.cpp
+++ src/qt/dataobj.cpp
@@ -12,18 +12,17 @@
     #pragma hdrstop
 #endif
 
-#include <QObject>
-
 #include "wx/qt/private/converter.h"
 #include "wx/qt/private/utils.h"
 #include "wx/dataobj.h"
 
+#include <QtCore/QMimeData>
 
 wxDataFormat::wxDataFormat()
 {
 }
 
-static QString DataFormatIdToMimeType( wxDataFormatId formatId )
+static wxString DataFormatIdToMimeType( wxDataFormatId formatId )
 {
     switch(formatId) {
         case wxDF_TEXT: return "text/plain";
@@ -58,32 +57,32 @@ wxDataFormat::wxDataFormat( wxDataFormatId formatId )
 
 wxDataFormat::wxDataFormat(const wxString &id)
 {
-    m_MimeType = wxQtConvertString(id);
+    m_MimeType = id;
 }
 
 wxDataFormat::wxDataFormat(const wxChar *id)
 {
-    m_MimeType = wxQtConvertString((wxString)id);
+    m_MimeType = id;
 }
 
 wxDataFormat::wxDataFormat(const QString &id)
 {
-    m_MimeType = id;
+    m_MimeType = wxQtConvertString(id);
 }
 
 void wxDataFormat::SetId( const wxChar *id )
 {
-    m_MimeType = wxQtConvertString((wxString)id);
+    m_MimeType = id;
 }
 
 void wxDataFormat::SetId( const wxString& id )
 {
-    m_MimeType = wxQtConvertString(id);
+    m_MimeType = id;
 }
 
 wxString wxDataFormat::GetId() const
 {
-    return wxQtConvertString(m_MimeType);
+    return m_MimeType;
 }
 
 wxDataFormatId wxDataFormat::GetType() const
@@ -119,6 +118,16 @@ bool wxDataFormat::operator!=(const wxDataFormat& format) const
 
 //#############################################################################
 
+wxDataObject::wxDataObject()
+{
+    m_qtMimeData = new QMimeData;
+}
+
+wxDataObject::~wxDataObject()
+{
+    delete m_qtMimeData;
+}
+
 bool wxDataObject::IsSupportedFormat(const wxDataFormat& format, Direction) const
 {
     return wxDataFormat(format) != wxDF_INVALID;
@@ -126,21 +135,21 @@ bool wxDataObject::IsSupportedFormat(const wxDataFormat& format, Direction) cons
 wxDataFormat wxDataObject::GetPreferredFormat(Direction) const
 {
     /* formats are in order of preference */
-    if (m_qtMimeData.formats().count())
-        return m_qtMimeData.formats().first();
+    if (m_qtMimeData->formats().count())
+        return m_qtMimeData->formats().first();
 
     return wxDataFormat();
 }
 
 size_t wxDataObject::GetFormatCount(Direction) const
 {
-    return m_qtMimeData.formats().count();
+    return m_qtMimeData->formats().count();
 }
 
 void wxDataObject::GetAllFormats(wxDataFormat *formats, Direction) const
 {
     int i = 0;
-    foreach (QString format, m_qtMimeData.formats())
+    foreach (QString format, m_qtMimeData->formats())
     {
         formats[i] = format;
         i++;
@@ -149,15 +158,15 @@ void wxDataObject::GetAllFormats(wxDataFormat *formats, Direction) const
 
 size_t wxDataObject::GetDataSize(const wxDataFormat& format) const
 {
-    return  m_qtMimeData.data( format.m_MimeType ).count();
+    return  m_qtMimeData->data( wxQtConvertString(format.m_MimeType) ).count();
 }
 
 bool wxDataObject::GetDataHere(const wxDataFormat& format, void *buf) const
 {
-    if (!m_qtMimeData.hasFormat(format.m_MimeType))
+    if (!m_qtMimeData->hasFormat(wxQtConvertString(format.m_MimeType)))
         return false;
 
-    QByteArray data = m_qtMimeData.data( format.m_MimeType ).data();
+    QByteArray data = m_qtMimeData->data( wxQtConvertString(format.m_MimeType) ).data();
     memcpy(buf, data.constData(), data.size());
     return true;
 }
@@ -165,7 +174,7 @@ bool wxDataObject::GetDataHere(const wxDataFormat& format, void *buf) const
 bool wxDataObject::SetData(const wxDataFormat& format, size_t len, const void * buf)
 {
     QByteArray bytearray((const char*)buf, len);
-    m_qtMimeData.setData(format.m_MimeType, bytearray);
+    m_qtMimeData->setData(wxQtConvertString(format.m_MimeType), bytearray);
 
     return true;
 }
diff --git src/qt/dc.cpp src/qt/dc.cpp
index d1996b5..98c21fa 100644
--- src/qt/dc.cpp
+++ src/qt/dc.cpp
@@ -13,6 +13,8 @@
 #endif
 
 #include <QtGui/QBitmap>
+#include <QtGui/QPen>
+#include <QtGui/QPainter>
 
 #ifndef WX_PRECOMP
     #include "wx/icon.h"
@@ -24,6 +26,8 @@
 #include "wx/qt/private/converter.h"
 #include "wx/qt/private/utils.h"
 
+#include <QtGui/QScreen>
+#include <QtWidgets/QApplication>
 
 static void SetPenColour( QPainter *qtPainter, QColor col )
 {
@@ -45,6 +49,8 @@ wxQtDCImpl::wxQtDCImpl( wxDC *owner )
     m_clippingRegion = new wxRegion;
     m_qtImage = NULL;
     m_rasterColourOp = wxQtNONE;
+    m_qtPenColor = new QColor;
+    m_qtBrushColor = new QColor;
     m_ok = true;
 }
 
@@ -58,8 +64,10 @@ wxQtDCImpl::~wxQtDCImpl()
         }
         delete m_qtPainter;
     }
-    if ( m_clippingRegion != NULL )
-        delete m_clippingRegion;
+
+    delete m_clippingRegion;
+    delete m_qtPenColor;
+    delete m_qtBrushColor;
 }
 
 void wxQtDCImpl::QtPreparePainter( )
@@ -91,7 +99,7 @@ void wxQtDCImpl::QtPreparePainter( )
     }
     else
     {
-        wxLogDebug(wxT("wxQtDCImpl::QtPreparePainter not active!"));
+//        wxLogDebug(wxT("wxQtDCImpl::QtPreparePainter not active!"));
     }
 }
 
@@ -124,7 +132,11 @@ int wxQtDCImpl::GetDepth() const
 
 wxSize wxQtDCImpl::GetPPI() const
 {
-    return wxSize(m_qtPainter->device()->logicalDpiX(), m_qtPainter->device()->logicalDpiY());
+    QScreen *srn = QApplication::screens().at(0);
+    if (!srn)
+        return wxSize(m_qtPainter->device()->logicalDpiX(), m_qtPainter->device()->logicalDpiY());
+    qreal dotsPerInch = srn->logicalDotsPerInch();
+    return wxSize(round(dotsPerInch), round(dotsPerInch));
 }
 
 void wxQtDCImpl::SetFont(const wxFont& font)
@@ -152,7 +164,7 @@ void wxQtDCImpl::SetBrush(const wxBrush& brush)
     {
         // Use a monochrome mask: use foreground color for the mask
         QBrush b(brush.GetHandle());
-        b.setColor(m_textForegroundColour.GetHandle());
+        b.setColor(m_textForegroundColour.GetQColor());
         b.setTexture(b.texture().mask());
         m_qtPainter->setBrush(b);
     }
@@ -192,6 +204,10 @@ void wxQtDCImpl::SetBackgroundMode(int mode)
     m_backgroundMode = mode;
 }
 
+#include <QtGui/QPen>
+#include <QtGui/QPainter>
+#include <QtGui/QScreen>
+#include <QtWidgets/QApplication>
 
 #if wxUSE_PALETTE
 void wxQtDCImpl::SetPalette(const wxPalette& WXUNUSED(palette))
@@ -279,8 +295,8 @@ void wxQtDCImpl::SetLogicalFunction(wxRasterOperationMode function)
         m_rasterColourOp = rasterColourOp;
 
         // Restore original colours and apply new mode
-        SetPenColour( m_qtPainter, m_qtPenColor );
-        SetBrushColour( m_qtPainter, m_qtPenColor );
+        SetPenColour( m_qtPainter, *m_qtPenColor );
+        SetBrushColour( m_qtPainter, *m_qtPenColor );
 
         ApplyRasterColourOp();
     }
@@ -289,8 +305,8 @@ void wxQtDCImpl::SetLogicalFunction(wxRasterOperationMode function)
 void wxQtDCImpl::ApplyRasterColourOp()
 {
     // Save colours
-    m_qtPenColor = m_qtPainter->pen().color();
-    m_qtBrushColor = m_qtPainter->brush().color();
+    *m_qtPenColor = m_qtPainter->pen().color();
+    *m_qtBrushColor = m_qtPainter->brush().color();
 
     // Apply op
     switch ( m_rasterColourOp )
@@ -304,8 +320,8 @@ void wxQtDCImpl::ApplyRasterColourOp()
             SetBrushColour( m_qtPainter, QColor( Qt::black ) );
             break;
         case wxQtINVERT:
-            SetPenColour( m_qtPainter, QColor( ~m_qtPenColor.rgb() ) );
-            SetBrushColour( m_qtPainter, QColor( ~m_qtBrushColor.rgb() ) );
+            SetPenColour( m_qtPainter, QColor( ~m_qtPenColor->rgb() ) );
+            SetBrushColour( m_qtPainter, QColor( ~m_qtBrushColor->rgb() ) );
             break;
         case wxQtNONE:
             // No op
@@ -332,9 +348,11 @@ void wxQtDCImpl::DoGetTextExtent(const wxString& string,
                              wxCoord *externalLeading,
                              const wxFont *theFont ) const
 {
-    QFont f = m_qtPainter->font();
+    QFont f;
     if (theFont != NULL)
         f = theFont->GetHandle();
+    else
+        f = m_font.GetHandle();
 
     QFontMetrics metrics(f);
     if (x != NULL || y != NULL)
@@ -579,7 +597,7 @@ void wxQtDCImpl::DoDrawEllipse(wxCoord x, wxCoord y,
         // Save pen/brush
         savedBrush = m_qtPainter->brush();
         // Fill with text background color ("no fill" like in wxGTK):
-        m_qtPainter->setBrush(QBrush(m_textBackgroundColour.GetHandle()));
+        m_qtPainter->setBrush(QBrush(m_textBackgroundColour.GetQColor()));
     }
 
     // Draw
@@ -624,8 +642,8 @@ void wxQtDCImpl::DoDrawBitmap(const wxBitmap &bmp, wxCoord x, wxCoord y,
         QPen savedPen = m_qtPainter->pen();
         
         //Use text colors
-        m_qtPainter->setBackground(QBrush(m_textBackgroundColour.GetHandle()));
-        m_qtPainter->setPen(QPen(m_textForegroundColour.GetHandle()));
+        m_qtPainter->setBackground(QBrush(m_textBackgroundColour.GetQColor()));
+        m_qtPainter->setPen(QPen(m_textForegroundColour.GetQColor()));
 
         //Draw
         m_qtPainter->drawPixmap(x, y, pix);
@@ -633,21 +651,11 @@ void wxQtDCImpl::DoDrawBitmap(const wxBitmap &bmp, wxCoord x, wxCoord y,
         //Restore saved settings
         m_qtPainter->setBackground(savedBrush);
         m_qtPainter->setPen(savedPen);
-    } else {
-        if ( !useMask && bmp.GetMask() )
-        {
-            // Temporarly disable mask
-            QBitmap mask;
-            mask = pix.mask();
-            pix.setMask( QBitmap() );
-
-            // Draw
-            m_qtPainter->drawPixmap(x, y, pix);
-
-            // Restore saved mask
-            pix.setMask( mask );
-        }
-        else
+    }
+    else
+    {
+            if ( useMask && bmp.GetMask() && bmp.GetMask()->GetHandle() )
+                pix.setMask(*bmp.GetMask()->GetHandle());
             m_qtPainter->drawPixmap(x, y, pix);
     }
 }
@@ -655,7 +663,7 @@ void wxQtDCImpl::DoDrawBitmap(const wxBitmap &bmp, wxCoord x, wxCoord y,
 void wxQtDCImpl::DoDrawText(const wxString& text, wxCoord x, wxCoord y)
 {
     QPen savedPen = m_qtPainter->pen();
-    m_qtPainter->setPen(QPen(m_textForegroundColour.GetHandle()));
+    m_qtPainter->setPen(QPen(m_textForegroundColour.GetQColor()));
 
     // Disable logical function
     QPainter::CompositionMode savedOp = m_qtPainter->compositionMode();
@@ -669,7 +677,7 @@ void wxQtDCImpl::DoDrawText(const wxString& text, wxCoord x, wxCoord y)
         QBrush savedBrush = m_qtPainter->background();
 
         //Use text colors
-        m_qtPainter->setBackground(QBrush(m_textBackgroundColour.GetHandle()));
+        m_qtPainter->setBackground(QBrush(m_textBackgroundColour.GetQColor()));
 
         //Draw
         m_qtPainter->drawText(x, y, 1, 1, Qt::TextDontClip, wxQtConvertString(text));
@@ -698,7 +706,7 @@ void wxQtDCImpl::DoDrawRotatedText(const wxString& text,
     m_qtPainter->rotate(-angle);
 
     QPen savedPen = m_qtPainter->pen();
-    m_qtPainter->setPen(QPen(m_textForegroundColour.GetHandle()));
+    m_qtPainter->setPen(QPen(m_textForegroundColour.GetQColor()));
 
     // Disable logical function
     QPainter::CompositionMode savedOp = m_qtPainter->compositionMode();
@@ -712,7 +720,7 @@ void wxQtDCImpl::DoDrawRotatedText(const wxString& text,
         QBrush savedBrush = m_qtPainter->background();
         
         //Use text colors
-        m_qtPainter->setBackground(QBrush(m_textBackgroundColour.GetHandle()));
+        m_qtPainter->setBackground(QBrush(m_textBackgroundColour.GetQColor()));
         
         //Draw
         m_qtPainter->drawText(x, y, 1, 1, Qt::TextDontClip, wxQtConvertString(text));
@@ -742,7 +750,7 @@ bool wxQtDCImpl::DoBlit(wxCoord xdest, wxCoord ydest,
 {
     wxQtDCImpl *implSource = (wxQtDCImpl*)source->GetImpl();
     
-    QImage *qtSource = implSource->m_qtImage;
+    QImage *qtSource = implSource->GetQImage();
     
     // Not a CHECK on purpose
     if ( !qtSource )
diff --git src/qt/dcclient.cpp src/qt/dcclient.cpp
index 0a69244..696b69e 100644
--- src/qt/dcclient.cpp
+++ src/qt/dcclient.cpp
@@ -22,6 +22,8 @@
 #include "wx/dcclient.h"
 #include "wx/qt/dcclient.h"
 
+#include <QtWidgets/QScrollArea>
+#include <QtGui/QPainter>
 
 //##############################################################################
 
@@ -29,6 +31,7 @@ wxWindowDCImpl::wxWindowDCImpl( wxDC *owner )
     : wxQtDCImpl( owner )
 {
     m_window = NULL;
+    m_qtImage = NULL;
     m_ok = false;
     m_qtPainter = new QPainter();
 }
@@ -37,6 +40,7 @@ wxWindowDCImpl::wxWindowDCImpl( wxDC *owner, wxWindow *win )
     : wxQtDCImpl( owner )
 {
     m_window = win;
+    m_qtImage = NULL;
     m_qtPainter = m_window->QtGetPainter();
     // if we're not inside a Paint event, painter will invalid
     m_ok = m_qtPainter != NULL;
diff --git src/qt/dcmemory.cpp src/qt/dcmemory.cpp
index dc1aeae..3f85c3e 100644
--- src/qt/dcmemory.cpp
+++ src/qt/dcmemory.cpp
@@ -11,6 +11,8 @@
 #include "wx/dcmemory.h"
 #include "wx/qt/dcmemory.h"
 
+#include <QtGui/QPainter>
+
 wxMemoryDCImpl::wxMemoryDCImpl( wxMemoryDC *owner )
     : wxQtDCImpl( owner )
 {
@@ -33,6 +35,7 @@ wxMemoryDCImpl::wxMemoryDCImpl( wxMemoryDC *owner, wxDC *WXUNUSED(dc) )
 {
     m_qtImage = NULL;
     m_ok = false;
+    m_qtPainter = new QPainter();
 }
 
 wxMemoryDCImpl::~wxMemoryDCImpl()
@@ -67,8 +70,12 @@ void wxMemoryDCImpl::DoSelect( const wxBitmap& bitmap )
 
     m_selected = bitmap;
     if ( bitmap.IsOk() && !bitmap.GetHandle()->isNull() ) {
+        QPixmap pixmap(*bitmap.GetHandle());
+        // apply mask before converting to image
+        if ( bitmap.GetMask() && bitmap.GetMask()->GetHandle() )
+            pixmap.setMask(*bitmap.GetMask()->GetHandle());
         // create the intermediate image for the pixmap:
-        m_qtImage = new QImage( bitmap.GetHandle()->toImage() );
+        m_qtImage = new QImage( pixmap.toImage() );
         // start drawing on the intermediary device:
         m_ok = m_qtPainter->begin( m_qtImage );
 
@@ -78,6 +85,13 @@ void wxMemoryDCImpl::DoSelect( const wxBitmap& bitmap )
     }
 }
 
+wxBitmap wxMemoryDCImpl::DoGetAsBitmap(const wxRect *subrect) const
+{
+    if ( !subrect )
+        return m_selected;
+    return m_selected.GetSubBitmap(*subrect);
+}
+
 const wxBitmap& wxMemoryDCImpl::GetSelectedBitmap() const
 {
     return m_selected;
diff --git src/qt/dcscreen.cpp src/qt/dcscreen.cpp
index b6e2adf..dd0e6f1 100644
--- src/qt/dcscreen.cpp
+++ src/qt/dcscreen.cpp
@@ -21,7 +21,7 @@ wxIMPLEMENT_ABSTRACT_CLASS(wxScreenDCImpl, wxWindowDCImpl);
 wxScreenDCImpl::wxScreenDCImpl( wxScreenDC *owner )
     : wxWindowDCImpl( owner )
 {
-    m_qtImage = new QImage(QApplication::primaryScreen()->grabWindow(QApplication::desktop()->winId()).toImage());
+    m_qtImage = NULL;
 }
 
 wxScreenDCImpl::~wxScreenDCImpl( )
@@ -33,3 +33,20 @@ void wxScreenDCImpl::DoGetSize(int *width, int *height) const
 {
     wxDisplaySize(width, height);
 }
+
+bool wxScreenDCImpl::DoGetPixel(wxCoord x, wxCoord y, wxColour *col) const
+{
+//    const_cast<wxScreenDCImpl*>(this)->GetQImage();
+//    return wxQtDCImpl::DoGetPixel(x, y, col);
+    x = y = 0;
+    col = 0;
+    return false;
+}
+
+// defered allocation for blit
+QImage *wxScreenDCImpl::GetQImage()
+{
+    if ( !m_qtImage )
+        m_qtImage = new QImage(QApplication::primaryScreen()->grabWindow(QApplication::desktop()->winId()).toImage());
+    return m_qtImage;
+}
diff --git src/qt/dialog.cpp src/qt/dialog.cpp
index 3d655cb..6c99788 100644
--- src/qt/dialog.cpp
+++ src/qt/dialog.cpp
@@ -12,6 +12,7 @@
 #include "wx/qt/private/utils.h"
 #include "wx/qt/private/winevent.h"
 
+#include <QtWidgets/QDialog>
 
 class wxQtDialog : public wxQtEventSignalHandler< QDialog, wxDialog >
 {
@@ -58,32 +59,38 @@ bool wxDialog::Create( wxWindow *parent, wxWindowID id,
     style |= wxTAB_TRAVERSAL;
 
     m_qtWindow = new wxQtDialog( parent, this );
+    
     PostCreation();
+
     return wxTopLevelWindow::Create( parent, id, title, pos, size, style, name );
 }
 
 int wxDialog::ShowModal()
 {
     wxCHECK_MSG( GetHandle() != NULL, -1, "Invalid dialog" );
-    
-    return GetHandle()->exec() ? wxID_OK : wxID_CANCEL;
+
+    bool ret = GetDialogHandle()->exec();
+    if ( GetReturnCode() == 0 )
+        return ret ? wxID_OK : wxID_CANCEL;
+    return GetReturnCode();
 }
 
 void wxDialog::EndModal(int retCode)
 {
-    wxCHECK_RET( GetHandle() != NULL, "Invalid dialog" );
-    
-    GetHandle()->done( retCode );
+    wxCHECK_RET( GetDialogHandle() != NULL, "Invalid dialog" );
+
+    SetReturnCode(retCode);
+    GetDialogHandle()->done( QDialog::Accepted );
 }
 
 bool wxDialog::IsModal() const
 {
-    wxCHECK_MSG( GetHandle() != NULL, false, "Invalid dialog" );
+    wxCHECK_MSG( GetDialogHandle() != NULL, false, "Invalid dialog" );
 
-    return GetHandle()->isModal();
+    return GetDialogHandle()->isModal();
 }
 
-QDialog *wxDialog::GetHandle() const
+QDialog *wxDialog::GetDialogHandle() const
 {
     return static_cast<QDialog*>(m_qtWindow);
 }
diff --git src/qt/evtloop.cpp src/qt/evtloop.cpp
index 87561e3..a0f1d54 100644
--- src/qt/evtloop.cpp
+++ src/qt/evtloop.cpp
@@ -16,6 +16,23 @@
 #include <QtCore/QCoreApplication>
 #include <QtCore/QAbstractEventDispatcher>
 #include <QtCore/QSocketNotifier>
+#include <QtCore/QTimer>
+
+#include <QtWidgets/QApplication>
+
+class wxQtIdleTimer : public QTimer
+{
+
+public:
+    wxQtIdleTimer( wxQtEventLoopBase *eventLoop );
+    virtual bool eventFilter( QObject * watched, QEvent * event  );
+
+private:
+    void idle();
+
+private:
+    wxQtEventLoopBase *m_eventLoop;
+};
 
 wxQtIdleTimer::wxQtIdleTimer( wxQtEventLoopBase *eventLoop )
 {
@@ -115,7 +132,9 @@ int wxQtEventLoopBase::DispatchTimeout(unsigned long timeout)
 
 void wxQtEventLoopBase::WakeUp()
 {
-    QAbstractEventDispatcher::instance()->wakeUp();
+    QAbstractEventDispatcher *instance = QAbstractEventDispatcher::instance();
+    if ( instance )
+        instance->wakeUp();
 }
 
 void wxQtEventLoopBase::DoYieldFor(long eventsToProcess)
@@ -224,7 +243,7 @@ wxEventLoopSource *wxQtEventLoopBase::AddSourceForFD(int fd, wxEventLoopSourceHa
 {
     wxGUIAppTraits *AppTraits = dynamic_cast<wxGUIAppTraits *>(wxApp::GetTraitsIfExists());
 
-    if(AppTraits)
+    if ( AppTraits )
         return AppTraits->GetEventLoopSourcesManager()->AddSourceForFD(fd, handler, flags);
 
     return NULL;
diff --git src/qt/filedlg.cpp src/qt/filedlg.cpp
index d316130..101a1cf 100644
--- src/qt/filedlg.cpp
+++ src/qt/filedlg.cpp
@@ -105,7 +105,7 @@ wxString wxFileDialog::GetPath() const
 {
     wxArrayString paths;
     GetPaths(paths);
-    if (paths.size() == 0)
+    if (paths.empty())
         return "";
 
     return paths[0];
@@ -113,7 +113,7 @@ wxString wxFileDialog::GetPath() const
 
 void wxFileDialog::GetPaths(wxArrayString& paths) const
 {
-    QStringList selectedfiles = GetHandle()->selectedFiles();
+    QStringList selectedfiles = GetQFileDialog()->selectedFiles();
     foreach (QString file, selectedfiles)
         paths.Add(wxQtConvertString(file));
 }
@@ -122,7 +122,7 @@ wxString wxFileDialog::GetFilename() const
 {
     wxArrayString filenames;
     GetFilenames(filenames);
-    if(filenames.size() == 0)
+    if ( filenames.empty() )
         return "";
 
     return filenames[0];
@@ -130,7 +130,7 @@ wxString wxFileDialog::GetFilename() const
 
 void wxFileDialog::GetFilenames(wxArrayString& files) const
 {
-    QStringList selectedfiles = GetHandle()->selectedFiles();
+    QStringList selectedfiles = GetQFileDialog()->selectedFiles();
     foreach (QString file, selectedfiles )
     {
         wxFileName fn = wxQtConvertString(file);
@@ -141,9 +141,9 @@ void wxFileDialog::GetFilenames(wxArrayString& files) const
 int wxFileDialog::GetFilterIndex() const
 {
     int index = 0;
-    foreach (QString filter, GetHandle()->nameFilters())
+    foreach (QString filter, GetQFileDialog()->nameFilters())
     {
-        if (filter == GetHandle()->selectedNameFilter())
+        if (filter == GetQFileDialog()->selectedNameFilter())
             return index;
         index++;
     }
@@ -153,17 +153,17 @@ int wxFileDialog::GetFilterIndex() const
 
 void wxFileDialog::SetMessage(const wxString& message)
 {
-    GetHandle()->setLabelText(QFileDialog::LookIn, wxQtConvertString(message));
+    GetQFileDialog()->setLabelText(QFileDialog::LookIn, wxQtConvertString(message));
 }
 
 void wxFileDialog::SetPath(const wxString& path)
 {
-    GetHandle()->selectFile(wxQtConvertString(path));
+    GetQFileDialog()->selectFile(wxQtConvertString(path));
 }
 
 void wxFileDialog::SetDirectory(const wxString& dir)
 {
-    GetHandle()->setDirectory(wxQtConvertString(dir));
+    GetQFileDialog()->setDirectory(wxQtConvertString(dir));
 }
 
 void wxFileDialog::SetFilename(const wxString& name)
@@ -173,19 +173,19 @@ void wxFileDialog::SetFilename(const wxString& name)
 
 void wxFileDialog::SetWildcard(const wxString& wildCard)
 {
-    GetHandle()->setNameFilter(wxQtConvertString(wildCard));
+    GetQFileDialog()->setNameFilter(wxQtConvertString(wildCard));
 }
 
 void wxFileDialog::SetFilterIndex(int filterIndex)
 {
-    QStringList filters = GetHandle()->nameFilters();
+    QStringList filters = GetQFileDialog()->nameFilters();
     if (filterIndex < 0 || filterIndex >= filters.size())
         return;
 
-    GetHandle()->setNameFilter(filters.at(filterIndex));
+    GetQFileDialog()->setNameFilter(filters.at(filterIndex));
 }
 
-QFileDialog *wxFileDialog::GetHandle() const
+QFileDialog *wxFileDialog::GetQFileDialog() const
 {
     return static_cast<QFileDialog *>(m_qtWindow);
 }
@@ -237,7 +237,7 @@ bool wxDirDialog::Create(wxWindow *parent,
 
 wxString wxDirDialog::GetPath() const
 {
-    QStringList selectedfiles = GetHandle()->selectedFiles();
+    QStringList selectedfiles = GetQFileDialog()->selectedFiles();
     if (selectedfiles.size() > 0)
         return wxQtConvertString(selectedfiles.first());
 
@@ -246,10 +246,10 @@ wxString wxDirDialog::GetPath() const
 
 void wxDirDialog::SetPath(const wxString& path)
 {
-    GetHandle()->selectFile(wxQtConvertString(path));
+    GetQFileDialog()->selectFile(wxQtConvertString(path));
 }
 
-QFileDialog *wxDirDialog::GetHandle() const
+QFileDialog *wxDirDialog::GetQFileDialog() const
 {
     return static_cast<QFileDialog *>(m_qtWindow);
 }
diff --git src/qt/fontdlg.cpp src/qt/fontdlg.cpp
index fa5a0fc..4149d0d 100644
--- src/qt/fontdlg.cpp
+++ src/qt/fontdlg.cpp
@@ -11,6 +11,8 @@
 #include "wx/qt/private/winevent.h"
 #include "wx/fontdlg.h"
 
+#include <QtWidgets/QFontDialog>
+
 class wxQtFontDialog : public wxQtEventSignalHandler< QFontDialog, wxFontDialog >
 {
 public:
@@ -31,7 +33,7 @@ wxIMPLEMENT_DYNAMIC_CLASS(wxFontDialog, wxDialog);
 bool wxFontDialog::DoCreate(wxWindow *parent)
 {
     m_qtWindow = new wxQtFontDialog( parent, this );
-    GetHandle()->setCurrentFont(m_fontData.GetInitialFont().GetHandle());
+    static_cast<QFontDialog*>(m_qtWindow)->setCurrentFont(m_fontData.GetInitialFont().GetHandle());
     return wxFontDialogBase::DoCreate(parent);
 }
 
diff --git src/qt/frame.cpp src/qt/frame.cpp
index 5f39c9f..34572ba 100644
--- src/qt/frame.cpp
+++ src/qt/frame.cpp
@@ -12,8 +12,6 @@
     #pragma hdrstop
 #endif
 
-#include <QtWidgets/QScrollArea>
-
 #ifndef WX_PRECOMP
     #include "wx/menu.h"
     #include "wx/toolbar.h"
@@ -24,6 +22,9 @@
 #include "wx/qt/private/converter.h"
 #include "wx/qt/private/winevent.h"
 
+#include <QtWidgets/QScrollArea>
+#include <QtWidgets/QMainWindow>
+#include <QtWidgets/QMenuBar>
 
 class wxQtMainWindow : public wxQtEventSignalHandler< QMainWindow, wxFrame >
 {
@@ -31,6 +32,7 @@ public:
     wxQtMainWindow( wxWindow *parent, wxFrame *handler );
 
 private:
+    virtual bool focusNextPrevChild(bool) wxOVERRIDE { return false; }
 };
 
 // Central widget helper (container to show scroll bars and receive events):
@@ -55,7 +57,7 @@ wxFrame::wxFrame( wxWindow *parent, wxWindowID id, const wxString& title,
 wxFrame::~wxFrame()
 {
     // central widget should be deleted by qt when the main window is destroyed
-    QtStoreWindowPointer( GetHandle()->centralWidget(), NULL );
+    QtStoreWindowPointer( GetQMainWindow()->centralWidget(), NULL );
 }
 
 bool wxFrame::Create( wxWindow *parent, wxWindowID id, const wxString& title,
@@ -66,7 +68,7 @@ bool wxFrame::Create( wxWindow *parent, wxWindowID id, const wxString& title,
     // TODO: Could we use a wxPanel as the central widget? If so then we could
     // remove wxWindow::QtReparent.
 
-    GetHandle()->setCentralWidget( new wxQtCentralWidget( parent, this ) );
+    GetQMainWindow()->setCentralWidget( new wxQtCentralWidget( parent, this ) );
 
     PostCreation();
 
@@ -82,13 +84,13 @@ void wxFrame::SetMenuBar( wxMenuBar *menuBar )
         wxCHECK_RET( menuBar->GetHandle(),
                      "Using a replaced menu bar is not supported in wxQT");
         // Warning: Qt main window takes ownership of the QMenuBar pointer:
-        GetHandle()->setMenuBar( menuBar->GetHandle() );
+        GetQMainWindow()->setMenuBar( menuBar->GetQMenuBar() );
     }
     else
     {
         // Creating an empty menu bar should hide it and free the previous:
         QMenuBar *qmenubar = new QMenuBar(GetHandle());
-        GetHandle()->setMenuBar( qmenubar );
+        GetQMainWindow()->setMenuBar( qmenubar );
     }
     wxFrameBase::SetMenuBar( menuBar );
 }
@@ -99,14 +101,14 @@ void wxFrame::SetStatusBar( wxStatusBar *statusBar )
     // TODO: add a mechanism like Detach in menus to avoid issues
     if ( statusBar != NULL )
     {
-        GetHandle()->setStatusBar( statusBar->GetHandle() );
+        GetQMainWindow()->setStatusBar( statusBar->GetQStatusBar() );
         // Update statusbar sizes now that it has a size
         statusBar->Refresh();
     }
     else
     {
         // Remove the current status bar
-        GetHandle()->setStatusBar(NULL);
+        GetQMainWindow()->setStatusBar(NULL);
     }
     wxFrameBase::SetStatusBar( statusBar );
 }
@@ -121,11 +123,11 @@ void wxFrame::SetToolBar(wxToolBar *toolbar)
         if (toolbar->HasFlag(wxTB_TOP))    area |= Qt::TopToolBarArea;
         if (toolbar->HasFlag(wxTB_BOTTOM)) area |= Qt::BottomToolBarArea;
 
-        GetHandle()->addToolBar((Qt::ToolBarArea)area, toolbar->GetHandle());
+        GetQMainWindow()->addToolBar((Qt::ToolBarArea)area, toolbar->GetQToolBar());
     }
     else if ( m_frameToolBar != NULL )
     {
-        GetHandle()->removeToolBar(m_frameToolBar->GetHandle());
+        GetQMainWindow()->removeToolBar(m_frameToolBar->GetQToolBar());
     }
     wxFrameBase::SetToolBar( toolbar );
 }
@@ -134,7 +136,7 @@ void wxFrame::SetWindowStyleFlag( long style )
 {
     wxWindow::SetWindowStyleFlag( style );
 
-    Qt::WindowFlags qtFlags = GetHandle()->windowFlags();
+    Qt::WindowFlags qtFlags = GetQMainWindow()->windowFlags();
 
     if ( HasFlag( wxFRAME_TOOL_WINDOW ) )
     {
@@ -142,14 +144,14 @@ void wxFrame::SetWindowStyleFlag( long style )
         qtFlags |= Qt::Tool;
     }
 
-    GetHandle()->setWindowFlags( qtFlags );
+    GetQMainWindow()->setWindowFlags( qtFlags );
 }
 
 void wxFrame::AddChild( wxWindowBase *child )
 {
     // Make sure all children are children of the central widget:
 
-    QtReparent( child->GetHandle(), GetHandle()->centralWidget() );
+    QtReparent( child->GetHandle(), GetQMainWindow()->centralWidget() );
 
     wxFrameBase::AddChild( child );
 }
@@ -159,9 +161,9 @@ void wxFrame::RemoveChild( wxWindowBase *child )
     wxFrameBase::RemoveChild( child );
 }
 
-QAbstractScrollArea *wxFrame::QtGetScrollBarsContainer() const
+QScrollArea *wxFrame::QtGetScrollBarsContainer() const
 {
-    return dynamic_cast <QAbstractScrollArea *> (GetHandle()->centralWidget() );
+    return dynamic_cast <QScrollArea *> (GetQMainWindow()->centralWidget() );
 }
 
 void wxFrame::DoGetClientSize(int *width, int *height) const
@@ -178,6 +180,11 @@ void wxFrame::DoGetClientSize(int *width, int *height) const
     }
 }
 
+QMainWindow *wxFrame::GetQMainWindow() const
+{
+    return static_cast<QMainWindow*>(m_qtWindow);
+}
+
 //=============================================================================
 
 wxQtMainWindow::wxQtMainWindow( wxWindow *parent, wxFrame *handler )
diff --git src/qt/gauge.cpp src/qt/gauge.cpp
index da3bbc9..ffa1c09 100644
--- src/qt/gauge.cpp
+++ src/qt/gauge.cpp
@@ -12,6 +12,7 @@
 #include "wx/qt/private/converter.h"
 #include "wx/qt/private/winevent.h"
 
+#include <QtWidgets/QProgressBar>
 
 class wxQtProgressBar : public wxQtEventSignalHandler< QProgressBar, wxGauge >
 {
@@ -62,7 +63,7 @@ bool wxGauge::Create(wxWindow *parent,
 }
 
 
-QProgressBar *wxGauge::GetHandle() const
+QWidget *wxGauge::GetHandle() const
 {
     return m_qtProgressBar;
 }
diff --git src/qt/glcanvas.cpp src/qt/glcanvas.cpp
index 1bb3feb..e690d7b 100644
--- src/qt/glcanvas.cpp
+++ src/qt/glcanvas.cpp
@@ -12,6 +12,8 @@
 #include "wx/qt/private/winevent.h"
 #include "wx/glcanvas.h"
 
+#include <QtOpenGL/QGLWidget>
+
 class wxQtGLWidget : public wxQtEventSignalHandler< QGLWidget, wxGLCanvas >
 {
 public:
@@ -64,6 +66,263 @@ void wxQtGLWidget::paintGL()
     EmitEvent(event);
 }
 
+// ----------------------------------------------------------------------------
+// wxGLContextAttrs: OpenGL rendering context attributes
+// ----------------------------------------------------------------------------
+// GLX specific values
+
+wxGLContextAttrs& wxGLContextAttrs::CoreProfile()
+{
+//    AddAttribBits(GLX_CONTEXT_PROFILE_MASK_ARB,
+//                  GLX_CONTEXT_CORE_PROFILE_BIT_ARB);
+    SetNeedsARB();
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::MajorVersion(int val)
+{
+    if ( val > 0 )
+    {
+        if ( val >= 3 )
+            SetNeedsARB();
+    }
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::MinorVersion(int val)
+{
+    if ( val >= 0 )
+    {
+    }
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::CompatibilityProfile()
+{
+    SetNeedsARB();
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::ForwardCompatible()
+{
+    SetNeedsARB();
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::ES2()
+{
+    SetNeedsARB();
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::DebugCtx()
+{
+    SetNeedsARB();
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::Robust()
+{
+    SetNeedsARB();
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::NoResetNotify()
+{
+    SetNeedsARB();
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::LoseOnReset()
+{
+    SetNeedsARB();
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::ResetIsolation()
+{
+    SetNeedsARB();
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::ReleaseFlush(int val)
+{
+    SetNeedsARB();
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::PlatformDefaults()
+{
+    renderTypeRGBA = true;
+    return *this;
+}
+
+void wxGLContextAttrs::EndList()
+{
+//    AddAttribute(None);
+}
+
+// ----------------------------------------------------------------------------
+// wxGLAttributes: Visual/FBconfig attributes
+// ----------------------------------------------------------------------------
+// GLX specific values
+
+//   Different versions of GLX API use rather different attributes lists, see
+//   the following URLs:
+//
+//   - <= 1.2: http://www.opengl.org/sdk/docs/man/xhtml/glXChooseVisual.xml
+//   - >= 1.3: http://www.opengl.org/sdk/docs/man/xhtml/glXChooseFBConfig.xml
+//
+//   Notice in particular that
+//   - GLX_RGBA is boolean attribute in the old version of the API but a
+//     value of GLX_RENDER_TYPE in the new one
+//   - Boolean attributes such as GLX_DOUBLEBUFFER don't take values in the
+//     old version but must be followed by True or False in the new one.
+
+wxGLAttributes& wxGLAttributes::RGBA()
+{
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::BufferSize(int val)
+{
+    if ( val >= 0 )
+    {
+    }
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::Level(int val)
+{
+//    AddAttribute(GLX_LEVEL);
+    AddAttribute(val);
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::DoubleBuffer()
+{
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::Stereo()
+{
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::AuxBuffers(int val)
+{
+    if ( val >= 0 )
+    {
+    }
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::MinRGBA(int mRed, int mGreen, int mBlue, int mAlpha)
+{
+    if ( mRed >= 0)
+    {
+    }
+    if ( mGreen >= 0)
+    {
+    }
+    if ( mBlue >= 0)
+    {
+    }
+    if ( mAlpha >= 0)
+    {
+    }
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::Depth(int val)
+{
+    if ( val >= 0 )
+    {
+    }
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::Stencil(int val)
+{
+    if ( val >= 0 )
+    {
+    }
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::MinAcumRGBA(int mRed, int mGreen, int mBlue, int mAlpha)
+{
+    if ( mRed >= 0)
+    {
+    }
+    if ( mGreen >= 0)
+    {
+    }
+    if ( mBlue >= 0)
+    {
+    }
+    if ( mAlpha >= 0)
+    {
+    }
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::SampleBuffers(int val)
+{
+#ifdef GLX_SAMPLE_BUFFERS_ARB
+    if ( val >= 0 && wxGLCanvasX11::IsGLXMultiSampleAvailable() )
+    {
+        AddAttribute(GLX_SAMPLE_BUFFERS_ARB);
+        AddAttribute(val);
+    }
+#endif
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::Samplers(int val)
+{
+#ifdef GLX_SAMPLES_ARB
+    if ( val >= 0 && wxGLCanvasX11::IsGLXMultiSampleAvailable() )
+    {
+        AddAttribute(GLX_SAMPLES_ARB);
+        AddAttribute(val);
+    }
+#endif
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::FrameBuffersRGB()
+{
+//    AddAttribute(GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB);
+//    AddAttribute(True);
+    return *this;
+}
+
+void wxGLAttributes::EndList()
+{
+}
+
+wxGLAttributes& wxGLAttributes::PlatformDefaults()
+{
+    // No GLX specific values
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::Defaults()
+{
+    RGBA().DoubleBuffer();
+//    if ( wxGLCanvasX11::GetGLXVersion() < 13 )
+//        Depth(1).MinRGBA(1, 1, 1, 0);
+//    else
+        Depth(16).SampleBuffers(1).Samplers(4);
+    return *this;
+}
+
+void wxGLAttributes::AddDefaultsForWXBefore31()
+{
+    Defaults();
+}
+
 //---------------------------------------------------------------------------
 // wxGlContext
 //---------------------------------------------------------------------------
@@ -125,7 +384,7 @@ bool wxGLCanvas::Create(wxWindow *parent,
 
 bool wxGLCanvas::SwapBuffers()
 {
-    GetHandle()->swapBuffers();
+    static_cast<QGLWidget *>(m_qtWindow)->swapBuffers();
     return true;
 }
 
@@ -229,7 +488,7 @@ bool wxGLCanvas::ConvertWXAttrsToQtGL(const int *wxattrs, QGLFormat &format)
         }
 
         if ( !isBoolAttr ) {
-            if(!v)
+            if ( !v )
                 return false; // zero parameter
             arg++;
         }
diff --git src/qt/listbox.cpp src/qt/listbox.cpp
index 1d63f39..9723399 100644
--- src/qt/listbox.cpp
+++ src/qt/listbox.cpp
@@ -11,6 +11,7 @@
 #include "wx/listbox.h"
 #include "wx/qt/private/winevent.h"
 
+#include <QtWidgets/QListWidget>
 
 class wxQtListWidget : public wxQtEventSignalHandler< QListWidget, wxListBox >
 {
@@ -157,11 +158,6 @@ void wxListBox::SetString(unsigned int n, const wxString& WXUNUSED(s))
     }
 }
 
-void wxListBox::SetSelection(int n)
-{
-    return m_qtListWidget->setCurrentRow(n);
-}
-
 int wxListBox::GetSelection() const
 {
     return m_qtListWidget->currentIndex().row();
@@ -225,7 +221,7 @@ void wxListBox::DoDeleteOneItem(unsigned int pos)
     delete item;
 }
 
-QListWidget *wxListBox::GetHandle() const
+QWidget *wxListBox::GetHandle() const
 {
     return m_qtListWidget;
 }
diff --git src/qt/listctrl.cpp src/qt/listctrl.cpp
index fdf6972..7c9c994 100644
--- src/qt/listctrl.cpp
+++ src/qt/listctrl.cpp
@@ -22,6 +22,7 @@
 #include "wx/imaglist.h"
 #include "wx/qt/private/winevent.h"
 
+#include <QtWidgets/QTreeWidget>
 
 class wxQtTreeWidget : public wxQtEventSignalHandler< QTreeWidget, wxListCtrl >
 {
@@ -300,6 +301,8 @@ bool wxListCtrl::GetItem(wxListItem& info) const
 bool wxListCtrl::SetItem(wxListItem& info)
 {
     const long id = info.GetId();
+    if ( id < 0 )
+        return false;
     QTreeWidgetItem *qitem = QtGetItem(id);
     if ( qitem != NULL )
     {
@@ -344,9 +347,9 @@ bool wxListCtrl::SetItem(wxListItem& info)
             if ( info.GetFont().IsOk() )
                 qitem->setFont(col, info.GetFont().GetHandle() );
             if ( info.GetTextColour().IsOk() )
-                qitem->setTextColor(col, info.GetTextColour().GetHandle());
+                qitem->setTextColor(col, info.GetTextColour().GetQColor());
             if ( info.GetBackgroundColour().IsOk() )
-                qitem->setBackgroundColor(col, info.GetBackgroundColour().GetHandle());
+                qitem->setBackgroundColor(col, info.GetBackgroundColour().GetQColor());
         }
         return true;
     }
@@ -916,7 +919,7 @@ int wxListCtrl::OnGetItemColumnImage(long item, long column) const
     return -1;
 }
 
-QTreeWidget *wxListCtrl::GetHandle() const
+QWidget *wxListCtrl::GetHandle() const
 {
     return m_qtTreeWidget;
 }
diff --git src/qt/mdi.cpp src/qt/mdi.cpp
index edfaea9..3655a35 100644
--- src/qt/mdi.cpp
+++ src/qt/mdi.cpp
@@ -14,7 +14,9 @@
 #include "wx/qt/private/utils.h"
 #include "wx/qt/private/converter.h"
 #include "wx/qt/private/winevent.h"
+
 #include <QtWidgets/QMdiArea>
+#include <QtWidgets/QMainWindow>
 
 // Main MDI window helper
 
@@ -69,7 +71,7 @@ bool wxMDIParentFrame::Create(wxWindow *parent,
     if ( !m_clientWindow->CreateClient(this, GetWindowStyleFlag()) )
         return false;
 
-    GetHandle()->setCentralWidget( client->GetHandle() );
+    GetQMainWindow()->setCentralWidget( client->GetHandle() );
 
     PostCreation();
 
@@ -116,7 +118,7 @@ bool wxMDIChildFrame::Create(wxMDIParentFrame *parent,
     if (ok)
     {
         // Add the window to the internal MDI client area:
-        static_cast<QMdiArea*>(parent->GetHandle()->centralWidget())->addSubWindow(GetHandle());
+        static_cast<QMdiArea*>(parent->GetQMainWindow()->centralWidget())->addSubWindow(GetHandle());
     }
     return ok;
 }
diff --git src/qt/menu.cpp src/qt/menu.cpp
index f07668b..a0433d7 100644
--- src/qt/menu.cpp
+++ src/qt/menu.cpp
@@ -12,6 +12,8 @@
 #include "wx/qt/private/utils.h"
 #include "wx/qt/private/converter.h"
 
+#include <QtWidgets/QMenu>
+#include <QtWidgets/QMenuBar>
 
 static void ApplyStyle( QMenu *qtMenu, long style )
 {
@@ -245,7 +247,7 @@ void wxMenuBar::Detach()
     wxMenuBarBase::Detach();
 }
 
-QMenuBar *wxMenuBar::GetHandle() const
+QWidget *wxMenuBar::GetHandle() const
 {
     return m_qtMenuBar;
 }
diff --git src/qt/menuitem.cpp src/qt/menuitem.cpp
index 5d7bac2..eab049e 100644
--- src/qt/menuitem.cpp
+++ src/qt/menuitem.cpp
@@ -15,6 +15,8 @@
 #include "wx/qt/private/converter.h"
 #include "wx/qt/private/winevent.h"
 
+#include <QtWidgets/QAction>
+#include <QtWidgets/QMenuBar>
 
 class wxQtAction : public QAction, public wxQtSignalHandler< wxMenuItem >
 {
diff --git src/qt/msgdlg.cpp src/qt/msgdlg.cpp
index 7b57eb9..b80c004 100644
--- src/qt/msgdlg.cpp
+++ src/qt/msgdlg.cpp
@@ -27,39 +27,40 @@ wxMessageDialog::wxMessageDialog( wxWindow *parent, const wxString& message,
         const wxString& caption, long style, const wxPoint& pos )
     : wxMessageDialogBase( parent, message, caption, style )
 {
-    m_qtWindow = new wxQtMessageDialog( parent, this );
+    wxQtMessageDialog *dlg = new wxQtMessageDialog( parent, this );
+    m_qtWindow = dlg;
 
     // Set properties
     Move( pos );
-    GetHandle()->setText( wxQtConvertString( message ) );
-    GetHandle()->setWindowTitle( wxQtConvertString( caption ) );
+    dlg->setText( wxQtConvertString( message ) );
+    dlg->setWindowTitle( wxQtConvertString( caption ) );
     
     // Apply the style
     SetWindowStyleFlag( style );
 
     // Buttons
     if ( style & wxOK )
-        GetHandle()->addButton( QMessageBox::Ok );
+        dlg->addButton( QMessageBox::Ok );
     if ( style & wxCANCEL )
-        GetHandle()->addButton( QMessageBox::Cancel );
+        dlg->addButton( QMessageBox::Cancel );
     if ( style & wxYES_NO )
     {
-        GetHandle()->addButton( QMessageBox::Yes );
-        GetHandle()->addButton( QMessageBox::No );
+        dlg->addButton( QMessageBox::Yes );
+        dlg->addButton( QMessageBox::No );
     }
 
     // Default button
     if ( style & wxNO_DEFAULT )
-        GetHandle()->setDefaultButton( QMessageBox::No );
+        dlg->setDefaultButton( QMessageBox::No );
     else if ( style & wxCANCEL_DEFAULT )
-        GetHandle()->setDefaultButton( QMessageBox::Cancel );
+        dlg->setDefaultButton( QMessageBox::Cancel );
     else
     {
         // Default to OK or Yes
         if ( style & wxOK )
-            GetHandle()->setDefaultButton( QMessageBox::Ok );
+            dlg->setDefaultButton( QMessageBox::Ok );
         else
-            GetHandle()->setDefaultButton( QMessageBox::Yes );
+            dlg->setDefaultButton( QMessageBox::Yes );
     }
 
     // Icon
@@ -67,31 +68,31 @@ wxMessageDialog::wxMessageDialog( wxWindow *parent, const wxString& message,
     if ( style & wxICON_NONE )
     {
         numIcons++;
-        GetHandle()->setIcon( QMessageBox::NoIcon );
+        dlg->setIcon( QMessageBox::NoIcon );
     }
 
     if ( style & wxICON_EXCLAMATION )
     {
         numIcons++;
-        GetHandle()->setIcon( QMessageBox::Warning );
+        dlg->setIcon( QMessageBox::Warning );
     }
 
     if ( style & wxICON_ERROR || style & wxICON_HAND )
     {
         numIcons++;
-        GetHandle()->setIcon( QMessageBox::Critical );
+        dlg->setIcon( QMessageBox::Critical );
     }
 
     if ( style & wxICON_QUESTION )
     {
         numIcons++;
-        GetHandle()->setIcon( QMessageBox::Question );
+        dlg->setIcon( QMessageBox::Question );
     }
         
     if ( style & wxICON_INFORMATION )
     {
         numIcons++;
-        GetHandle()->setIcon( QMessageBox::Information );
+        dlg->setIcon( QMessageBox::Information );
     }
 
     wxCHECK_RET( numIcons <= 1, "Multiple icon definitions" );
@@ -99,23 +100,23 @@ wxMessageDialog::wxMessageDialog( wxWindow *parent, const wxString& message,
     {
         // Use default
         if ( style & wxYES_NO )
-            GetHandle()->setIcon( QMessageBox::Question );
+            dlg->setIcon( QMessageBox::Question );
         else
-            GetHandle()->setIcon( QMessageBox::Information );
+            dlg->setIcon( QMessageBox::Information );
     }
 
     if ( style & wxSTAY_ON_TOP )
-        GetHandle()->setWindowModality( Qt::ApplicationModal );
+        dlg->setWindowModality( Qt::ApplicationModal );
 
     PostCreation();
 }
 
 int wxMessageDialog::ShowModal()
 {
-    wxCHECK_MSG( GetHandle(), -1, "Invalid dialog" );
+    wxCHECK_MSG( m_qtWindow, -1, "Invalid dialog" );
     
     // Exec may return a wx identifier if a close event is generated
-    int ret = GetHandle()->exec();
+    int ret = static_cast<QDialog*>(m_qtWindow)->exec();
     switch ( ret )
     {
         case QMessageBox::Ok:
@@ -132,11 +133,6 @@ int wxMessageDialog::ShowModal()
     }                                        
 }
 
-QMessageBox *wxMessageDialog::GetHandle() const
-{
-    return static_cast<QMessageBox*>(m_qtWindow);
-}
-
 wxMessageDialog::~wxMessageDialog()
 {
 }
diff --git src/qt/nonownedwnd.cpp src/qt/nonownedwnd.cpp
new file mode 100644
index 0000000..061ddec
--- /dev/null
+++ src/qt/nonownedwnd.cpp
@@ -0,0 +1,69 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/qt/nonownedwnd.h
+// Author:      Sean D'Epagnier
+// Copyright:   (c) 2016 wxWidgets dev team
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+// for compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#ifndef WX_PRECOMP
+    #include "wx/dcclient.h"
+    #include "wx/region.h"
+    #include "wx/region.h"
+#endif // WX_PRECOMP
+
+#include "wx/nonownedwnd.h"
+#include "wx/qt/private/converter.h"
+#include "wx/qt/private/utils.h"
+
+#include <QtGui/QBitmap>
+#include <QtGui/QPainter>
+#include <QtWidgets/QWidget>
+
+// ============================================================================
+// wxNonOwnedWindow implementation
+// ============================================================================
+
+wxNonOwnedWindow::wxNonOwnedWindow()
+{
+}
+
+bool wxNonOwnedWindow::DoClearShape()
+{
+    GetHandle()->setMask(QBitmap());
+    return true;
+}
+
+bool wxNonOwnedWindow::DoSetRegionShape(const wxRegion& region)
+{
+    QPixmap pixmap(GetHandle()->size());
+    QPainter painter(&pixmap);
+    painter.fillRect(pixmap.rect(), Qt::white);
+    painter.setClipRegion(region.GetHandle());
+    painter.fillRect(pixmap.rect(), Qt::black);
+    GetHandle()->setMask(pixmap.createMaskFromColor(Qt::white));
+    return true;
+}
+
+#if wxUSE_GRAPHICS_CONTEXT
+bool wxNonOwnedWindow::DoSetPathShape(const wxGraphicsPath& path)
+{
+    wxMISSING_IMPLEMENTATION( __FUNCTION__ );
+    return true;
+}
+#endif
+
diff --git src/qt/notebook.cpp src/qt/notebook.cpp
index 2a971f5..5a3b8af 100644
--- src/qt/notebook.cpp
+++ src/qt/notebook.cpp
@@ -13,6 +13,8 @@
 #include "wx/qt/private/converter.h"
 #include "wx/qt/private/winevent.h"
 
+#include <QtWidgets/QTabWidget>
+
 class wxQtTabWidget : public wxQtEventSignalHandler< QTabWidget, wxNotebook >
 {
 public:
@@ -199,7 +201,7 @@ wxWindow *wxNotebook::DoRemovePage(size_t page)
     return QtRetrieveWindowPointer( qtWidget );
 }
 
-QTabWidget *wxNotebook::GetHandle() const
+QWidget *wxNotebook::GetHandle() const
 {
     return m_qtTabWidget;
 }
diff --git src/qt/pen.cpp src/qt/pen.cpp
index bf265dc..f09d931 100644
--- src/qt/pen.cpp
+++ src/qt/pen.cpp
@@ -247,7 +247,7 @@ wxPen::wxPen( const wxColour &colour, int width, wxPenStyle style)
     m_refData = new wxPenRefData();
     M_PENDATA.setWidth(width);
     M_PENDATA.setStyle(ConvertPenStyle(style));
-    M_PENDATA.setColor(colour.GetHandle());
+    M_PENDATA.setColor(colour.GetQColor());
 }
 
 wxPen::wxPen(const wxColour& col, int width, int style)
@@ -255,7 +255,7 @@ wxPen::wxPen(const wxColour& col, int width, int style)
     m_refData = new wxPenRefData();
     M_PENDATA.setWidth(width);
     M_PENDATA.setStyle(ConvertPenStyle((wxPenStyle)style));
-    M_PENDATA.setColor(col.GetHandle());
+    M_PENDATA.setColor(col.GetQColor());
 }
 
 
@@ -276,7 +276,7 @@ bool wxPen::operator!=(const wxPen& pen) const
 void wxPen::SetColour(const wxColour& col)
 {
     AllocExclusive();
-    M_PENDATA.setColor(col.GetHandle());
+    M_PENDATA.setColor(col.GetQColor());
 }
 
 void wxPen::SetColour(unsigned char r, unsigned char g, unsigned char b)
diff --git src/qt/radiobox.cpp src/qt/radiobox.cpp
index f5c0151..da8c90b 100644
--- src/qt/radiobox.cpp
+++ src/qt/radiobox.cpp
@@ -15,7 +15,8 @@
 #include <QtWidgets/QCheckBox>
 #include <QtWidgets/QGroupBox>
 #include <QtWidgets/QRadioButton>
-
+#include <QtWidgets/QButtonGroup>
+#include <QtWidgets/QBoxLayout>
 
 class wxQtRadioBox : public wxQtEventSignalHandler< QGroupBox, wxRadioBox >
 {
@@ -236,7 +237,7 @@ int wxRadioBox::GetSelection() const
         return wxNOT_FOUND;
 }
 
-QGroupBox *wxRadioBox::GetHandle() const
+QWidget *wxRadioBox::GetHandle() const
 {
     return m_qtGroupBox;
 }
diff --git src/qt/radiobut.cpp src/qt/radiobut.cpp
index 00fafd8..64e2100 100644
--- src/qt/radiobut.cpp
+++ src/qt/radiobut.cpp
@@ -11,6 +11,8 @@
 #include "wx/radiobut.h"
 #include "wx/qt/private/converter.h"
 
+#include <QtWidgets/QRadioButton>
+
 wxRadioButton::wxRadioButton()
 {
 }
@@ -52,7 +54,7 @@ bool wxRadioButton::GetValue() const
     return m_qtRadioButton->isChecked();
 }
 
-QRadioButton *wxRadioButton::GetHandle() const
+QWidget *wxRadioButton::GetHandle() const
 {
     return m_qtRadioButton;
 }
diff --git src/qt/region.cpp src/qt/region.cpp
index b2b0ff4..ad6551d 100644
--- src/qt/region.cpp
+++ src/qt/region.cpp
@@ -15,6 +15,7 @@
 
 #include <QtGui/QRegion>
 #include <QtGui/QBitmap>
+#include <QtGui/QPainter>
 
 class wxRegionRefData: public wxGDIRefData
 {
@@ -34,7 +35,7 @@ class wxRegionRefData: public wxGDIRefData
         wxRegionRefData( QPolygon p, Qt::FillRule fr ) : m_qtRegion( p, fr )
         {
         }
-        
+
         wxRegionRefData( const wxRegionRefData& data )
         : wxGDIRefData()
         {
@@ -93,9 +94,38 @@ wxRegion::wxRegion(const wxBitmap& bmp)
         m_refData = new wxRegionRefData( QRect( 0, 0, bmp.GetWidth(), bmp.GetHeight() ) );
 }
 
-wxRegion::wxRegion(const wxBitmap& WXUNUSED(bmp), const wxColour& WXUNUSED(transp), int WXUNUSED(tolerance))
+wxRegion::wxRegion(const wxBitmap& bmp, const wxColour& transp, int tolerance)
 {
-    wxMISSING_IMPLEMENTATION( __FUNCTION__ );
+    if ( !bmp.GetHandle() ) {
+        m_refData = new wxRegionRefData();
+        return;
+    }
+
+    if ( tolerance == 0 ) {
+        m_refData = new wxRegionRefData(bmp.GetHandle()->createMaskFromColor(transp.GetQColor()));
+        return;
+    }
+
+    unsigned char raw[bmp.GetWidth()*bmp.GetHeight()];
+    memset(raw, 0, bmp.GetWidth()*bmp.GetHeight());
+
+    QImage img(bmp.GetHandle()->toImage());
+    int r = transp.Red(), g = transp.Green(), b = transp.Blue();
+    for(int y=0; y<img.height(); y++)
+    {
+        for(int x=0; x<img.width(); x++)
+        {
+            QColor c = img.pixel(x, y);
+            if ( abs(c.red()   - r ) > tolerance ||
+               abs(c.green() - g) > tolerance ||
+               abs(c.blue()  - b) > tolerance) {
+                    int ind = y*img.width()+x;
+                    raw[ind>>3] |= 1<<(ind&7);
+            }
+        }
+    }
+            
+    m_refData = new wxRegionRefData(QBitmap::fromData(bmp.GetHandle()->size(), raw));
 }
 
 bool wxRegion::IsEmpty() const
@@ -215,9 +245,9 @@ bool wxRegion::DoXor(const wxRegion& region)
     return true;
 }
 
-QRegion wxRegion::GetHandle() const
+const QRegion &wxRegion::GetHandle() const
 {
-    wxCHECK_MSG( IsOk(), QRegion(), "Invalid region" );
+    wxCHECK_MSG( IsOk(), GetHandle(), "Invalid region" );
 
     return M_REGIONDATA;
 }
diff --git src/qt/scrolbar.cpp src/qt/scrolbar.cpp
index bd445de..99db6cc 100644
--- src/qt/scrolbar.cpp
+++ src/qt/scrolbar.cpp
@@ -12,6 +12,7 @@
 #include "wx/qt/private/utils.h"
 #include "wx/qt/private/winevent.h"
 
+#include <QtWidgets/QScrollBar>
 
 class wxQtScrollBar : public wxQtEventSignalHandler< QScrollBar, wxScrollBar >
 {
@@ -109,7 +110,7 @@ void wxScrollBar::SetScrollbar(int position, int WXUNUSED(thumbSize),
     }
 }
 
-QScrollBar *wxScrollBar::GetHandle() const
+QWidget *wxScrollBar::GetHandle() const
 {
     return m_qtScrollBar;
 }
diff --git src/qt/slider.cpp src/qt/slider.cpp
index f3d95b5..9efc54d 100644
--- src/qt/slider.cpp
+++ src/qt/slider.cpp
@@ -12,6 +12,7 @@
 #include "wx/qt/private/converter.h"
 #include "wx/qt/private/winevent.h"
 
+#include <QtWidgets/QSlider>
 
 class wxQtSlider : public wxQtEventSignalHandler< QSlider, wxSlider >
 {
@@ -163,7 +164,7 @@ int wxSlider::GetThumbLength() const
 }
 
 
-QSlider *wxSlider::GetHandle() const
+QWidget *wxSlider::GetHandle() const
 {
     return m_qtSlider;
 }
diff --git src/qt/spinbutt.cpp src/qt/spinbutt.cpp
index 3488a47..0fca8ba 100644
--- src/qt/spinbutt.cpp
+++ src/qt/spinbutt.cpp
@@ -11,6 +11,7 @@
 #include "wx/spinbutt.h"
 #include "wx/qt/private/winevent.h"
 
+#include <QtWidgets/QSpinBox>
 
 class wxQtSpinButton : public wxQtEventSignalHandler< QSpinBox, wxSpinButton  >
 {
@@ -81,7 +82,7 @@ void wxSpinButton::SetValue(int val)
     m_qtSpinBox->setValue( val );
 }
 
-QSpinBox *wxSpinButton::GetHandle() const
+QWidget *wxSpinButton::GetHandle() const
 {
     return m_qtSpinBox;
 }
diff --git src/qt/spinctrl.cpp src/qt/spinctrl.cpp
index de7dfd9..ee0b1e6 100644
--- src/qt/spinctrl.cpp
+++ src/qt/spinctrl.cpp
@@ -15,6 +15,8 @@
 #include "wx/qt/private/converter.h"
 #include "wx/qt/private/winevent.h"
 
+#include <QtWidgets/QSpinBox>
+
 template< typename T, typename Widget >
 wxSpinCtrlQt< T, Widget >::wxSpinCtrlQt()
 {
@@ -32,10 +34,10 @@ bool wxSpinCtrlQt< T, Widget >::Create( wxWindow *parent, wxWindowID id,
     const wxString& value, const wxPoint& pos, const wxSize& size, long style,
     T min, T max, T initial, T inc, const wxString& name )
 {
-    if(!(style & wxSP_ARROW_KEYS))
+    if ( !(style & wxSP_ARROW_KEYS) )
         m_qtSpinBox->setButtonSymbols(QAbstractSpinBox::NoButtons);
 
-    if(style & wxSP_WRAP)
+    if ( style & wxSP_WRAP )
         m_qtSpinBox->setWrapping(true);
 
     m_qtSpinBox->setAccelerated(true); // to match gtk behavior
@@ -117,7 +119,7 @@ void wxSpinCtrlQt< T, Widget >::SetSelection(long WXUNUSED(WXUNUSED(from)), long
 }
 
 template< typename T, typename Widget >
-Widget *wxSpinCtrlQt< T, Widget >::GetHandle() const
+QWidget *wxSpinCtrlQt< T, Widget >::GetHandle() const
 {
     return m_qtSpinBox;
 }
diff --git src/qt/statbmp.cpp src/qt/statbmp.cpp
index faa1540..b4dbde3 100644
--- src/qt/statbmp.cpp
+++ src/qt/statbmp.cpp
@@ -11,6 +11,8 @@
 #include "wx/statbmp.h"
 #include "wx/qt/private/winevent.h"
 
+#include <QtWidgets/QLabel>
+
 class wxQtStaticBmp : public wxQtEventSignalHandler< QLabel, wxStaticBitmap >
 {
 public:
@@ -80,7 +82,7 @@ wxIcon wxStaticBitmap::GetIcon() const
     return icon;
 }
 
-QLabel *wxStaticBitmap::GetHandle() const
+QWidget *wxStaticBitmap::GetHandle() const
 {
     return m_qtLabel;
 }
diff --git src/qt/statbox.cpp src/qt/statbox.cpp
index be9825e..6af3e2d 100644
--- src/qt/statbox.cpp
+++ src/qt/statbox.cpp
@@ -50,7 +50,7 @@ bool wxStaticBox::Create(wxWindow *parent, wxWindowID id,
     return QtCreateControl( parent, id, pos, size, style, wxDefaultValidator, name );
 }
 
-QGroupBox *wxStaticBox::GetHandle() const
+QWidget *wxStaticBox::GetHandle() const
 {
     return m_qtGroupBox;
 }
diff --git src/qt/statline.cpp src/qt/statline.cpp
index 0e02279..444f59c 100644
--- src/qt/statline.cpp
+++ src/qt/statline.cpp
@@ -10,6 +10,8 @@
 
 #include "wx/statline.h"
 
+#include <QtWidgets/QFrame>
+
 wxStaticLine::wxStaticLine()
 {
 }
@@ -40,7 +42,7 @@ bool wxStaticLine::Create( wxWindow *parent,
     return QtCreateControl( parent, id, pos, size, style, wxDefaultValidator, name );
 }
 
-QFrame *wxStaticLine::GetHandle() const
+QWidget *wxStaticLine::GetHandle() const
 {
     return m_qtFrame;
 }
diff --git src/qt/stattext.cpp src/qt/stattext.cpp
index c55254c..c60a6fd 100644
--- src/qt/stattext.cpp
+++ src/qt/stattext.cpp
@@ -12,6 +12,8 @@
 #include "wx/qt/private/converter.h"
 #include "wx/qt/private/winevent.h"
 
+#include <QtWidgets/QLabel>
+
 class wxQtStaticText : public wxQtEventSignalHandler< QLabel, wxStaticText >
 {
 public:
@@ -51,7 +53,6 @@ bool wxStaticText::Create(wxWindow *parent,
 
     m_qtLabel->setBuddy( m_qtLabel );
     m_qtLabel->setTextInteractionFlags( Qt::NoTextInteraction );
-    m_qtLabel->setWordWrap( true );
 
     return QtCreateControl( parent, id, pos, size, style, wxDefaultValidator, name );
 }
@@ -61,7 +62,7 @@ void wxStaticText::SetLabel(const wxString& label)
     m_qtLabel->setText( wxQtConvertString( label ) );
 }
 
-QLabel *wxStaticText::GetHandle() const
+QWidget *wxStaticText::GetHandle() const
 {
     return m_qtLabel;
 }
diff --git src/qt/statusbar.cpp src/qt/statusbar.cpp
index 4056fbf..57881f8 100644
--- src/qt/statusbar.cpp
+++ src/qt/statusbar.cpp
@@ -13,6 +13,8 @@
 #include "wx/qt/private/converter.h"
 #include "wx/qt/private/winevent.h"
 
+#include <QtWidgets/QStatusBar>
+#include <QtWidgets/QLabel>
 
 class wxQtStatusBar : public wxQtEventSignalHandler< QStatusBar, wxStatusBar >
 {
@@ -28,21 +30,27 @@ wxQtStatusBar::wxQtStatusBar( wxWindow *parent, wxStatusBar *handler )
 
 //==============================================================================
 
+
+wxStatusBar::wxStatusBar()
+{
+    Init();
+}
+
 wxStatusBar::wxStatusBar(wxWindow *parent, wxWindowID winid,
             long style,
             const wxString& name)
 {
+    Init();
     Create( parent, winid, style, name );
 }
 
 bool wxStatusBar::Create(wxWindow *parent, wxWindowID WXUNUSED(winid),
                          long style, const wxString& WXUNUSED(name))
 {
-    wxMISSING_IMPLEMENTATION( "wxStatusBar::Create parameters" );
-
     m_qtStatusBar = new wxQtStatusBar( parent, this );
+    m_qtPanes = new QList < QLabel* >;
 
-    if(style & wxSTB_SIZEGRIP)
+    if ( style & wxSTB_SIZEGRIP )
         m_qtStatusBar->setSizeGripEnabled(true);
 
     PostCreation();
@@ -57,7 +65,10 @@ bool wxStatusBar::GetFieldRect(int i, wxRect& rect) const
     wxCHECK_MSG( (i >= 0) && ((size_t)i < m_panes.GetCount()), false,
                  "invalid statusbar field index" );
 
-    rect = wxQtConvertRect(m_qtPanes[i]->geometry());
+    if ( m_qtPanes->count() != m_panes.GetCount() )
+        const_cast<wxStatusBar*>(this)->UpdateFields();
+    
+    rect = wxQtConvertRect((*m_qtPanes)[i]->geometry());
     return true;
 }
 
@@ -78,7 +89,10 @@ int wxStatusBar::GetBorderY() const
 
 void wxStatusBar::DoUpdateStatusText(int number)
 {
-    m_qtPanes[number]->setText( wxQtConvertString( m_panes[number].GetText() ) );
+    if ( m_qtPanes->count() != m_panes.GetCount() )
+        UpdateFields();
+
+    (*m_qtPanes)[number]->setText( wxQtConvertString( m_panes[number].GetText() ) );
 }
 
 // Called each time number/size of panes changes
@@ -89,14 +103,19 @@ void wxStatusBar::Refresh( bool eraseBackground, const wxRect *rect )
     wxWindow::Refresh( eraseBackground, rect );
 }
 
+void wxStatusBar::Init()
+{
+    m_qtPanes = NULL;
+}
+
 void wxStatusBar::UpdateFields()
 {
     // is it a good idea to recreate all the panes every update?
 
-    while ( !m_qtPanes.isEmpty() )
+    while ( !m_qtPanes->isEmpty() )
     {
         //Remove all panes
-        delete m_qtPanes.takeLast();
+        delete m_qtPanes->takeLast();
     }
 
     for (size_t i = 0; i < m_panes.GetCount(); i++)
@@ -105,7 +124,7 @@ void wxStatusBar::UpdateFields()
         int width = m_panes[i].GetWidth();
 
         QLabel *pane = new QLabel( m_qtStatusBar );
-        m_qtPanes.append( pane );
+        m_qtPanes->append( pane );
 
         if ( width >= 0 )
         {
@@ -120,7 +139,7 @@ void wxStatusBar::UpdateFields()
     }
 }
 
-QStatusBar *wxStatusBar::GetHandle() const
+QWidget *wxStatusBar::GetHandle() const
 {
     return m_qtStatusBar;
 }
diff --git src/qt/taskbar.cpp src/qt/taskbar.cpp
index 6b40fe8..b375afd 100644
--- src/qt/taskbar.cpp
+++ src/qt/taskbar.cpp
@@ -10,6 +10,8 @@
 
 #include "wx/taskbar.h"
 
+#include <QtWidgets/QSystemTrayIcon>
+
 //=============================================================================
 
 bool wxTaskBarIconBase::IsAvailable()
@@ -23,6 +25,12 @@ wxIMPLEMENT_DYNAMIC_CLASS(wxTaskBarIcon, wxTaskBarIconBase);
 
 wxTaskBarIcon::wxTaskBarIcon(wxTaskBarIconType WXUNUSED(iconType))
 {
+    m_qtSystemTrayIcon = new QSystemTrayIcon;
+}
+
+wxTaskBarIcon::~wxTaskBarIcon()
+{
+    delete m_qtSystemTrayIcon;
 }
 
 bool wxTaskBarIcon::SetIcon(const wxIcon& WXUNUSED(icon),
diff --git src/qt/textctrl.cpp src/qt/textctrl.cpp
index 166edff..c600216 100644
--- src/qt/textctrl.cpp
+++ src/qt/textctrl.cpp
@@ -14,6 +14,9 @@
 #include "wx/qt/private/winevent.h"
 #include "wx/qt/private/utils.h"
 
+#include <QtWidgets/QLineEdit>
+#include <QtWidgets/QTextEdit>
+
 class wxQtLineEdit : public wxQtEventSignalHandler< QLineEdit, wxTextCtrl >
 {
 public:
@@ -290,8 +293,8 @@ void wxTextCtrl::GetSelection(long* from, long* to) const
         QTextCursor cursor = m_qtTextEdit->textCursor();
         *from = cursor.selectionStart();
         *to = cursor.selectionEnd();
-        if(cursor.hasSelection())
-                return;
+        if ( cursor.hasSelection() )
+            return;
     }
     else // single line
     {
diff --git src/qt/tglbtn.cpp src/qt/tglbtn.cpp
index d89eb54..f27c724 100644
--- src/qt/tglbtn.cpp
+++ src/qt/tglbtn.cpp
@@ -21,6 +21,8 @@
 #include "wx/qt/private/converter.h"
 #include "wx/qt/private/winevent.h"
 
+#include <QtWidgets/QPushButton>
+
 class wxQtToggleButton : public wxQtEventSignalHandler< QPushButton, wxAnyButton >
 {
 
@@ -94,7 +96,7 @@ bool wxBitmapToggleButton::GetValue() const
     return m_qtPushButton->isChecked();
 }
 
-QPushButton *wxBitmapToggleButton::GetHandle() const
+QWidget *wxBitmapToggleButton::GetHandle() const
 {
     return m_qtPushButton;
 }
@@ -144,7 +146,7 @@ bool wxToggleButton::GetValue() const
     return m_qtPushButton->isChecked();
 }
 
-QPushButton *wxToggleButton::GetHandle() const
+QWidget *wxToggleButton::GetHandle() const
 {
     return m_qtPushButton;
 }
diff --git src/qt/timer.cpp src/qt/timer.cpp
index 3b52a44..4c991a3 100644
--- src/qt/timer.cpp
+++ src/qt/timer.cpp
@@ -10,7 +10,7 @@
 
 #if wxUSE_TIMER
 
-#include "wx/qt/timer.h"
+#include "wx/qt/private/timer.h"
 #include <QtCore/QTimerEvent>
 
 wxQtTimerImpl::wxQtTimerImpl( wxTimer* timer )
diff --git src/qt/toolbar.cpp src/qt/toolbar.cpp
index 5704942..cad52f8 100644
--- src/qt/toolbar.cpp
+++ src/qt/toolbar.cpp
@@ -25,6 +25,8 @@
 #include "wx/qt/private/winevent.h"
 #include "wx/qt/private/converter.h"
 
+#include <QtWidgets/QToolBar>
+
 class wxQtToolButton;
 class wxToolBarTool : public wxToolBarToolBase
 {
@@ -144,7 +146,7 @@ wxQtToolbar::wxQtToolbar( wxWindow *parent, wxToolBar *handler )
 }
 
 
-QToolBar *wxToolBar::GetHandle() const
+QWidget *wxToolBar::GetHandle() const
 {
     return m_qtToolBar;
 }
@@ -192,7 +194,7 @@ void wxToolBar::SetWindowStyleFlag( long style )
 
     m_qtToolBar->setOrientation( IsVertical() ? Qt::Vertical : Qt::Horizontal);
 
-    Qt::ToolButtonStyle buttonStyle = GetButtonStyle();
+    Qt::ToolButtonStyle buttonStyle = (Qt::ToolButtonStyle)GetButtonStyle();
 
     // bring the initial state of all the toolbar items in line with the
     for ( wxToolBarToolsList::const_iterator i = m_tools.begin();
@@ -235,11 +237,11 @@ QActionGroup* wxToolBar::GetActionGroup(size_t pos)
 {
     QActionGroup *actionGroup = NULL;
     if (pos > 0)
-        actionGroup = GetHandle()->actions().at(pos-1)->actionGroup();
-    if (actionGroup == NULL && (int)pos < GetHandle()->actions().size() - 1)
-        actionGroup = GetHandle()->actions().at(pos+1)->actionGroup();
+        actionGroup = m_qtToolBar->actions().at(pos-1)->actionGroup();
+    if (actionGroup == NULL && (int)pos < m_qtToolBar->actions().size() - 1)
+        actionGroup = m_qtToolBar->actions().at(pos+1)->actionGroup();
     if (actionGroup == NULL)
-        actionGroup = new QActionGroup(GetHandle());
+        actionGroup = new QActionGroup(m_qtToolBar);
     return actionGroup;
 }
 
@@ -247,15 +249,15 @@ bool wxToolBar::DoInsertTool(size_t pos, wxToolBarToolBase *toolBase)
 {
     wxToolBarTool* tool = static_cast<wxToolBarTool*>(toolBase);
     QAction *before = NULL;
-    if (pos >= 0 && pos < (size_t)GetHandle()->actions().size())
-        before = GetHandle()->actions().at(pos);
+    if (pos >= 0 && pos < (size_t)m_qtToolBar->actions().size())
+        before = m_qtToolBar->actions().at(pos);
 
     QAction *action;
     switch ( tool->GetStyle() )
     {
         case wxTOOL_STYLE_BUTTON:
             tool->m_qtToolButton = new wxQtToolButton(this, tool);
-            tool->m_qtToolButton->setToolButtonStyle(GetButtonStyle());
+            tool->m_qtToolButton->setToolButtonStyle((Qt::ToolButtonStyle)GetButtonStyle());
             tool->SetLabel( tool->GetLabel() );
 
             if (!HasFlag(wxTB_NOICONS))
@@ -263,7 +265,7 @@ bool wxToolBar::DoInsertTool(size_t pos, wxToolBarToolBase *toolBase)
             if (!HasFlag(wxTB_NO_TOOLTIPS))
                 tool->SetToolTip();
 
-            action = GetHandle()->insertWidget(before, tool->m_qtToolButton);
+            action = m_qtToolBar->insertWidget(before, tool->m_qtToolButton);
 
             switch (tool->GetKind())
             {
@@ -285,14 +287,14 @@ bool wxToolBar::DoInsertTool(size_t pos, wxToolBarToolBase *toolBase)
             if (tool->IsStretchable()) {
                 QWidget* spacer = new QWidget();
                 spacer->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
-                GetHandle()->insertWidget(before, spacer);
+                m_qtToolBar->insertWidget(before, spacer);
             } else
-                GetHandle()->insertSeparator(before);
+                m_qtToolBar->insertSeparator(before);
             break;
 
         case wxTOOL_STYLE_CONTROL:
             wxWindow* control = tool->GetControl();
-            GetHandle()->insertWidget(before, control->GetHandle());
+            m_qtToolBar->insertWidget(before, control->GetHandle());
             break;
     }
 
@@ -344,7 +346,7 @@ wxToolBarToolBase *wxToolBar::CreateTool(wxControl *control,
     return new wxToolBarTool(this, control, label);
 }
 
-Qt::ToolButtonStyle wxToolBar::GetButtonStyle()
+long wxToolBar::GetButtonStyle()
 {
     if (!HasFlag(wxTB_NOICONS)) {
         if (HasFlag(wxTB_HORZ_LAYOUT))
diff --git src/qt/toplevel.cpp src/qt/toplevel.cpp
index a5c2466..e4a6fa5 100644
--- src/qt/toplevel.cpp
+++ src/qt/toplevel.cpp
@@ -11,6 +11,7 @@
 #include "wx/toplevel.h"
 #include "wx/qt/private/converter.h"
 #include <QtGui/QIcon>
+#include <QtWidgets/QWidget>
 
 wxTopLevelWindowQt::wxTopLevelWindowQt()
 {
@@ -119,7 +120,15 @@ void wxTopLevelWindowQt::SetIcons( const wxIconBundle& icons )
 void wxTopLevelWindowQt::SetWindowStyleFlag( long style )
 {
     wxWindow::SetWindowStyleFlag( style );
-    
+
+    if ( HasFlag( wxCENTRE ) )
+    {
+        Centre();
+    }
+
+    if ( !GetHandle() )
+        return;
+
     Qt::WindowFlags qtFlags = GetHandle()->windowFlags();
     
     if ( HasFlag( wxSTAY_ON_TOP ) != qtFlags.testFlag( Qt::WindowStaysOnTopHint ) )
@@ -166,12 +175,7 @@ void wxTopLevelWindowQt::SetWindowStyleFlag( long style )
         GetHandle()->setSizePolicy( QSizePolicy::Preferred, QSizePolicy::Preferred );
     else
         GetHandle()->setSizePolicy( QSizePolicy::Fixed, QSizePolicy::Fixed );
-    
-    if ( HasFlag( wxCENTRE ) )
-    {
-        Centre();
     }
-}
 
 long wxTopLevelWindowQt::GetWindowStyleFlag() const
 {
diff --git src/qt/treectrl.cpp src/qt/treectrl.cpp
index 2362c6d..f73a202 100644
--- src/qt/treectrl.cpp
+++ src/qt/treectrl.cpp
@@ -10,6 +10,8 @@
 
 #include "wx/treectrl.h"
 
+#include <QtWidgets/QTreeWidget>
+
 wxTreeCtrl::wxTreeCtrl()
 {
 }
@@ -348,7 +350,7 @@ wxTreeItemId wxTreeCtrl::DoTreeHitTest(const wxPoint& point, int& flags) const
     return wxTreeItemId();
 }
 
-QTreeWidget *wxTreeCtrl::GetHandle() const
+QWidget *wxTreeCtrl::GetHandle() const
 {
     return m_qtTreeWidget;
 }
diff --git src/qt/window.cpp src/qt/window.cpp
index 6c59620..b82a4e3 100644
--- src/qt/window.cpp
+++ src/qt/window.cpp
@@ -18,6 +18,8 @@
 #include <QtWidgets/QApplication>
 #include <QtWidgets/QWidget>
 #include <QtWidgets/QScrollArea>
+#include <QtWidgets/QMenu>
+#include <QtWidgets/QShortcut>
 
 #ifndef WX_PRECOMP
     #include "wx/dcclient.h"
@@ -150,6 +152,7 @@ void wxWindowQt::Init()
 #if wxUSE_ACCEL
     m_qtShortcutHandler = new wxQtShortcutHandler( this );
     m_processingShortcut = false;
+    m_qtShortcuts = NULL;
 #endif
     m_qtWindow = NULL;
     m_qtContainer = NULL;
@@ -185,6 +188,7 @@ wxWindowQt::~wxWindowQt()
 
 #if wxUSE_ACCEL
     m_qtShortcutHandler->deleteLater();
+    delete m_qtShortcuts;
 #endif
 
     // Delete only if the qt widget was created or assigned to this base class
@@ -228,20 +232,18 @@ bool wxWindowQt::Create( wxWindowQt * parent, wxWindowID id, const wxPoint & pos
                 QtSetScrollBar( wxVERTICAL );
         }
         else
-        {
             m_qtWindow = new wxQtWidget( parent, this );
-        }
-
-        GetHandle()->setMouseTracking(true);
     }
 
+    
+    GetHandle()->setMouseTracking(true);
     if ( !wxWindowBase::CreateBase( parent, id, pos, size, style, wxDefaultValidator, name ))
         return false;
 
     parent->AddChild( this );
 
     wxPoint p;
-    if(pos != wxDefaultPosition)
+    if ( pos != wxDefaultPosition )
         p = pos;
 
     DoMoveWindow( p.x, p.y, size.GetWidth(), size.GetHeight() );
@@ -433,6 +435,15 @@ void wxWindowQt::Refresh( bool WXUNUSED( eraseBackground ), const wxRect *rect )
     }
 }
 
+bool wxWindowQt::SetCursor( const wxCursor &cursor )
+{
+    if (!wxWindowBase::SetCursor(cursor))
+        return false;
+
+    GetHandle()->setCursor(cursor.GetHandle());
+    
+    return true;
+}
 
 bool wxWindowQt::SetFont( const wxFont &font )
 {
@@ -498,7 +509,7 @@ wxScrollBar *wxWindowQt::QtGetScrollBar( int orientation ) const
  * passed as parameter */
 wxScrollBar *wxWindowQt::QtSetScrollBar( int orientation, wxScrollBar *scrollBar )
 {
-    QAbstractScrollArea *scrollArea = QtGetScrollBarsContainer();
+    QScrollArea *scrollArea = QtGetScrollBarsContainer();
     wxCHECK_MSG( scrollArea, NULL, "Window without scrolling area" );
 
     // Create a new scrollbar if needed
@@ -522,12 +533,12 @@ wxScrollBar *wxWindowQt::QtSetScrollBar( int orientation, wxScrollBar *scrollBar
     // Let Qt handle layout
     if ( orientation == wxHORIZONTAL )
     {
-        scrollArea->setHorizontalScrollBar( scrollBar->GetHandle() );
+        scrollArea->setHorizontalScrollBar( scrollBar->GetQScrollBar() );
         m_horzScrollBar = scrollBar;
     }
     else
     {
-        scrollArea->setVerticalScrollBar( scrollBar->GetHandle() );
+        scrollArea->setVerticalScrollBar( scrollBar->GetQScrollBar() );
         m_vertScrollBar = scrollBar;
     }
     return scrollBar;
@@ -562,9 +573,8 @@ void wxWindowQt::SetScrollbar( int orientation, int pos, int thumbvisible, int r
 void wxWindowQt::SetScrollPos( int orientation, int pos, bool WXUNUSED( refresh ))
 {
     wxScrollBar *scrollBar = QtGetScrollBar( orientation );
-    wxCHECK_RET( scrollBar, "Invalid scrollbar" );
-
-    scrollBar->SetThumbPosition( pos );
+    if ( scrollBar )
+        scrollBar->SetThumbPosition( pos );
 }
 
 int wxWindowQt::GetScrollPos( int orientation ) const
@@ -731,6 +741,9 @@ void wxWindowQt::SetWindowStyleFlag( long style )
 //        qtFrame->setFrameShadow( QFrame::Plain );
 //    }
 
+    if ( !GetHandle() )
+        return;
+
     Qt::WindowFlags qtFlags = GetHandle()->windowFlags();
 
     if ( HasFlag( wxFRAME_NO_TASKBAR ) )
@@ -926,15 +939,16 @@ void wxWindowQt::SetAcceleratorTable( const wxAcceleratorTable& accel )
     wxWindowBase::SetAcceleratorTable( accel );
 
     // Disable previously set accelerators
-    while ( !m_qtShortcuts.isEmpty() )
-        delete m_qtShortcuts.takeFirst();
+    while ( !m_qtShortcuts->isEmpty() )
+        delete m_qtShortcuts->takeFirst();
 
     // Create new shortcuts (use GetHandle() so all events inside
     // the window are handled, not only in the container subwindow)
+    delete m_qtShortcuts;
     m_qtShortcuts = accel.ConvertShortcutTable( GetHandle() );
 
     // Connect shortcuts to window
-    Q_FOREACH( QShortcut *s, m_qtShortcuts )
+    Q_FOREACH( QShortcut *s, *m_qtShortcuts )
     {
         QObject::connect( s, &QShortcut::activated, m_qtShortcutHandler, &wxQtShortcutHandler::activated );
         QObject::connect( s, &QShortcut::activatedAmbiguously, m_qtShortcutHandler, &wxQtShortcutHandler::activated );
@@ -1095,6 +1109,7 @@ bool wxWindowQt::QtHandlePaintEvent ( QWidget *handler, QPaintEvent *event )
 
                 // send the paint event (wxWindowDC will draw directly):
                 wxPaintEvent paint( GetId() );
+                paint.SetEventObject(this);
                 handled = ProcessWindowEvent(paint);
                 m_updateRegion.Clear();
             }
@@ -1132,6 +1147,8 @@ bool wxWindowQt::QtHandleResizeEvent ( QWidget *WXUNUSED( handler ), QResizeEven
 bool wxWindowQt::QtHandleWheelEvent ( QWidget *WXUNUSED( handler ), QWheelEvent *event )
 {
     wxMouseEvent e( wxEVT_MOUSEWHEEL );
+    e.SetPosition( wxQtConvertPoint( event->pos() ) );
+
     e.m_wheelAxis = ( event->orientation() == Qt::Vertical ) ? wxMOUSE_WHEEL_VERTICAL : wxMOUSE_WHEEL_HORIZONTAL;
     e.m_wheelRotation = event->delta();
     e.m_linesPerAction = 3;
@@ -1146,7 +1163,7 @@ bool wxWindowQt::QtHandleKeyEvent ( QWidget *WXUNUSED( handler ), QKeyEvent *eve
     // qt sends keyup and keydown events for autorepeat, but this is not
     // normal for wx which only sends repeated keydown events
     // discard repeated keyup events
-    if(event->isAutoRepeat() && event->type() == QEvent::KeyRelease)
+    if ( event->isAutoRepeat() && event->type() == QEvent::KeyRelease )
         return true;
 
 #if wxUSE_ACCEL
@@ -1405,12 +1422,7 @@ bool wxWindowQt::QtHandleCloseEvent ( QWidget *handler, QCloseEvent *WXUNUSED( e
     if ( GetHandle() != handler )
         return false;
 
-    int close = Close();
-    if ( close )
-    {
-        Destroy();
-    }
-    return close;
+    return Close();
 }
 
 bool wxWindowQt::QtHandleContextMenuEvent ( QWidget *WXUNUSED( handler ), QContextMenuEvent *event )
@@ -1462,7 +1474,7 @@ QWidget *wxWindowQt::GetHandle() const
     return m_qtWindow;
 }
 
-QAbstractScrollArea *wxWindowQt::QtGetScrollBarsContainer() const
+QScrollArea *wxWindowQt::QtGetScrollBarsContainer() const
 {
     return m_qtContainer;
 }

 diff --git demos/life/life.cpp demos/life/life.cpp
index 3b3c9ced49de5bd2811db2f4c7b910c4dda6b872..c36e9c99d9afb00bd26eb34b2ca611d849ce3222 100644
--- demos/life/life.cpp
+++ demos/life/life.cpp
@@ -38,7 +38,7 @@
 // resources
 // --------------------------------------------------------------------------
 
-#if defined(__WXGTK__) || defined(__WXMOTIF__) || defined(__WXMAC__) || defined(__WXMGL__) || defined(__WXX11__)
+#if defined(__WXGTK__) || defined(__WXMOTIF__) || defined(__WXMAC__) || defined(__WXMGL__) || defined(__WXX11__) || defined(__WXQT__)
     // application icon
     #include "mondrian.xpm"
 
@@ -431,10 +431,10 @@ void LifeFrame::OnMenu(wxCommandEvent& event)
             m_running = true;
             m_topspeed = true;
             UpdateUI();
-            
+
             const long YIELD_INTERVAL = 1000 / 30;
             wxMilliClock_t lastyield = 0, now;
-            
+
             while (m_running && m_topspeed)
             {
                 OnStep();
@@ -444,7 +444,7 @@ void LifeFrame::OnMenu(wxCommandEvent& event)
                     lastyield = now;
                 }
             }
- 
+
             break;
         }
     }
@@ -797,17 +797,17 @@ void LifeCanvas::DrawCell(wxInt32 i, wxInt32 j, wxDC &dc)
 void LifeCanvas::DrawChanged()
 {
     wxClientDC dc(this);
-    
+
     size_t ncells;
     LifeCell *cells;
     bool done = false;
-    
+
     m_life->BeginFind(m_viewportX,
                       m_viewportY,
                       m_viewportX + m_viewportW,
                       m_viewportY + m_viewportH,
                       true);
-    
+
     if (m_cellsize == 1)
     {
         dc.SetPen(*wxWHITE_PEN);
@@ -818,11 +818,11 @@ void LifeCanvas::DrawChanged()
         dc.SetBrush(*wxWHITE_BRUSH);
     }
     dc.SetLogicalFunction(wxXOR);
-    
+
     while (!done)
     {
         done = m_life->FindMore(&cells, &ncells);
-        
+
         for (size_t m = 0; m < ncells; m++)
             DrawCell(cells[m].i, cells[m].j, dc);
     }
