# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           github 1.0
PortGroup           cmake 1.1
PortGroup           compiler_blacklist_versions 1.0

PortGroup           LTO 1.0
PortGroup           locale_select 1.0
PortGroup           from_ports_variant 1.0

github.setup        fontforge fontforge 072208fae782cd85e34bc09905e9133d8ded555c
fetch.type          git
distname            ${name}-git
version             2030101.56

categories          graphics fonts
platforms           darwin linux
maintainers         nomaintainer
license             BSD

description         Outline and bitmap font editor/converter for many formats

long_description    FontForge allows you to edit outline and bitmap fonts.  You may create \
                    new ones or modify old ones.  It is also a format converter and can \
                    interconvert between PostScript (ascii & binary Type1, some Type3, \
                    some Type0), TrueType, OpenType (Type2), CID, SVG.  Previously known as \
                    pfaedit.

homepage            https://fontforge.org

# https://github.com/fontforge/fontforge/issues/5276
if {(${os.major} eq "darwin" && ${os.major} < 9) || \
    ${configure.build_arch} ni [list arm64 ppc64 x86_64]} {
    github.setup    fontforge fontforge 20201107
    revision        1

    checksums       rmd160  25ef811489661aa66200c3d49a5e6f8951129d9c \
                    sha256  68bcba8f602819eddc29cd356ee13fafbad7a80d19b652d354c6791343476c78 \
                    size    14163424

    # fix 32-bit builds by masking an old Carbon call to GetTime
    patchfiles-append \
                    patch-fontforge-carbon-gettime-namecollision.diff

    # use older noerr macros
    platform darwin {
        if {${os.major} <= 10} {
            patchfiles-append \
                    patch-fontforge-startui-require-noerr.diff
        }
    }

    # the date command on Tiger is too old for this port, use gnu coreutils dates instead
    platform darwin 8 {
        depends_build-append path:libexec/coreutils/libstdbuf.so:coreutils
        configure.env-append PATH=${prefix}/libexec/gnubin/:$env(PATH)

        # add SRefCon definition, which is missing in the Tiger SDK
        patchfiles-append \
                    patch-fontforge-startui-SRefCon-tiger.diff
    }
} else {
    patchfiles-append \
                    stdlib.patch \
                    patch-cmake-project-has-objc.diff
    platform darwin {
        pre-configure {
            if {[string match *gcc* ${configure.objc}]} {
                ui_error "Fontforge will not build using OBJCC=${configure.objc}; use configure.objc=clang-mp-* to select a Clang compiler"
                return -code error "Fontforge requires clang to compile ObjC"
            }
        }

        variant x11 description {force the GTk3 X11 backend} {}
        if {[variant_isset x11]} {
            PortGroup active_variants 1.1

            require_active_variants gtk3 x11
            # hack the startup routine so the X11 GDK backend is picked even if GTk3
            # has been built with both backends available (in which case fontforge
            # somehow manages to pick the quartz backend!)
            patchfiles-append \
                    patch-force-gdk-x11-backend.diff
        }
    }
}

patchfiles-append   patch-allow-wayland.diff

github.tarball_from releases
use_xz              yes

depends_build-append \
                    port:pkgconfig

fromPorts::depends lib \
                    port:libspiro
depends_lib-append \
                    path:lib/pkgconfig/cairo.pc:cairo \
                    port:readline \
                    port:freetype \
                    port:gettext \
                    port:giflib \
                    path:include/turbojpeg.h:libjpeg-turbo \
                    port:libiconv \
                    port:libpng \
                    port:libuninameslist \
                    port:libxml2 \
                    path:lib/pkgconfig/pango.pc:pango \
                    port:potrace \
                    port:tiff \
                    port:woff2 \
                    port:zlib

post-patch {
    # https://github.com/fontforge/fontforge/issues/5251#issuecomment-1614365162
    reinplace -q {s/\(%[^%[:space:]]*\)hs/\1s/g} \
        ${worksrcpath}/fontforgeexe/searchview.c \
        {*}[glob ${worksrcpath}/po/*.po]
}

compiler.c_standard 2011

configure.args-append \
                    -DENABLE_GUI=OFF \
                    -DENABLE_LIBGIF=ON \
                    -DENABLE_LIBJPEG=ON \
                    -DENABLE_LIBPNG=ON \
                    -DENABLE_LIBREADLINE=ON \
                    -DENABLE_LIBSPIRO=ON \
                    -DENABLE_LIBTIFF=ON \
                    -DENABLE_UNINAMELIST=ON \
                    -DENABLE_PYTHON_SCRIPTING=OFF \
                    -DENABLE_PYTHON_EXTENSION=OFF \
                    -DENABLE_WOFF2=ON \
                    -DENABLE_WRITE_PFM=OFF \
                    -DENABLE_X11=OFF \
                    -DENABLE_FONTFORGE_EXTRAS=ON \
                    -DENABLE_DOCS=OFF

set python_versions {3.8 3.9 3.10 3.11 3.12 3.13}
# generate the Python variants:
foreach pdv ${python_versions} {
    set pv [join [split ${pdv} '.'] ""]
    set conflist ""

    foreach v ${python_versions} {
        if {${v} ne ${pdv}} {
            set cv [join [split ${v} '.'] ""]
            set conflist "${conflist} python${cv}"
        }
    }

    variant python${pv} conflicts ${conflist} description [list Enable Python support (Python ${pdv})] {}
}

# with this method we can't use inline variant payload definition... and have to
# loop twice over the supported versions: all variants need to be defined first!
foreach pdv ${python_versions} {
    set pv [join [split ${pdv} '.'] ""]

    if {[variant_isset python${pv}]} {
        set python_variant_set yes
    }

    if {[variant_isset python${pv}]} {
        depends_lib-append  port:python${pv}
        configure.args-replace \
                        -DENABLE_PYTHON_EXTENSION=OFF \
                        -DENABLE_PYTHON_EXTENSION=ON
        configure.args-replace \
                        -DENABLE_PYTHON_SCRIPTING=OFF \
                        -DENABLE_PYTHON_SCRIPTING=ON
        configure.args-append \
                        -DPython3_EXECUTABLE="${prefix}/bin/python${pdv}" \
                        -DPYHOOK_INSTALL_DIR="${frameworks_dir}/Python.framework/Versions/${pdv}/lib/python${pdv}/site-packages"
        configure.pkg_config_path \
                        "${frameworks_dir}/Python.framework/Versions/${pdv}/lib/pkgconfig"
    }
}

if {![tbool python_variant_set]} {
    default_variants-append +python38
}

variant gui description {Enable GUI support} {
    if {${os.platform} eq "darwin"} {
        PortGroup       app 1.0
        app.name        FontForge
        app.icon        ${worksrcpath}/osx/FontForge.app/Contents/Resources/FontForge.icns
    }
    depends_lib-append  path:lib/pkgconfig/gtk+-3.0.pc:gtk3
    configure.args-replace \
                        -DENABLE_GUI=OFF -DENABLE_GUI=ON
}

variant docs description {Install the documentation} {
    configure.args-replace \
                        -DENABLE_DOCS=OFF \
                        -DENABLE_DOCS=ON
    configure.args-append \
                        -DSPHINX_USE_VENV=ON
}

default_variants-append +gui

if {[variant_isset gui]} {
    notes-append "
To make the GUI work, you have to open a font when launching fontforge for the\
first time, e.g.:

    ${prefix}/bin/fontforge some-font-file.otf
"
}

build.post_args-append  -wk
